{
    "openapi": "3.0.0",
    "info": {
      "version": "1.0.0",
      "title": "prisma-express-passport",
      "description": "A simple RESTful API, utilizing Express with Prisma. Note that you are unable to update, create or delete anything without being logged in",
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "tags": [
      {
        "name": "Users",
        "description": "API for users"
      },
      {
        "name": "Posts",
        "description": "API for posts"
      }
    ],
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "components": {
      "securitySchemes": {
        "cookieAuth": {
          "type": "apiKey",
          "in": "cookie",
          "name": "session"
        }
      }
    },
    "paths": {
      "/login": {
        "post": {
          "summary": "Logs in",
          "tags": ["Auth"],
          "requestBody": {
            "required": true,
            "description": "Logs into a given user. Only reads email & password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Auth"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "400": {
              "description": "'field' is required"
            },
            "404": {
              "description": "Unable to login"
            }
          }
        }
      },
      "/register": {
        "post": {
          "summary": "Registers",
          "tags": ["Auth"],
          "requestBody": {
            "required": true,
            "description": "Registers a user. Only reads email, password and displayName. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Auth"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK, redirects to login",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "400": {
              "description": "'field' is required or invalid. (valid email, password, display name)"
            },
            "404": {
              "description": "Unable to register"
            }
          }
        }
      },
      "/users": {
        "get": {
          "tags": ["Users"],
          "summary": "Get all users",
          "responses": {
            "200": {
              "description": "OK",
              "type": "object"
            }
          }
        }
      },
      "/users/{id}": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "User with id",
            "type": "integer"
          }
        ],
        "get": {
          "tags": ["Users"],
          "summary": "Gets a single user",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "404": {
              "description": "Unable to find user"
            }
          }
        },
        "put": {
          "summary": "Updates a user with id",
          "tags": ["Users"],
          "requestBody": {
            "required": true,
            "description": "Update a user. Only reads email, password and displayName",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Update a user with new data",
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "400": {
              "description": "'field' is required"
            },
            "404": {
              "description": "Unable to update user or redirected (Cannot PUT /login)"
            }
          }
        },
        "delete": {
          "summary": "Delete user with id",
          "tags": ["Users"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Delete user with id",
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "type": "integer"
            },
            "404": {
              "description": "Unable to delete user or redirected (Cannot DELETE /login)"
            }
          }
        }
      },
      "/posts": {
        "get": {
          "tags": ["Posts"],
          "summary": "Get all posts",
          "responses": {
            "200": {
              "description": "OK",
              "type": "object"
            }
          }
        }
      },
      "/posts/{id}": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Post with id",
            "type": "integer"
          }
        ],
        "get": {
          "tags": ["Posts"],
          "summary": "Gets a single post",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Post"
              }
            },
            "404": {
              "description": "Unable to find post"
            }
          }
        },
        "put": {
          "summary": "Update post with id",
          "tags": ["Posts"],
          "requestBody": {
            "required": true,
            "description": "Update a post with a given id. id property in json object will  NOT be read. Only reads title, content, published",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Post"
                }
              }
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Update post with new data",
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "schema": {
                "$ref": "#/definitions/Post"
              }
            },
            "400": {
              "description": "'field' is required"
            },
            "404": {
              "description": "Unable to update post or redirected (Cannot PUT /login)"
            }
          }
        },
        "delete": {
          "summary": "Delete post with id",
          "tags": ["Posts"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Delete post with id",
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "schema": {
                "$ref": "#/definitions/Post"
              }
            },
            "404": {
              "description": "Unable to delete post or redirected (Cannot DELETE /login)"
            }
          }
        }
      },
      "/users/{id}/posts": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "User with id",
            "type": "integer"
          }
        ],
        "get": {
          "tags": ["Posts"],
          "summary": "Get all posts from user",
          "responses": {
            "200": {
              "description": "OK",
              "type": "object"
            }
          }
        }
      }
    },
    "definitions": {
      "Auth": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "users": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "published": {
            "type": "boolean"
          },
          "author": {
            "type": "object"
          }
        }
      },
      "Posts": {
        "type": "object",
        "properties": {
          "users": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/Post"
            }
          }
        }
      }
    }
  }