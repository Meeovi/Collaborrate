schema {
  query: Query
  subscription: Subscription
}

directive @external on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

"""The root query type which gives access points into the data universe."""
type Query {
  """Reads and enables pagination through a set of `_Audience`."""
  allAudiences(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_Audience`."""
    orderBy: [_AudiencesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _AudienceCondition
  ): _AudiencesConnection
  """Reads a set of `_Audience`."""
  allAudiencesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_Audience`."""
    orderBy: [_AudiencesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _AudienceCondition
  ): [_Audience!]
  """Reads and enables pagination through a set of `_GlobalConfig`."""
  allGlobalConfigs(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_GlobalConfig`."""
    orderBy: [_GlobalConfigsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _GlobalConfigCondition
  ): _GlobalConfigsConnection
  """Reads a set of `_GlobalConfig`."""
  allGlobalConfigsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_GlobalConfig`."""
    orderBy: [_GlobalConfigsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _GlobalConfigCondition
  ): [_GlobalConfig!]
  """Reads and enables pagination through a set of `_GraphQlConfig`."""
  allGraphQlConfigs(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_GraphQlConfig`."""
    orderBy: [_GraphQlConfigsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _GraphQlConfigCondition
  ): _GraphQlConfigsConnection
  """Reads a set of `_GraphQlConfig`."""
  allGraphQlConfigsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_GraphQlConfig`."""
    orderBy: [_GraphQlConfigsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _GraphQlConfigCondition
  ): [_GraphQlConfig!]
  """Reads and enables pagination through a set of `_Hook`."""
  allHooks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_Hook`."""
    orderBy: [_HooksOrderBy!] = [NATURAL]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _HookCondition
  ): _HooksConnection
  """Reads a set of `_Hook`."""
  allHooksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_Hook`."""
    orderBy: [_HooksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _HookCondition
  ): [_Hook!]
  """Reads and enables pagination through a set of `_Idempotency`."""
  allIdempotencies(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_Idempotency`."""
    orderBy: [_IdempotenciesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _IdempotencyCondition
  ): _IdempotenciesConnection
  """Reads a set of `_Idempotency`."""
  allIdempotenciesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_Idempotency`."""
    orderBy: [_IdempotenciesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _IdempotencyCondition
  ): [_Idempotency!]
  """Reads and enables pagination through a set of `_JobSchedule`."""
  allJobSchedules(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_JobSchedule`."""
    orderBy: [_JobSchedulesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JobScheduleCondition
  ): _JobSchedulesConnection
  """Reads a set of `_JobSchedule`."""
  allJobSchedulesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_JobSchedule`."""
    orderBy: [_JobSchedulesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JobScheduleCondition
  ): [_JobSchedule!]
  """Reads and enables pagination through a set of `_JobStatus`."""
  allJobStatuses(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_JobStatus`."""
    orderBy: [_JobStatusesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JobStatusCondition
  ): _JobStatusesConnection
  """Reads a set of `_JobStatus`."""
  allJobStatusesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_JobStatus`."""
    orderBy: [_JobStatusesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JobStatusCondition
  ): [_JobStatus!]
  """Reads and enables pagination through a set of `_JoinRolesRole`."""
  allJoinRolesRoles(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_JoinRolesRole`."""
    orderBy: [_JoinRolesRolesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JoinRolesRoleCondition
  ): _JoinRolesRolesConnection
  """Reads a set of `_JoinRolesRole`."""
  allJoinRolesRolesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_JoinRolesRole`."""
    orderBy: [_JoinRolesRolesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JoinRolesRoleCondition
  ): [_JoinRolesRole!]
  """Reads and enables pagination through a set of `_JoinUsersRole`."""
  allJoinUsersRoles(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_JoinUsersRole`."""
    orderBy: [_JoinUsersRolesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JoinUsersRoleCondition
  ): _JoinUsersRolesConnection
  """Reads a set of `_JoinUsersRole`."""
  allJoinUsersRolesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_JoinUsersRole`."""
    orderBy: [_JoinUsersRolesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JoinUsersRoleCondition
  ): [_JoinUsersRole!]
  """Reads and enables pagination through a set of `_PushStatus`."""
  allPushStatuses(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_PushStatus`."""
    orderBy: [_PushStatusesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _PushStatusCondition
  ): _PushStatusesConnection
  """Reads a set of `_PushStatus`."""
  allPushStatusesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_PushStatus`."""
    orderBy: [_PushStatusesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _PushStatusCondition
  ): [_PushStatus!]
  """Reads and enables pagination through a set of `Role`."""
  allRoles(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Role`."""
    orderBy: [RolesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RoleCondition
  ): RolesConnection
  """Reads a set of `Role`."""
  allRolesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Role`."""
    orderBy: [RolesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RoleCondition
  ): [Role!]
  """Reads and enables pagination through a set of `_Schema`."""
  allSchemas(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_Schema`."""
    orderBy: [_SchemasOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _SchemaCondition
  ): _SchemasConnection
  """Reads a set of `_Schema`."""
  allSchemasList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_Schema`."""
    orderBy: [_SchemasOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _SchemaCondition
  ): [_Schema!]
  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): UsersConnection
  """Reads a set of `User`."""
  allUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]
  """Reads and enables pagination through a set of `_PrismaMigration`."""
  allPrismaMigrations(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _PrismaMigrationCondition
  ): _PrismaMigrationsConnection
  """Reads a set of `_PrismaMigration`."""
  allPrismaMigrationsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _PrismaMigrationCondition
  ): [_PrismaMigration!]
  """Reads and enables pagination through a set of `Account`."""
  allAccounts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AccountCondition
  ): AccountsConnection
  """Reads a set of `Account`."""
  allAccountsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AccountCondition
  ): [Account!]
  """Reads and enables pagination through a set of `Agreement`."""
  allAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): AgreementsConnection
  """Reads a set of `Agreement`."""
  allAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): [Agreement!]
  """Reads and enables pagination through a set of `Analytic`."""
  allAnalytics(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Analytic`."""
    orderBy: [AnalyticsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AnalyticCondition
  ): AnalyticsConnection
  """Reads a set of `Analytic`."""
  allAnalyticsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Analytic`."""
    orderBy: [AnalyticsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AnalyticCondition
  ): [Analytic!]
  """Reads and enables pagination through a set of `Apitoken`."""
  allApitokens(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Apitoken`."""
    orderBy: [ApitokensOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ApitokenCondition
  ): ApitokensConnection
  """Reads a set of `Apitoken`."""
  allApitokensList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Apitoken`."""
    orderBy: [ApitokensOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ApitokenCondition
  ): [Apitoken!]
  """Reads and enables pagination through a set of `Article`."""
  allArticles(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ArticleCondition
  ): ArticlesConnection
  """Reads a set of `Article`."""
  allArticlesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ArticleCondition
  ): [Article!]
  """Reads and enables pagination through a set of `Brand`."""
  allBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): BrandsConnection
  """Reads a set of `Brand`."""
  allBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]
  """Reads and enables pagination through a set of `CartPriceRule`."""
  allCartPriceRules(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CartPriceRule`."""
    orderBy: [CartPriceRulesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CartPriceRuleCondition
  ): CartPriceRulesConnection
  """Reads a set of `CartPriceRule`."""
  allCartPriceRulesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CartPriceRule`."""
    orderBy: [CartPriceRulesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CartPriceRuleCondition
  ): [CartPriceRule!]
  """Reads and enables pagination through a set of `Case`."""
  allCases(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Case`."""
    orderBy: [CasesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CaseCondition
  ): CasesConnection
  """Reads a set of `Case`."""
  allCasesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Case`."""
    orderBy: [CasesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CaseCondition
  ): [Case!]
  """Reads and enables pagination through a set of `CatalogPriceRule`."""
  allCatalogPriceRules(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CatalogPriceRule`."""
    orderBy: [CatalogPriceRulesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CatalogPriceRuleCondition
  ): CatalogPriceRulesConnection
  """Reads a set of `CatalogPriceRule`."""
  allCatalogPriceRulesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CatalogPriceRule`."""
    orderBy: [CatalogPriceRulesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CatalogPriceRuleCondition
  ): [CatalogPriceRule!]
  """Reads and enables pagination through a set of `Category`."""
  allCategories(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): CategoriesConnection
  """Reads a set of `Category`."""
  allCategoriesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): [Category!]
  """Reads and enables pagination through a set of `Channel`."""
  allChannels(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Channel`."""
    orderBy: [ChannelsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChannelCondition
  ): ChannelsConnection
  """Reads a set of `Channel`."""
  allChannelsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Channel`."""
    orderBy: [ChannelsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChannelCondition
  ): [Channel!]
  """Reads and enables pagination through a set of `Checklist`."""
  allChecklists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): ChecklistsConnection
  """Reads a set of `Checklist`."""
  allChecklistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): [Checklist!]
  """Reads and enables pagination through a set of `City`."""
  allCities(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `City`."""
    orderBy: [CitiesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CityCondition
  ): CitiesConnection
  """Reads a set of `City`."""
  allCitiesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `City`."""
    orderBy: [CitiesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CityCondition
  ): [City!]
  """Reads and enables pagination through a set of `Collection`."""
  allCollections(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CollectionCondition
  ): CollectionsConnection
  """Reads a set of `Collection`."""
  allCollectionsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CollectionCondition
  ): [Collection!]
  """Reads and enables pagination through a set of `Comment`."""
  allComments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): CommentsConnection
  """Reads a set of `Comment`."""
  allCommentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]
  """Reads and enables pagination through a set of `ContentType`."""
  allContentTypes(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ContentType`."""
    orderBy: [ContentTypesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ContentTypeCondition
  ): ContentTypesConnection
  """Reads a set of `ContentType`."""
  allContentTypesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ContentType`."""
    orderBy: [ContentTypesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ContentTypeCondition
  ): [ContentType!]
  """Reads and enables pagination through a set of `Contract`."""
  allContracts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Contract`."""
    orderBy: [ContractsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ContractCondition
  ): ContractsConnection
  """Reads a set of `Contract`."""
  allContractsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Contract`."""
    orderBy: [ContractsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ContractCondition
  ): [Contract!]
  """Reads and enables pagination through a set of `CoreStore`."""
  allCoreStores(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CoreStore`."""
    orderBy: [CoreStoresOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CoreStoreCondition
  ): CoreStoresConnection
  """Reads a set of `CoreStore`."""
  allCoreStoresList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CoreStore`."""
    orderBy: [CoreStoresOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CoreStoreCondition
  ): [CoreStore!]
  """Reads and enables pagination through a set of `Country`."""
  allCountries(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): CountriesConnection
  """Reads a set of `Country`."""
  allCountriesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): [Country!]
  """Reads and enables pagination through a set of `Coupon`."""
  allCoupons(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Coupon`."""
    orderBy: [CouponsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CouponCondition
  ): CouponsConnection
  """Reads a set of `Coupon`."""
  allCouponsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Coupon`."""
    orderBy: [CouponsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CouponCondition
  ): [Coupon!]
  """Reads and enables pagination through a set of `CreditMemo`."""
  allCreditMemos(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): CreditMemosConnection
  """Reads a set of `CreditMemo`."""
  allCreditMemosList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): [CreditMemo!]
  """Reads and enables pagination through a set of `Currency`."""
  allCurrencies(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Currency`."""
    orderBy: [CurrenciesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencyCondition
  ): CurrenciesConnection
  """Reads a set of `Currency`."""
  allCurrenciesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Currency`."""
    orderBy: [CurrenciesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencyCondition
  ): [Currency!]
  """Reads and enables pagination through a set of `CurrencyRate`."""
  allCurrencyRates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CurrencyRate`."""
    orderBy: [CurrencyRatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencyRateCondition
  ): CurrencyRatesConnection
  """Reads a set of `CurrencyRate`."""
  allCurrencyRatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CurrencyRate`."""
    orderBy: [CurrencyRatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencyRateCondition
  ): [CurrencyRate!]
  """Reads and enables pagination through a set of `CurrencySymbol`."""
  allCurrencySymbols(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CurrencySymbol`."""
    orderBy: [CurrencySymbolsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencySymbolCondition
  ): CurrencySymbolsConnection
  """Reads a set of `CurrencySymbol`."""
  allCurrencySymbolsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CurrencySymbol`."""
    orderBy: [CurrencySymbolsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencySymbolCondition
  ): [CurrencySymbol!]
  """Reads and enables pagination through a set of `CustomerGroup`."""
  allCustomerGroups(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CustomerGroup`."""
    orderBy: [CustomerGroupsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerGroupCondition
  ): CustomerGroupsConnection
  """Reads a set of `CustomerGroup`."""
  allCustomerGroupsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CustomerGroup`."""
    orderBy: [CustomerGroupsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerGroupCondition
  ): [CustomerGroup!]
  """Reads and enables pagination through a set of `CustomerPayment`."""
  allCustomerPayments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CustomerPayment`."""
    orderBy: [CustomerPaymentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerPaymentCondition
  ): CustomerPaymentsConnection
  """Reads a set of `CustomerPayment`."""
  allCustomerPaymentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CustomerPayment`."""
    orderBy: [CustomerPaymentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerPaymentCondition
  ): [CustomerPayment!]
  """Reads and enables pagination through a set of `Customer`."""
  allCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): CustomersConnection
  """Reads a set of `Customer`."""
  allCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]
  """Reads and enables pagination through a set of `Customization`."""
  allCustomizations(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customization`."""
    orderBy: [CustomizationsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomizationCondition
  ): CustomizationsConnection
  """Reads a set of `Customization`."""
  allCustomizationsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customization`."""
    orderBy: [CustomizationsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomizationCondition
  ): [Customization!]
  """Reads and enables pagination through a set of `Dashboard`."""
  allDashboards(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Dashboard`."""
    orderBy: [DashboardsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: DashboardCondition
  ): DashboardsConnection
  """Reads a set of `Dashboard`."""
  allDashboardsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Dashboard`."""
    orderBy: [DashboardsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: DashboardCondition
  ): [Dashboard!]
  """Reads and enables pagination through a set of `EmailTemplate`."""
  allEmailTemplates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `EmailTemplate`."""
    orderBy: [EmailTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailTemplateCondition
  ): EmailTemplatesConnection
  """Reads a set of `EmailTemplate`."""
  allEmailTemplatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `EmailTemplate`."""
    orderBy: [EmailTemplatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailTemplateCondition
  ): [EmailTemplate!]
  """Reads and enables pagination through a set of `Email`."""
  allEmails(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): EmailsConnection
  """Reads a set of `Email`."""
  allEmailsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): [Email!]
  """Reads and enables pagination through a set of `Event`."""
  allEvents(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EventCondition
  ): EventsConnection
  """Reads a set of `Event`."""
  allEventsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EventCondition
  ): [Event!]
  """Reads and enables pagination through a set of `Fullfillment`."""
  allFullfillments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Fullfillment`."""
    orderBy: [FullfillmentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: FullfillmentCondition
  ): FullfillmentsConnection
  """Reads a set of `Fullfillment`."""
  allFullfillmentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Fullfillment`."""
    orderBy: [FullfillmentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: FullfillmentCondition
  ): [Fullfillment!]
  """Reads and enables pagination through a set of `GeneralSetting`."""
  allGeneralSettings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `GeneralSetting`."""
    orderBy: [GeneralSettingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GeneralSettingCondition
  ): GeneralSettingsConnection
  """Reads a set of `GeneralSetting`."""
  allGeneralSettingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `GeneralSetting`."""
    orderBy: [GeneralSettingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GeneralSettingCondition
  ): [GeneralSetting!]
  """Reads and enables pagination through a set of `GiftCertificate`."""
  allGiftCertificates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `GiftCertificate`."""
    orderBy: [GiftCertificatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GiftCertificateCondition
  ): GiftCertificatesConnection
  """Reads a set of `GiftCertificate`."""
  allGiftCertificatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `GiftCertificate`."""
    orderBy: [GiftCertificatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GiftCertificateCondition
  ): [GiftCertificate!]
  """Reads and enables pagination through a set of `Glossary`."""
  allGlossaries(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Glossary`."""
    orderBy: [GlossariesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GlossaryCondition
  ): GlossariesConnection
  """Reads a set of `Glossary`."""
  allGlossariesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Glossary`."""
    orderBy: [GlossariesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GlossaryCondition
  ): [Glossary!]
  """Reads and enables pagination through a set of `Importm`."""
  allImportms(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Importm`."""
    orderBy: [ImportmsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ImportmCondition
  ): ImportmsConnection
  """Reads a set of `Importm`."""
  allImportmsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Importm`."""
    orderBy: [ImportmsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ImportmCondition
  ): [Importm!]
  """Reads and enables pagination through a set of `Integration`."""
  allIntegrations(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Integration`."""
    orderBy: [IntegrationsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: IntegrationCondition
  ): IntegrationsConnection
  """Reads a set of `Integration`."""
  allIntegrationsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Integration`."""
    orderBy: [IntegrationsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: IntegrationCondition
  ): [Integration!]
  """Reads and enables pagination through a set of `Internalization`."""
  allInternalizations(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Internalization`."""
    orderBy: [InternalizationsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InternalizationCondition
  ): InternalizationsConnection
  """Reads a set of `Internalization`."""
  allInternalizationsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Internalization`."""
    orderBy: [InternalizationsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InternalizationCondition
  ): [Internalization!]
  """Reads and enables pagination through a set of `Invitation`."""
  allInvitations(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Invitation`."""
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InvitationCondition
  ): InvitationsConnection
  """Reads a set of `Invitation`."""
  allInvitationsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Invitation`."""
    orderBy: [InvitationsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InvitationCondition
  ): [Invitation!]
  """Reads and enables pagination through a set of `Invoice`."""
  allInvoices(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InvoiceCondition
  ): InvoicesConnection
  """Reads a set of `Invoice`."""
  allInvoicesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InvoiceCondition
  ): [Invoice!]
  """Reads and enables pagination through a set of `Knowledgebase`."""
  allKnowledgebases(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Knowledgebase`."""
    orderBy: [KnowledgebasesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: KnowledgebaseCondition
  ): KnowledgebasesConnection
  """Reads a set of `Knowledgebase`."""
  allKnowledgebasesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Knowledgebase`."""
    orderBy: [KnowledgebasesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: KnowledgebaseCondition
  ): [Knowledgebase!]
  """Reads and enables pagination through a set of `Lead`."""
  allLeads(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Lead`."""
    orderBy: [LeadsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: LeadCondition
  ): LeadsConnection
  """Reads a set of `Lead`."""
  allLeadsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Lead`."""
    orderBy: [LeadsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: LeadCondition
  ): [Lead!]
  """Reads and enables pagination through a set of `Manufacturer`."""
  allManufacturers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Manufacturer`."""
    orderBy: [ManufacturersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ManufacturerCondition
  ): ManufacturersConnection
  """Reads a set of `Manufacturer`."""
  allManufacturersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Manufacturer`."""
    orderBy: [ManufacturersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ManufacturerCondition
  ): [Manufacturer!]
  """Reads and enables pagination through a set of `Mediamanager`."""
  allMediamanagers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection
  """Reads a set of `Mediamanager`."""
  allMediamanagersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]
  """Reads and enables pagination through a set of `Meeting`."""
  allMeetings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Meeting`."""
    orderBy: [MeetingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MeetingCondition
  ): MeetingsConnection
  """Reads a set of `Meeting`."""
  allMeetingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Meeting`."""
    orderBy: [MeetingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MeetingCondition
  ): [Meeting!]
  """Reads and enables pagination through a set of `Message`."""
  allMessages(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): MessagesConnection
  """Reads a set of `Message`."""
  allMessagesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): [Message!]
  """Reads and enables pagination through a set of `NewsletterSubscriber`."""
  allNewsletterSubscribers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `NewsletterSubscriber`."""
    orderBy: [NewsletterSubscribersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: NewsletterSubscriberCondition
  ): NewsletterSubscribersConnection
  """Reads a set of `NewsletterSubscriber`."""
  allNewsletterSubscribersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `NewsletterSubscriber`."""
    orderBy: [NewsletterSubscribersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: NewsletterSubscriberCondition
  ): [NewsletterSubscriber!]
  """Reads and enables pagination through a set of `Occassion`."""
  allOccassions(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): OccassionsConnection
  """Reads a set of `Occassion`."""
  allOccassionsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): [Occassion!]
  """Reads and enables pagination through a set of `Ooto`."""
  allOotos(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Ooto`."""
    orderBy: [OotosOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OotoCondition
  ): OotosConnection
  """Reads a set of `Ooto`."""
  allOotosList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Ooto`."""
    orderBy: [OotosOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OotoCondition
  ): [Ooto!]
  """Reads and enables pagination through a set of `Opportunity`."""
  allOpportunities(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OpportunityCondition
  ): OpportunitiesConnection
  """Reads a set of `Opportunity`."""
  allOpportunitiesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OpportunityCondition
  ): [Opportunity!]
  """Reads and enables pagination through a set of `Order`."""
  allOrders(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): OrdersConnection
  """Reads a set of `Order`."""
  allOrdersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): [Order!]
  """Reads and enables pagination through a set of `Page`."""
  allPages(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PageCondition
  ): PagesConnection
  """Reads a set of `Page`."""
  allPagesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PageCondition
  ): [Page!]
  """Reads and enables pagination through a set of `Partner`."""
  allPartners(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Partner`."""
    orderBy: [PartnersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PartnerCondition
  ): PartnersConnection
  """Reads a set of `Partner`."""
  allPartnersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Partner`."""
    orderBy: [PartnersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PartnerCondition
  ): [Partner!]
  """Reads and enables pagination through a set of `Payment`."""
  allPayments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PaymentCondition
  ): PaymentsConnection
  """Reads a set of `Payment`."""
  allPaymentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PaymentCondition
  ): [Payment!]
  """Reads and enables pagination through a set of `PdfTemplate`."""
  allPdfTemplates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `PdfTemplate`."""
    orderBy: [PdfTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PdfTemplateCondition
  ): PdfTemplatesConnection
  """Reads a set of `PdfTemplate`."""
  allPdfTemplatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `PdfTemplate`."""
    orderBy: [PdfTemplatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PdfTemplateCondition
  ): [PdfTemplate!]
  """Reads and enables pagination through a set of `Permission`."""
  allPermissions(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PermissionCondition
  ): PermissionsConnection
  """Reads a set of `Permission`."""
  allPermissionsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PermissionCondition
  ): [Permission!]
  """Reads and enables pagination through a set of `Plugin`."""
  allPlugins(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Plugin`."""
    orderBy: [PluginsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PluginCondition
  ): PluginsConnection
  """Reads a set of `Plugin`."""
  allPluginsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Plugin`."""
    orderBy: [PluginsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PluginCondition
  ): [Plugin!]
  """Reads and enables pagination through a set of `Poll`."""
  allPolls(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Poll`."""
    orderBy: [PollsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PollCondition
  ): PollsConnection
  """Reads a set of `Poll`."""
  allPollsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Poll`."""
    orderBy: [PollsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PollCondition
  ): [Poll!]
  """Reads and enables pagination through a set of `ProductAttribute`."""
  allProductAttributes(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ProductAttribute`."""
    orderBy: [ProductAttributesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeCondition
  ): ProductAttributesConnection
  """Reads a set of `ProductAttribute`."""
  allProductAttributesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ProductAttribute`."""
    orderBy: [ProductAttributesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeCondition
  ): [ProductAttribute!]
  """Reads and enables pagination through a set of `ProductAttributeSet`."""
  allProductAttributeSets(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ProductAttributeSet`."""
    orderBy: [ProductAttributeSetsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeSetCondition
  ): ProductAttributeSetsConnection
  """Reads a set of `ProductAttributeSet`."""
  allProductAttributeSetsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ProductAttributeSet`."""
    orderBy: [ProductAttributeSetsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeSetCondition
  ): [ProductAttributeSet!]
  """Reads and enables pagination through a set of `ProductType`."""
  allProductTypes(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ProductType`."""
    orderBy: [ProductTypesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductTypeCondition
  ): ProductTypesConnection
  """Reads a set of `ProductType`."""
  allProductTypesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ProductType`."""
    orderBy: [ProductTypesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductTypeCondition
  ): [ProductType!]
  """Reads and enables pagination through a set of `Product`."""
  allProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): ProductsConnection
  """Reads a set of `Product`."""
  allProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]
  """Reads and enables pagination through a set of `ProjectTemplate`."""
  allProjectTemplates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ProjectTemplate`."""
    orderBy: [ProjectTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectTemplateCondition
  ): ProjectTemplatesConnection
  """Reads a set of `ProjectTemplate`."""
  allProjectTemplatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ProjectTemplate`."""
    orderBy: [ProjectTemplatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectTemplateCondition
  ): [ProjectTemplate!]
  """Reads and enables pagination through a set of `Project`."""
  allProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection
  """Reads a set of `Project`."""
  allProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]
  """Reads and enables pagination through a set of `Provider`."""
  allProviders(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Provider`."""
    orderBy: [ProvidersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProviderCondition
  ): ProvidersConnection
  """Reads a set of `Provider`."""
  allProvidersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Provider`."""
    orderBy: [ProvidersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProviderCondition
  ): [Provider!]
  """Reads and enables pagination through a set of `Quote`."""
  allQuotes(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): QuotesConnection
  """Reads a set of `Quote`."""
  allQuotesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): [Quote!]
  """Reads and enables pagination through a set of `Rating`."""
  allRatings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Rating`."""
    orderBy: [RatingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RatingCondition
  ): RatingsConnection
  """Reads a set of `Rating`."""
  allRatingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Rating`."""
    orderBy: [RatingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RatingCondition
  ): [Rating!]
  """Reads and enables pagination through a set of `Report`."""
  allReports(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReportCondition
  ): ReportsConnection
  """Reads a set of `Report`."""
  allReportsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReportCondition
  ): [Report!]
  """Reads and enables pagination through a set of `Return`."""
  allReturns(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): ReturnsConnection
  """Reads a set of `Return`."""
  allReturnsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): [Return!]
  """Reads and enables pagination through a set of `Review`."""
  allReviews(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReviewCondition
  ): ReviewsConnection
  """Reads a set of `Review`."""
  allReviewsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReviewCondition
  ): [Review!]
  """Reads and enables pagination through a set of `Reward`."""
  allRewards(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Reward`."""
    orderBy: [RewardsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RewardCondition
  ): RewardsConnection
  """Reads a set of `Reward`."""
  allRewardsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Reward`."""
    orderBy: [RewardsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RewardCondition
  ): [Reward!]
  """Reads and enables pagination through a set of `Segment`."""
  allSegments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Segment`."""
    orderBy: [SegmentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SegmentCondition
  ): SegmentsConnection
  """Reads a set of `Segment`."""
  allSegmentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Segment`."""
    orderBy: [SegmentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SegmentCondition
  ): [Segment!]
  """Reads and enables pagination through a set of `Settingscustomer`."""
  allSettingscustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Settingscustomer`."""
    orderBy: [SettingscustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingscustomerCondition
  ): SettingscustomersConnection
  """Reads a set of `Settingscustomer`."""
  allSettingscustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Settingscustomer`."""
    orderBy: [SettingscustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingscustomerCondition
  ): [Settingscustomer!]
  """Reads and enables pagination through a set of `Settingsgeneral`."""
  allSettingsgenerals(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Settingsgeneral`."""
    orderBy: [SettingsgeneralsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingsgeneralCondition
  ): SettingsgeneralsConnection
  """Reads a set of `Settingsgeneral`."""
  allSettingsgeneralsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Settingsgeneral`."""
    orderBy: [SettingsgeneralsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingsgeneralCondition
  ): [Settingsgeneral!]
  """Reads and enables pagination through a set of `Settingshop`."""
  allSettingshops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Settingshop`."""
    orderBy: [SettingshopsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingshopCondition
  ): SettingshopsConnection
  """Reads a set of `Settingshop`."""
  allSettingshopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Settingshop`."""
    orderBy: [SettingshopsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingshopCondition
  ): [Settingshop!]
  """Reads and enables pagination through a set of `Settingsmarketing`."""
  allSettingsmarketings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Settingsmarketing`."""
    orderBy: [SettingsmarketingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingsmarketingCondition
  ): SettingsmarketingsConnection
  """Reads a set of `Settingsmarketing`."""
  allSettingsmarketingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Settingsmarketing`."""
    orderBy: [SettingsmarketingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingsmarketingCondition
  ): [Settingsmarketing!]
  """Reads and enables pagination through a set of `Settingssale`."""
  allSettingssales(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Settingssale`."""
    orderBy: [SettingssalesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingssaleCondition
  ): SettingssalesConnection
  """Reads a set of `Settingssale`."""
  allSettingssalesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Settingssale`."""
    orderBy: [SettingssalesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingssaleCondition
  ): [Settingssale!]
  """Reads and enables pagination through a set of `Shipment`."""
  allShipments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Shipment`."""
    orderBy: [ShipmentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShipmentCondition
  ): ShipmentsConnection
  """Reads a set of `Shipment`."""
  allShipmentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Shipment`."""
    orderBy: [ShipmentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShipmentCondition
  ): [Shipment!]
  """Reads and enables pagination through a set of `ShopSetting`."""
  allShopSettings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ShopSetting`."""
    orderBy: [ShopSettingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopSettingCondition
  ): ShopSettingsConnection
  """Reads a set of `ShopSetting`."""
  allShopSettingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ShopSetting`."""
    orderBy: [ShopSettingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopSettingCondition
  ): [ShopSetting!]
  """Reads and enables pagination through a set of `Shop`."""
  allShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): ShopsConnection
  """Reads a set of `Shop`."""
  allShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): [Shop!]
  """Reads and enables pagination through a set of `Source`."""
  allSources(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Source`."""
    orderBy: [SourcesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SourceCondition
  ): SourcesConnection
  """Reads a set of `Source`."""
  allSourcesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Source`."""
    orderBy: [SourcesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SourceCondition
  ): [Source!]
  """Reads and enables pagination through a set of `SpecialDiscount`."""
  allSpecialDiscounts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `SpecialDiscount`."""
    orderBy: [SpecialDiscountsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SpecialDiscountCondition
  ): SpecialDiscountsConnection
  """Reads a set of `SpecialDiscount`."""
  allSpecialDiscountsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `SpecialDiscount`."""
    orderBy: [SpecialDiscountsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SpecialDiscountCondition
  ): [SpecialDiscount!]
  """Reads and enables pagination through a set of `State`."""
  allStates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): StatesConnection
  """Reads a set of `State`."""
  allStatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): [State!]
  """Reads and enables pagination through a set of `Statistic`."""
  allStatistics(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Statistic`."""
    orderBy: [StatisticsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StatisticCondition
  ): StatisticsConnection
  """Reads a set of `Statistic`."""
  allStatisticsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Statistic`."""
    orderBy: [StatisticsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StatisticCondition
  ): [Statistic!]
  """Reads and enables pagination through a set of `Stock`."""
  allStocks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Stock`."""
    orderBy: [StocksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StockCondition
  ): StocksConnection
  """Reads a set of `Stock`."""
  allStocksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Stock`."""
    orderBy: [StocksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StockCondition
  ): [Stock!]
  """Reads and enables pagination through a set of `Survey`."""
  allSurveys(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Survey`."""
    orderBy: [SurveysOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SurveyCondition
  ): SurveysConnection
  """Reads a set of `Survey`."""
  allSurveysList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Survey`."""
    orderBy: [SurveysOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SurveyCondition
  ): [Survey!]
  """Reads and enables pagination through a set of `Tag`."""
  allTags(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TagCondition
  ): TagsConnection
  """Reads a set of `Tag`."""
  allTagsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TagCondition
  ): [Tag!]
  """Reads and enables pagination through a set of `Target`."""
  allTargets(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Target`."""
    orderBy: [TargetsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TargetCondition
  ): TargetsConnection
  """Reads a set of `Target`."""
  allTargetsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Target`."""
    orderBy: [TargetsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TargetCondition
  ): [Target!]
  """Reads and enables pagination through a set of `Task`."""
  allTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): TasksConnection
  """Reads a set of `Task`."""
  allTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]
  """Reads and enables pagination through a set of `TaxCategory`."""
  allTaxCategories(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `TaxCategory`."""
    orderBy: [TaxCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxCategoryCondition
  ): TaxCategoriesConnection
  """Reads a set of `TaxCategory`."""
  allTaxCategoriesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `TaxCategory`."""
    orderBy: [TaxCategoriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxCategoryCondition
  ): [TaxCategory!]
  """Reads and enables pagination through a set of `TaxRate`."""
  allTaxRates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `TaxRate`."""
    orderBy: [TaxRatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRateCondition
  ): TaxRatesConnection
  """Reads a set of `TaxRate`."""
  allTaxRatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `TaxRate`."""
    orderBy: [TaxRatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRateCondition
  ): [TaxRate!]
  """Reads and enables pagination through a set of `TaxRule`."""
  allTaxRules(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `TaxRule`."""
    orderBy: [TaxRulesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRuleCondition
  ): TaxRulesConnection
  """Reads a set of `TaxRule`."""
  allTaxRulesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `TaxRule`."""
    orderBy: [TaxRulesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRuleCondition
  ): [TaxRule!]
  """Reads and enables pagination through a set of `Theme`."""
  allThemes(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Theme`."""
    orderBy: [ThemesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ThemeCondition
  ): ThemesConnection
  """Reads a set of `Theme`."""
  allThemesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Theme`."""
    orderBy: [ThemesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ThemeCondition
  ): [Theme!]
  """Reads and enables pagination through a set of `Ticketing`."""
  allTicketings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Ticketing`."""
    orderBy: [TicketingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TicketingCondition
  ): TicketingsConnection
  """Reads a set of `Ticketing`."""
  allTicketingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Ticketing`."""
    orderBy: [TicketingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TicketingCondition
  ): [Ticketing!]
  """Reads and enables pagination through a set of `Training`."""
  allTrainings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection
  """Reads a set of `Training`."""
  allTrainingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]
  """Reads and enables pagination through a set of `Transaction`."""
  allTransactions(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): TransactionsConnection
  """Reads a set of `Transaction`."""
  allTransactionsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): [Transaction!]
  """Reads and enables pagination through a set of `UploadFile`."""
  allUploadFiles(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `UploadFile`."""
    orderBy: [UploadFilesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UploadFileCondition
  ): UploadFilesConnection
  """Reads a set of `UploadFile`."""
  allUploadFilesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `UploadFile`."""
    orderBy: [UploadFilesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UploadFileCondition
  ): [UploadFile!]
  """Reads and enables pagination through a set of `UploadFileMorph`."""
  allUploadFileMorphs(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `UploadFileMorph`."""
    orderBy: [UploadFileMorphsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UploadFileMorphCondition
  ): UploadFileMorphsConnection
  """Reads a set of `UploadFileMorph`."""
  allUploadFileMorphsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `UploadFileMorph`."""
    orderBy: [UploadFileMorphsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UploadFileMorphCondition
  ): [UploadFileMorph!]
  """Reads and enables pagination through a set of `UrlRewrite`."""
  allUrlRewrites(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `UrlRewrite`."""
    orderBy: [UrlRewritesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UrlRewriteCondition
  ): UrlRewritesConnection
  """Reads a set of `UrlRewrite`."""
  allUrlRewritesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `UrlRewrite`."""
    orderBy: [UrlRewritesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UrlRewriteCondition
  ): [UrlRewrite!]
  """Reads and enables pagination through a set of `Visit`."""
  allVisits(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Visit`."""
    orderBy: [VisitsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: VisitCondition
  ): VisitsConnection
  """Reads a set of `Visit`."""
  allVisitsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Visit`."""
    orderBy: [VisitsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: VisitCondition
  ): [Visit!]
  """Reads and enables pagination through a set of `Warehouse`."""
  allWarehouses(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Warehouse`."""
    orderBy: [WarehousesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WarehouseCondition
  ): WarehousesConnection
  """Reads a set of `Warehouse`."""
  allWarehousesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Warehouse`."""
    orderBy: [WarehousesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WarehouseCondition
  ): [Warehouse!]
  """Reads and enables pagination through a set of `Webhook`."""
  allWebhooks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Webhook`."""
    orderBy: [WebhooksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WebhookCondition
  ): WebhooksConnection
  """Reads a set of `Webhook`."""
  allWebhooksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Webhook`."""
    orderBy: [WebhooksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WebhookCondition
  ): [Webhook!]
  """Reads and enables pagination through a set of `Website`."""
  allWebsites(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Website`."""
    orderBy: [WebsitesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WebsiteCondition
  ): WebsitesConnection
  """Reads a set of `Website`."""
  allWebsitesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Website`."""
    orderBy: [WebsitesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WebsiteCondition
  ): [Website!]
  """Reads and enables pagination through a set of `Wishlist`."""
  allWishlists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Wishlist`."""
    orderBy: [WishlistsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WishlistCondition
  ): WishlistsConnection
  """Reads a set of `Wishlist`."""
  allWishlistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Wishlist`."""
    orderBy: [WishlistsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WishlistCondition
  ): [Wishlist!]
  """Reads and enables pagination through a set of `Workspace`."""
  allWorkspaces(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection
  """Reads a set of `Workspace`."""
  allWorkspacesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]
  """Reads and enables pagination through a set of `Zone`."""
  allZones(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Zone`."""
    orderBy: [ZonesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ZoneCondition
  ): ZonesConnection
  """Reads a set of `Zone`."""
  allZonesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Zone`."""
    orderBy: [ZonesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ZoneCondition
  ): [Zone!]
  _audienceByObjectId(objectId: String!): _Audience
  _globalConfigByObjectId(objectId: String!): _GlobalConfig
  _graphQlConfigByObjectId(objectId: String!): _GraphQlConfig
  _idempotencyByObjectId(objectId: String!): _Idempotency
  _jobScheduleByObjectId(objectId: String!): _JobSchedule
  _jobStatusByObjectId(objectId: String!): _JobStatus
  _joinRolesRoleByRelatedIdAndOwningId(relatedId: String!, owningId: String!): _JoinRolesRole
  _joinUsersRoleByRelatedIdAndOwningId(relatedId: String!, owningId: String!): _JoinUsersRole
  _pushStatusByObjectId(objectId: String!): _PushStatus
  _roleByObjectId(objectId: String!): _Role
  _schemaByClassName(className: String!): _Schema
  _userByObjectId(objectId: String!): _User
  _prismaMigrationById(id: String!): _PrismaMigration
  accountById(id: BigInt!): Account
  agreementById(id: Int!): Agreement
  analyticById(id: BigInt!): Analytic
  apitokenById(id: BigInt!): Apitoken
  articleById(id: Int!): Article
  brandById(id: BigInt!): Brand
  cartPriceRuleById(id: Int!): CartPriceRule
  caseById(id: BigInt!): Case
  catalogPriceRuleById(id: Int!): CatalogPriceRule
  categoryById(id: Int!): Category
  channelById(id: BigInt!): Channel
  checklistById(id: BigInt!): Checklist
  cityById(id: Int!): City
  collectionById(id: BigInt!): Collection
  commentById(id: Int!): Comment
  contentTypeById(id: BigInt!): ContentType
  contractById(id: BigInt!): Contract
  coreStoreById(id: Int!): CoreStore
  countryById(id: Int!): Country
  couponById(id: BigInt!): Coupon
  creditMemoByCreditMemoAndId(creditMemo: String!, id: BigInt!): CreditMemo
  currencyById(id: BigInt!): Currency
  currencyRateByImportService(importService: String!): CurrencyRate
  currencySymbolBySymbol(symbol: String!): CurrencySymbol
  customerGroupById(id: BigInt!): CustomerGroup
  customerPaymentById(id: BigInt!): CustomerPayment
  customerById(id: Int!): Customer
  customizationById(id: Int!): Customization
  dashboardById(id: BigInt!): Dashboard
  emailTemplateById(id: BigInt!): EmailTemplate
  emailById(id: Int!): Email
  eventById(id: BigInt!): Event
  fullfillmentById(id: BigInt!): Fullfillment
  generalSettingById(id: BigInt!): GeneralSetting
  giftCertificateById(id: BigInt!): GiftCertificate
  glossaryById(id: Int!): Glossary
  importmById(id: BigInt!): Importm
  integrationById(id: BigInt!): Integration
  internalizationById(id: BigInt!): Internalization
  invitationById(id: BigInt!): Invitation
  invoiceById(id: BigInt!): Invoice
  knowledgebaseById(id: BigInt!): Knowledgebase
  leadById(id: BigInt!): Lead
  manufacturerById(id: BigInt!): Manufacturer
  mediamanagerById(id: Int!): Mediamanager
  meetingById(id: BigInt!): Meeting
  messageById(id: Int!): Message
  newsletterSubscriberById(id: Int!): NewsletterSubscriber
  occassionById(id: BigInt!): Occassion
  ootoById(id: BigInt!): Ooto
  opportunityById(id: BigInt!): Opportunity
  orderById(id: Int!): Order
  pageById(id: Int!): Page
  partnerById(id: BigInt!): Partner
  paymentById(id: BigInt!): Payment
  pdfTemplateById(id: BigInt!): PdfTemplate
  permissionById(id: BigInt!): Permission
  pluginById(id: BigInt!): Plugin
  pollById(id: Int!): Poll
  productAttributeById(id: Int!): ProductAttribute
  productAttributeSetById(id: Int!): ProductAttributeSet
  productTypeById(id: Int!): ProductType
  productById(id: BigInt!): Product
  projectTemplateById(id: BigInt!): ProjectTemplate
  projectById(id: BigInt!): Project
  providerById(id: BigInt!): Provider
  quoteById(id: Int!): Quote
  ratingById(id: Int!): Rating
  reportById(id: Int!): Report
  returnById(id: BigInt!): Return
  reviewById(id: Int!): Review
  rewardById(id: Int!): Reward
  roleById(id: Int!): Role
  segmentById(id: BigInt!): Segment
  settingscustomerById(id: BigInt!): Settingscustomer
  settingsgeneralById(id: BigInt!): Settingsgeneral
  settingshopById(id: BigInt!): Settingshop
  settingsmarketingById(id: BigInt!): Settingsmarketing
  settingssaleById(id: BigInt!): Settingssale
  shipmentById(id: BigInt!): Shipment
  shopSettingById(id: BigInt!): ShopSetting
  shopById(id: Int!): Shop
  sourceById(id: Int!): Source
  specialDiscountById(id: Int!): SpecialDiscount
  stateById(id: Int!): State
  statisticById(id: Int!): Statistic
  stockById(id: Int!): Stock
  surveyById(id: BigInt!): Survey
  tagById(id: Int!): Tag
  targetById(id: BigInt!): Target
  taskById(id: BigInt!): Task
  taxCategoryById(id: BigInt!): TaxCategory
  taxRateById(id: Int!): TaxRate
  taxRuleById(id: Int!): TaxRule
  themeById(id: Int!): Theme
  ticketingById(id: BigInt!): Ticketing
  trainingById(id: BigInt!): Training
  transactionById(id: Int!): Transaction
  uploadFileById(id: Int!): UploadFile
  uploadFileMorphById(id: Int!): UploadFileMorph
  urlRewriteById(id: Int!): UrlRewrite
  userById(id: Int!): User
  visitById(id: BigInt!): Visit
  warehouseById(id: BigInt!): Warehouse
  webhookById(id: BigInt!): Webhook
  websiteById(id: BigInt!): Website
  wishlistById(id: BigInt!): Wishlist
  workspaceById(id: BigInt!): Workspace
  zoneById(id: BigInt!): Zone
  arrayAdd(array: JSON!, values: JSON!): JSON
  arrayAddUnique(array: JSON!, values: JSON!): JSON
  arrayContains(array: JSON!, values: JSON!): Boolean
  arrayContainsAll(array: JSON!, values: JSON!): Boolean
  arrayContainsAllRegex(array: JSON!, values: JSON!): Boolean
  arrayRemove(array: JSON!, values: JSON!): JSON
  jsonObjectSetKey(json: JSON!, keyToSet: String!, valueToSet: String!): JSON
  """Reads a single `_Audience` using its globally unique `ID`."""
  _audience(
    """The globally unique `ID` to be used in selecting a single `_Audience`."""
    nodeId: ID!
  ): _Audience
  """Reads a single `_GlobalConfig` using its globally unique `ID`."""
  _globalConfig(
    """The globally unique `ID` to be used in selecting a single `_GlobalConfig`."""
    nodeId: ID!
  ): _GlobalConfig
  """Reads a single `_GraphQlConfig` using its globally unique `ID`."""
  _graphQlConfig(
    """The globally unique `ID` to be used in selecting a single `_GraphQlConfig`."""
    nodeId: ID!
  ): _GraphQlConfig
  """Reads a single `_Idempotency` using its globally unique `ID`."""
  _idempotency(
    """The globally unique `ID` to be used in selecting a single `_Idempotency`."""
    nodeId: ID!
  ): _Idempotency
  """Reads a single `_JobSchedule` using its globally unique `ID`."""
  _jobSchedule(
    """The globally unique `ID` to be used in selecting a single `_JobSchedule`."""
    nodeId: ID!
  ): _JobSchedule
  """Reads a single `_JobStatus` using its globally unique `ID`."""
  _jobStatus(
    """The globally unique `ID` to be used in selecting a single `_JobStatus`."""
    nodeId: ID!
  ): _JobStatus
  """Reads a single `_JoinRolesRole` using its globally unique `ID`."""
  _joinRolesRole(
    """The globally unique `ID` to be used in selecting a single `_JoinRolesRole`."""
    nodeId: ID!
  ): _JoinRolesRole
  """Reads a single `_JoinUsersRole` using its globally unique `ID`."""
  _joinUsersRole(
    """The globally unique `ID` to be used in selecting a single `_JoinUsersRole`."""
    nodeId: ID!
  ): _JoinUsersRole
  """Reads a single `_PushStatus` using its globally unique `ID`."""
  _pushStatus(
    """The globally unique `ID` to be used in selecting a single `_PushStatus`."""
    nodeId: ID!
  ): _PushStatus
  """Reads a single `_Role` using its globally unique `ID`."""
  _role(
    """The globally unique `ID` to be used in selecting a single `_Role`."""
    nodeId: ID!
  ): _Role
  """Reads a single `_Schema` using its globally unique `ID`."""
  _schema(
    """The globally unique `ID` to be used in selecting a single `_Schema`."""
    nodeId: ID!
  ): _Schema
  """Reads a single `_User` using its globally unique `ID`."""
  _user(
    """The globally unique `ID` to be used in selecting a single `_User`."""
    nodeId: ID!
  ): _User
  """Reads a single `_PrismaMigration` using its globally unique `ID`."""
  _prismaMigration(
    """The globally unique `ID` to be used in selecting a single `_PrismaMigration`."""
    nodeId: ID!
  ): _PrismaMigration
  """Reads a single `Account` using its globally unique `ID`."""
  account(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    nodeId: ID!
  ): Account
  """Reads a single `Agreement` using its globally unique `ID`."""
  agreement(
    """The globally unique `ID` to be used in selecting a single `Agreement`."""
    nodeId: ID!
  ): Agreement
  """Reads a single `Analytic` using its globally unique `ID`."""
  analytic(
    """The globally unique `ID` to be used in selecting a single `Analytic`."""
    nodeId: ID!
  ): Analytic
  """Reads a single `Apitoken` using its globally unique `ID`."""
  apitoken(
    """The globally unique `ID` to be used in selecting a single `Apitoken`."""
    nodeId: ID!
  ): Apitoken
  """Reads a single `Article` using its globally unique `ID`."""
  article(
    """The globally unique `ID` to be used in selecting a single `Article`."""
    nodeId: ID!
  ): Article
  """Reads a single `Brand` using its globally unique `ID`."""
  brand(
    """The globally unique `ID` to be used in selecting a single `Brand`."""
    nodeId: ID!
  ): Brand
  """Reads a single `CartPriceRule` using its globally unique `ID`."""
  cartPriceRule(
    """The globally unique `ID` to be used in selecting a single `CartPriceRule`."""
    nodeId: ID!
  ): CartPriceRule
  """Reads a single `Case` using its globally unique `ID`."""
  case(
    """The globally unique `ID` to be used in selecting a single `Case`."""
    nodeId: ID!
  ): Case
  """Reads a single `CatalogPriceRule` using its globally unique `ID`."""
  catalogPriceRule(
    """The globally unique `ID` to be used in selecting a single `CatalogPriceRule`."""
    nodeId: ID!
  ): CatalogPriceRule
  """Reads a single `Category` using its globally unique `ID`."""
  category(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    nodeId: ID!
  ): Category
  """Reads a single `Channel` using its globally unique `ID`."""
  channel(
    """The globally unique `ID` to be used in selecting a single `Channel`."""
    nodeId: ID!
  ): Channel
  """Reads a single `Checklist` using its globally unique `ID`."""
  checklist(
    """The globally unique `ID` to be used in selecting a single `Checklist`."""
    nodeId: ID!
  ): Checklist
  """Reads a single `City` using its globally unique `ID`."""
  city(
    """The globally unique `ID` to be used in selecting a single `City`."""
    nodeId: ID!
  ): City
  """Reads a single `Collection` using its globally unique `ID`."""
  collection(
    """The globally unique `ID` to be used in selecting a single `Collection`."""
    nodeId: ID!
  ): Collection
  """Reads a single `Comment` using its globally unique `ID`."""
  comment(
    """The globally unique `ID` to be used in selecting a single `Comment`."""
    nodeId: ID!
  ): Comment
  """Reads a single `ContentType` using its globally unique `ID`."""
  contentType(
    """The globally unique `ID` to be used in selecting a single `ContentType`."""
    nodeId: ID!
  ): ContentType
  """Reads a single `Contract` using its globally unique `ID`."""
  contract(
    """The globally unique `ID` to be used in selecting a single `Contract`."""
    nodeId: ID!
  ): Contract
  """Reads a single `CoreStore` using its globally unique `ID`."""
  coreStore(
    """The globally unique `ID` to be used in selecting a single `CoreStore`."""
    nodeId: ID!
  ): CoreStore
  """Reads a single `Country` using its globally unique `ID`."""
  country(
    """The globally unique `ID` to be used in selecting a single `Country`."""
    nodeId: ID!
  ): Country
  """Reads a single `Coupon` using its globally unique `ID`."""
  coupon(
    """The globally unique `ID` to be used in selecting a single `Coupon`."""
    nodeId: ID!
  ): Coupon
  """Reads a single `CreditMemo` using its globally unique `ID`."""
  creditMemo(
    """The globally unique `ID` to be used in selecting a single `CreditMemo`."""
    nodeId: ID!
  ): CreditMemo
  """Reads a single `Currency` using its globally unique `ID`."""
  currency(
    """The globally unique `ID` to be used in selecting a single `Currency`."""
    nodeId: ID!
  ): Currency
  """Reads a single `CurrencyRate` using its globally unique `ID`."""
  currencyRate(
    """The globally unique `ID` to be used in selecting a single `CurrencyRate`."""
    nodeId: ID!
  ): CurrencyRate
  """Reads a single `CurrencySymbol` using its globally unique `ID`."""
  currencySymbol(
    """The globally unique `ID` to be used in selecting a single `CurrencySymbol`."""
    nodeId: ID!
  ): CurrencySymbol
  """Reads a single `CustomerGroup` using its globally unique `ID`."""
  customerGroup(
    """The globally unique `ID` to be used in selecting a single `CustomerGroup`."""
    nodeId: ID!
  ): CustomerGroup
  """Reads a single `CustomerPayment` using its globally unique `ID`."""
  customerPayment(
    """The globally unique `ID` to be used in selecting a single `CustomerPayment`."""
    nodeId: ID!
  ): CustomerPayment
  """Reads a single `Customer` using its globally unique `ID`."""
  customer(
    """The globally unique `ID` to be used in selecting a single `Customer`."""
    nodeId: ID!
  ): Customer
  """Reads a single `Customization` using its globally unique `ID`."""
  customization(
    """The globally unique `ID` to be used in selecting a single `Customization`."""
    nodeId: ID!
  ): Customization
  """Reads a single `Dashboard` using its globally unique `ID`."""
  dashboard(
    """The globally unique `ID` to be used in selecting a single `Dashboard`."""
    nodeId: ID!
  ): Dashboard
  """Reads a single `EmailTemplate` using its globally unique `ID`."""
  emailTemplate(
    """The globally unique `ID` to be used in selecting a single `EmailTemplate`."""
    nodeId: ID!
  ): EmailTemplate
  """Reads a single `Email` using its globally unique `ID`."""
  email(
    """The globally unique `ID` to be used in selecting a single `Email`."""
    nodeId: ID!
  ): Email
  """Reads a single `Event` using its globally unique `ID`."""
  event(
    """The globally unique `ID` to be used in selecting a single `Event`."""
    nodeId: ID!
  ): Event
  """Reads a single `Fullfillment` using its globally unique `ID`."""
  fullfillment(
    """The globally unique `ID` to be used in selecting a single `Fullfillment`."""
    nodeId: ID!
  ): Fullfillment
  """Reads a single `GeneralSetting` using its globally unique `ID`."""
  generalSetting(
    """The globally unique `ID` to be used in selecting a single `GeneralSetting`."""
    nodeId: ID!
  ): GeneralSetting
  """Reads a single `GiftCertificate` using its globally unique `ID`."""
  giftCertificate(
    """The globally unique `ID` to be used in selecting a single `GiftCertificate`."""
    nodeId: ID!
  ): GiftCertificate
  """Reads a single `Glossary` using its globally unique `ID`."""
  glossary(
    """The globally unique `ID` to be used in selecting a single `Glossary`."""
    nodeId: ID!
  ): Glossary
  """Reads a single `Importm` using its globally unique `ID`."""
  importm(
    """The globally unique `ID` to be used in selecting a single `Importm`."""
    nodeId: ID!
  ): Importm
  """Reads a single `Integration` using its globally unique `ID`."""
  integration(
    """The globally unique `ID` to be used in selecting a single `Integration`."""
    nodeId: ID!
  ): Integration
  """Reads a single `Internalization` using its globally unique `ID`."""
  internalization(
    """The globally unique `ID` to be used in selecting a single `Internalization`."""
    nodeId: ID!
  ): Internalization
  """Reads a single `Invitation` using its globally unique `ID`."""
  invitation(
    """The globally unique `ID` to be used in selecting a single `Invitation`."""
    nodeId: ID!
  ): Invitation
  """Reads a single `Invoice` using its globally unique `ID`."""
  invoice(
    """The globally unique `ID` to be used in selecting a single `Invoice`."""
    nodeId: ID!
  ): Invoice
  """Reads a single `Knowledgebase` using its globally unique `ID`."""
  knowledgebase(
    """The globally unique `ID` to be used in selecting a single `Knowledgebase`."""
    nodeId: ID!
  ): Knowledgebase
  """Reads a single `Lead` using its globally unique `ID`."""
  lead(
    """The globally unique `ID` to be used in selecting a single `Lead`."""
    nodeId: ID!
  ): Lead
  """Reads a single `Manufacturer` using its globally unique `ID`."""
  manufacturer(
    """The globally unique `ID` to be used in selecting a single `Manufacturer`."""
    nodeId: ID!
  ): Manufacturer
  """Reads a single `Mediamanager` using its globally unique `ID`."""
  mediamanager(
    """The globally unique `ID` to be used in selecting a single `Mediamanager`."""
    nodeId: ID!
  ): Mediamanager
  """Reads a single `Meeting` using its globally unique `ID`."""
  meeting(
    """The globally unique `ID` to be used in selecting a single `Meeting`."""
    nodeId: ID!
  ): Meeting
  """Reads a single `Message` using its globally unique `ID`."""
  message(
    """The globally unique `ID` to be used in selecting a single `Message`."""
    nodeId: ID!
  ): Message
  """Reads a single `NewsletterSubscriber` using its globally unique `ID`."""
  newsletterSubscriber(
    """The globally unique `ID` to be used in selecting a single `NewsletterSubscriber`."""
    nodeId: ID!
  ): NewsletterSubscriber
  """Reads a single `Occassion` using its globally unique `ID`."""
  occassion(
    """The globally unique `ID` to be used in selecting a single `Occassion`."""
    nodeId: ID!
  ): Occassion
  """Reads a single `Ooto` using its globally unique `ID`."""
  ooto(
    """The globally unique `ID` to be used in selecting a single `Ooto`."""
    nodeId: ID!
  ): Ooto
  """Reads a single `Opportunity` using its globally unique `ID`."""
  opportunity(
    """The globally unique `ID` to be used in selecting a single `Opportunity`."""
    nodeId: ID!
  ): Opportunity
  """Reads a single `Order` using its globally unique `ID`."""
  order(
    """The globally unique `ID` to be used in selecting a single `Order`."""
    nodeId: ID!
  ): Order
  """Reads a single `Page` using its globally unique `ID`."""
  page(
    """The globally unique `ID` to be used in selecting a single `Page`."""
    nodeId: ID!
  ): Page
  """Reads a single `Partner` using its globally unique `ID`."""
  partner(
    """The globally unique `ID` to be used in selecting a single `Partner`."""
    nodeId: ID!
  ): Partner
  """Reads a single `Payment` using its globally unique `ID`."""
  payment(
    """The globally unique `ID` to be used in selecting a single `Payment`."""
    nodeId: ID!
  ): Payment
  """Reads a single `PdfTemplate` using its globally unique `ID`."""
  pdfTemplate(
    """The globally unique `ID` to be used in selecting a single `PdfTemplate`."""
    nodeId: ID!
  ): PdfTemplate
  """Reads a single `Permission` using its globally unique `ID`."""
  permission(
    """The globally unique `ID` to be used in selecting a single `Permission`."""
    nodeId: ID!
  ): Permission
  """Reads a single `Plugin` using its globally unique `ID`."""
  plugin(
    """The globally unique `ID` to be used in selecting a single `Plugin`."""
    nodeId: ID!
  ): Plugin
  """Reads a single `Poll` using its globally unique `ID`."""
  poll(
    """The globally unique `ID` to be used in selecting a single `Poll`."""
    nodeId: ID!
  ): Poll
  """Reads a single `ProductAttribute` using its globally unique `ID`."""
  productAttribute(
    """The globally unique `ID` to be used in selecting a single `ProductAttribute`."""
    nodeId: ID!
  ): ProductAttribute
  """Reads a single `ProductAttributeSet` using its globally unique `ID`."""
  productAttributeSet(
    """The globally unique `ID` to be used in selecting a single `ProductAttributeSet`."""
    nodeId: ID!
  ): ProductAttributeSet
  """Reads a single `ProductType` using its globally unique `ID`."""
  productType(
    """The globally unique `ID` to be used in selecting a single `ProductType`."""
    nodeId: ID!
  ): ProductType
  """Reads a single `Product` using its globally unique `ID`."""
  product(
    """The globally unique `ID` to be used in selecting a single `Product`."""
    nodeId: ID!
  ): Product
  """Reads a single `ProjectTemplate` using its globally unique `ID`."""
  projectTemplate(
    """The globally unique `ID` to be used in selecting a single `ProjectTemplate`."""
    nodeId: ID!
  ): ProjectTemplate
  """Reads a single `Project` using its globally unique `ID`."""
  project(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    nodeId: ID!
  ): Project
  """Reads a single `Provider` using its globally unique `ID`."""
  provider(
    """The globally unique `ID` to be used in selecting a single `Provider`."""
    nodeId: ID!
  ): Provider
  """Reads a single `Quote` using its globally unique `ID`."""
  quote(
    """The globally unique `ID` to be used in selecting a single `Quote`."""
    nodeId: ID!
  ): Quote
  """Reads a single `Rating` using its globally unique `ID`."""
  rating(
    """The globally unique `ID` to be used in selecting a single `Rating`."""
    nodeId: ID!
  ): Rating
  """Reads a single `Report` using its globally unique `ID`."""
  report(
    """The globally unique `ID` to be used in selecting a single `Report`."""
    nodeId: ID!
  ): Report
  """Reads a single `Return` using its globally unique `ID`."""
  return(
    """The globally unique `ID` to be used in selecting a single `Return`."""
    nodeId: ID!
  ): Return
  """Reads a single `Review` using its globally unique `ID`."""
  review(
    """The globally unique `ID` to be used in selecting a single `Review`."""
    nodeId: ID!
  ): Review
  """Reads a single `Reward` using its globally unique `ID`."""
  reward(
    """The globally unique `ID` to be used in selecting a single `Reward`."""
    nodeId: ID!
  ): Reward
  """Reads a single `Role` using its globally unique `ID`."""
  role(
    """The globally unique `ID` to be used in selecting a single `Role`."""
    nodeId: ID!
  ): Role
  """Reads a single `Segment` using its globally unique `ID`."""
  segment(
    """The globally unique `ID` to be used in selecting a single `Segment`."""
    nodeId: ID!
  ): Segment
  """Reads a single `Settingscustomer` using its globally unique `ID`."""
  settingscustomer(
    """The globally unique `ID` to be used in selecting a single `Settingscustomer`."""
    nodeId: ID!
  ): Settingscustomer
  """Reads a single `Settingsgeneral` using its globally unique `ID`."""
  settingsgeneral(
    """The globally unique `ID` to be used in selecting a single `Settingsgeneral`."""
    nodeId: ID!
  ): Settingsgeneral
  """Reads a single `Settingshop` using its globally unique `ID`."""
  settingshop(
    """The globally unique `ID` to be used in selecting a single `Settingshop`."""
    nodeId: ID!
  ): Settingshop
  """Reads a single `Settingsmarketing` using its globally unique `ID`."""
  settingsmarketing(
    """The globally unique `ID` to be used in selecting a single `Settingsmarketing`."""
    nodeId: ID!
  ): Settingsmarketing
  """Reads a single `Settingssale` using its globally unique `ID`."""
  settingssale(
    """The globally unique `ID` to be used in selecting a single `Settingssale`."""
    nodeId: ID!
  ): Settingssale
  """Reads a single `Shipment` using its globally unique `ID`."""
  shipment(
    """The globally unique `ID` to be used in selecting a single `Shipment`."""
    nodeId: ID!
  ): Shipment
  """Reads a single `ShopSetting` using its globally unique `ID`."""
  shopSetting(
    """The globally unique `ID` to be used in selecting a single `ShopSetting`."""
    nodeId: ID!
  ): ShopSetting
  """Reads a single `Shop` using its globally unique `ID`."""
  shop(
    """The globally unique `ID` to be used in selecting a single `Shop`."""
    nodeId: ID!
  ): Shop
  """Reads a single `Source` using its globally unique `ID`."""
  source(
    """The globally unique `ID` to be used in selecting a single `Source`."""
    nodeId: ID!
  ): Source
  """Reads a single `SpecialDiscount` using its globally unique `ID`."""
  specialDiscount(
    """The globally unique `ID` to be used in selecting a single `SpecialDiscount`."""
    nodeId: ID!
  ): SpecialDiscount
  """Reads a single `State` using its globally unique `ID`."""
  state(
    """The globally unique `ID` to be used in selecting a single `State`."""
    nodeId: ID!
  ): State
  """Reads a single `Statistic` using its globally unique `ID`."""
  statistic(
    """The globally unique `ID` to be used in selecting a single `Statistic`."""
    nodeId: ID!
  ): Statistic
  """Reads a single `Stock` using its globally unique `ID`."""
  stock(
    """The globally unique `ID` to be used in selecting a single `Stock`."""
    nodeId: ID!
  ): Stock
  """Reads a single `Survey` using its globally unique `ID`."""
  survey(
    """The globally unique `ID` to be used in selecting a single `Survey`."""
    nodeId: ID!
  ): Survey
  """Reads a single `Tag` using its globally unique `ID`."""
  tag(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    nodeId: ID!
  ): Tag
  """Reads a single `Target` using its globally unique `ID`."""
  target(
    """The globally unique `ID` to be used in selecting a single `Target`."""
    nodeId: ID!
  ): Target
  """Reads a single `Task` using its globally unique `ID`."""
  task(
    """The globally unique `ID` to be used in selecting a single `Task`."""
    nodeId: ID!
  ): Task
  """Reads a single `TaxCategory` using its globally unique `ID`."""
  taxCategory(
    """The globally unique `ID` to be used in selecting a single `TaxCategory`."""
    nodeId: ID!
  ): TaxCategory
  """Reads a single `TaxRate` using its globally unique `ID`."""
  taxRate(
    """The globally unique `ID` to be used in selecting a single `TaxRate`."""
    nodeId: ID!
  ): TaxRate
  """Reads a single `TaxRule` using its globally unique `ID`."""
  taxRule(
    """The globally unique `ID` to be used in selecting a single `TaxRule`."""
    nodeId: ID!
  ): TaxRule
  """Reads a single `Theme` using its globally unique `ID`."""
  theme(
    """The globally unique `ID` to be used in selecting a single `Theme`."""
    nodeId: ID!
  ): Theme
  """Reads a single `Ticketing` using its globally unique `ID`."""
  ticketing(
    """The globally unique `ID` to be used in selecting a single `Ticketing`."""
    nodeId: ID!
  ): Ticketing
  """Reads a single `Training` using its globally unique `ID`."""
  training(
    """The globally unique `ID` to be used in selecting a single `Training`."""
    nodeId: ID!
  ): Training
  """Reads a single `Transaction` using its globally unique `ID`."""
  transaction(
    """The globally unique `ID` to be used in selecting a single `Transaction`."""
    nodeId: ID!
  ): Transaction
  """Reads a single `UploadFile` using its globally unique `ID`."""
  uploadFile(
    """The globally unique `ID` to be used in selecting a single `UploadFile`."""
    nodeId: ID!
  ): UploadFile
  """Reads a single `UploadFileMorph` using its globally unique `ID`."""
  uploadFileMorph(
    """The globally unique `ID` to be used in selecting a single `UploadFileMorph`."""
    nodeId: ID!
  ): UploadFileMorph
  """Reads a single `UrlRewrite` using its globally unique `ID`."""
  urlRewrite(
    """The globally unique `ID` to be used in selecting a single `UrlRewrite`."""
    nodeId: ID!
  ): UrlRewrite
  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  """Reads a single `Visit` using its globally unique `ID`."""
  visit(
    """The globally unique `ID` to be used in selecting a single `Visit`."""
    nodeId: ID!
  ): Visit
  """Reads a single `Warehouse` using its globally unique `ID`."""
  warehouse(
    """The globally unique `ID` to be used in selecting a single `Warehouse`."""
    nodeId: ID!
  ): Warehouse
  """Reads a single `Webhook` using its globally unique `ID`."""
  webhook(
    """The globally unique `ID` to be used in selecting a single `Webhook`."""
    nodeId: ID!
  ): Webhook
  """Reads a single `Website` using its globally unique `ID`."""
  website(
    """The globally unique `ID` to be used in selecting a single `Website`."""
    nodeId: ID!
  ): Website
  """Reads a single `Wishlist` using its globally unique `ID`."""
  wishlist(
    """The globally unique `ID` to be used in selecting a single `Wishlist`."""
    nodeId: ID!
  ): Wishlist
  """Reads a single `Workspace` using its globally unique `ID`."""
  workspace(
    """The globally unique `ID` to be used in selecting a single `Workspace`."""
    nodeId: ID!
  ): Workspace
  """Reads a single `Zone` using its globally unique `ID`."""
  zone(
    """The globally unique `ID` to be used in selecting a single `Zone`."""
    nodeId: ID!
  ): Zone
  """
  Fetches a list of entities using their representations; used for Apollo
  Federation.
  """
  _entities(representations: [_Any!]!): [_Entity]! @deprecated(reason: "Only Apollo Federation should use this")
  """
  Entrypoint for Apollo Federation to determine more information about
  this service.
  """
  _service: _Service! @deprecated(reason: "Only Apollo Federation should use this")
}

"""A connection to a list of `_Audience` values."""
type _AudiencesConnection {
  """A list of `_Audience` objects."""
  nodes: [_Audience]!
  """A list of edges which contains the `_Audience` and cursor to aid in pagination."""
  edges: [_AudiencesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_Audience` you could get from the connection."""
  totalCount: Int!
}

type _Audience implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  objectId: String!
  createdAt: Datetime
  updatedAt: Datetime
  name: String
  query: String
  lastUsed: Datetime
  timesUsed: Float
  _rperm: [String]
  _wperm: [String]
}

"""An object with a globally unique `ID`."""
interface Node {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A `_Audience` edge in the connection."""
type _AudiencesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_Audience` at the end of the edge."""
  node: _Audience
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `_Audience`."""
enum _AudiencesOrderBy {
  NATURAL
  OBJECT_ID_ASC
  OBJECT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  NAME_ASC
  NAME_DESC
  QUERY_ASC
  QUERY_DESC
  LAST_USED_ASC
  LAST_USED_DESC
  TIMES_USED_ASC
  TIMES_USED_DESC
  _RPERM_ASC
  _RPERM_DESC
  _WPERM_ASC
  _WPERM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `_Audience` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input _AudienceCondition {
  """Checks for equality with the object’s `objectId` field."""
  objectId: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `query` field."""
  query: String
  """Checks for equality with the object’s `lastUsed` field."""
  lastUsed: Datetime
  """Checks for equality with the object’s `timesUsed` field."""
  timesUsed: Float
  """Checks for equality with the object’s `_rperm` field."""
  _rperm: [String]
  """Checks for equality with the object’s `_wperm` field."""
  _wperm: [String]
}

"""A connection to a list of `_GlobalConfig` values."""
type _GlobalConfigsConnection {
  """A list of `_GlobalConfig` objects."""
  nodes: [_GlobalConfig]!
  """A list of edges which contains the `_GlobalConfig` and cursor to aid in pagination."""
  edges: [_GlobalConfigsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_GlobalConfig` you could get from the connection."""
  totalCount: Int!
}

type _GlobalConfig implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  objectId: String!
  params: JSON
  masterKeyOnly: JSON
}

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A `_GlobalConfig` edge in the connection."""
type _GlobalConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_GlobalConfig` at the end of the edge."""
  node: _GlobalConfig
}

"""Methods to use when ordering `_GlobalConfig`."""
enum _GlobalConfigsOrderBy {
  NATURAL
  OBJECT_ID_ASC
  OBJECT_ID_DESC
  PARAMS_ASC
  PARAMS_DESC
  MASTER_KEY_ONLY_ASC
  MASTER_KEY_ONLY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `_GlobalConfig` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _GlobalConfigCondition {
  """Checks for equality with the object’s `objectId` field."""
  objectId: String
  """Checks for equality with the object’s `params` field."""
  params: JSON
  """Checks for equality with the object’s `masterKeyOnly` field."""
  masterKeyOnly: JSON
}

"""A connection to a list of `_GraphQlConfig` values."""
type _GraphQlConfigsConnection {
  """A list of `_GraphQlConfig` objects."""
  nodes: [_GraphQlConfig]!
  """A list of edges which contains the `_GraphQlConfig` and cursor to aid in pagination."""
  edges: [_GraphQlConfigsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_GraphQlConfig` you could get from the connection."""
  totalCount: Int!
}

type _GraphQlConfig implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  objectId: String!
  config: JSON
}

"""A `_GraphQlConfig` edge in the connection."""
type _GraphQlConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_GraphQlConfig` at the end of the edge."""
  node: _GraphQlConfig
}

"""Methods to use when ordering `_GraphQlConfig`."""
enum _GraphQlConfigsOrderBy {
  NATURAL
  OBJECT_ID_ASC
  OBJECT_ID_DESC
  CONFIG_ASC
  CONFIG_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `_GraphQlConfig` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _GraphQlConfigCondition {
  """Checks for equality with the object’s `objectId` field."""
  objectId: String
  """Checks for equality with the object’s `config` field."""
  config: JSON
}

"""A connection to a list of `_Hook` values."""
type _HooksConnection {
  """A list of `_Hook` objects."""
  nodes: [_Hook]!
  """A list of edges which contains the `_Hook` and cursor to aid in pagination."""
  edges: [_HooksEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_Hook` you could get from the connection."""
  totalCount: Int!
}

type _Hook {
  functionName: String
  className: String
  triggerName: String
  url: String
}

"""A `_Hook` edge in the connection."""
type _HooksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_Hook` at the end of the edge."""
  node: _Hook
}

"""Methods to use when ordering `_Hook`."""
enum _HooksOrderBy {
  NATURAL
  FUNCTION_NAME_ASC
  FUNCTION_NAME_DESC
  CLASS_NAME_ASC
  CLASS_NAME_DESC
  TRIGGER_NAME_ASC
  TRIGGER_NAME_DESC
  URL_ASC
  URL_DESC
}

"""A condition to be used against `_Hook` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input _HookCondition {
  """Checks for equality with the object’s `functionName` field."""
  functionName: String
  """Checks for equality with the object’s `className` field."""
  className: String
  """Checks for equality with the object’s `triggerName` field."""
  triggerName: String
  """Checks for equality with the object’s `url` field."""
  url: String
}

"""A connection to a list of `_Idempotency` values."""
type _IdempotenciesConnection {
  """A list of `_Idempotency` objects."""
  nodes: [_Idempotency]!
  """A list of edges which contains the `_Idempotency` and cursor to aid in pagination."""
  edges: [_IdempotenciesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_Idempotency` you could get from the connection."""
  totalCount: Int!
}

type _Idempotency implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  objectId: String!
  createdAt: Datetime
  updatedAt: Datetime
  reqId: String
  expire: Datetime
  _rperm: [String]
  _wperm: [String]
}

"""A `_Idempotency` edge in the connection."""
type _IdempotenciesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_Idempotency` at the end of the edge."""
  node: _Idempotency
}

"""Methods to use when ordering `_Idempotency`."""
enum _IdempotenciesOrderBy {
  NATURAL
  OBJECT_ID_ASC
  OBJECT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  REQ_ID_ASC
  REQ_ID_DESC
  EXPIRE_ASC
  EXPIRE_DESC
  _RPERM_ASC
  _RPERM_DESC
  _WPERM_ASC
  _WPERM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `_Idempotency` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _IdempotencyCondition {
  """Checks for equality with the object’s `objectId` field."""
  objectId: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
  """Checks for equality with the object’s `reqId` field."""
  reqId: String
  """Checks for equality with the object’s `expire` field."""
  expire: Datetime
  """Checks for equality with the object’s `_rperm` field."""
  _rperm: [String]
  """Checks for equality with the object’s `_wperm` field."""
  _wperm: [String]
}

"""A connection to a list of `_JobSchedule` values."""
type _JobSchedulesConnection {
  """A list of `_JobSchedule` objects."""
  nodes: [_JobSchedule]!
  """A list of edges which contains the `_JobSchedule` and cursor to aid in pagination."""
  edges: [_JobSchedulesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_JobSchedule` you could get from the connection."""
  totalCount: Int!
}

type _JobSchedule implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  objectId: String!
  createdAt: Datetime
  updatedAt: Datetime
  jobName: String
  description: String
  params: String
  startAfter: String
  daysOfWeek: JSON
  timeOfDay: String
  lastRun: Float
  repeatMinutes: Float
  _rperm: [String]
  _wperm: [String]
}

"""A `_JobSchedule` edge in the connection."""
type _JobSchedulesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_JobSchedule` at the end of the edge."""
  node: _JobSchedule
}

"""Methods to use when ordering `_JobSchedule`."""
enum _JobSchedulesOrderBy {
  NATURAL
  OBJECT_ID_ASC
  OBJECT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  JOB_NAME_ASC
  JOB_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PARAMS_ASC
  PARAMS_DESC
  START_AFTER_ASC
  START_AFTER_DESC
  DAYS_OF_WEEK_ASC
  DAYS_OF_WEEK_DESC
  TIME_OF_DAY_ASC
  TIME_OF_DAY_DESC
  LAST_RUN_ASC
  LAST_RUN_DESC
  REPEAT_MINUTES_ASC
  REPEAT_MINUTES_DESC
  _RPERM_ASC
  _RPERM_DESC
  _WPERM_ASC
  _WPERM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `_JobSchedule` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _JobScheduleCondition {
  """Checks for equality with the object’s `objectId` field."""
  objectId: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
  """Checks for equality with the object’s `jobName` field."""
  jobName: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `params` field."""
  params: String
  """Checks for equality with the object’s `startAfter` field."""
  startAfter: String
  """Checks for equality with the object’s `daysOfWeek` field."""
  daysOfWeek: JSON
  """Checks for equality with the object’s `timeOfDay` field."""
  timeOfDay: String
  """Checks for equality with the object’s `lastRun` field."""
  lastRun: Float
  """Checks for equality with the object’s `repeatMinutes` field."""
  repeatMinutes: Float
  """Checks for equality with the object’s `_rperm` field."""
  _rperm: [String]
  """Checks for equality with the object’s `_wperm` field."""
  _wperm: [String]
}

"""A connection to a list of `_JobStatus` values."""
type _JobStatusesConnection {
  """A list of `_JobStatus` objects."""
  nodes: [_JobStatus]!
  """A list of edges which contains the `_JobStatus` and cursor to aid in pagination."""
  edges: [_JobStatusesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_JobStatus` you could get from the connection."""
  totalCount: Int!
}

type _JobStatus implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  objectId: String!
  createdAt: Datetime
  updatedAt: Datetime
  jobName: String
  source: String
  status: String
  message: String
  params: JSON
  finishedAt: Datetime
  _rperm: [String]
  _wperm: [String]
}

"""A `_JobStatus` edge in the connection."""
type _JobStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_JobStatus` at the end of the edge."""
  node: _JobStatus
}

"""Methods to use when ordering `_JobStatus`."""
enum _JobStatusesOrderBy {
  NATURAL
  OBJECT_ID_ASC
  OBJECT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  JOB_NAME_ASC
  JOB_NAME_DESC
  SOURCE_ASC
  SOURCE_DESC
  STATUS_ASC
  STATUS_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  PARAMS_ASC
  PARAMS_DESC
  FINISHED_AT_ASC
  FINISHED_AT_DESC
  _RPERM_ASC
  _RPERM_DESC
  _WPERM_ASC
  _WPERM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `_JobStatus` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input _JobStatusCondition {
  """Checks for equality with the object’s `objectId` field."""
  objectId: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
  """Checks for equality with the object’s `jobName` field."""
  jobName: String
  """Checks for equality with the object’s `source` field."""
  source: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `message` field."""
  message: String
  """Checks for equality with the object’s `params` field."""
  params: JSON
  """Checks for equality with the object’s `finishedAt` field."""
  finishedAt: Datetime
  """Checks for equality with the object’s `_rperm` field."""
  _rperm: [String]
  """Checks for equality with the object’s `_wperm` field."""
  _wperm: [String]
}

"""A connection to a list of `_JoinRolesRole` values."""
type _JoinRolesRolesConnection {
  """A list of `_JoinRolesRole` objects."""
  nodes: [_JoinRolesRole]!
  """A list of edges which contains the `_JoinRolesRole` and cursor to aid in pagination."""
  edges: [_JoinRolesRolesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_JoinRolesRole` you could get from the connection."""
  totalCount: Int!
}

type _JoinRolesRole implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  relatedId: String!
  owningId: String!
}

"""A `_JoinRolesRole` edge in the connection."""
type _JoinRolesRolesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_JoinRolesRole` at the end of the edge."""
  node: _JoinRolesRole
}

"""Methods to use when ordering `_JoinRolesRole`."""
enum _JoinRolesRolesOrderBy {
  NATURAL
  RELATED_ID_ASC
  RELATED_ID_DESC
  OWNING_ID_ASC
  OWNING_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `_JoinRolesRole` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _JoinRolesRoleCondition {
  """Checks for equality with the object’s `relatedId` field."""
  relatedId: String
  """Checks for equality with the object’s `owningId` field."""
  owningId: String
}

"""A connection to a list of `_JoinUsersRole` values."""
type _JoinUsersRolesConnection {
  """A list of `_JoinUsersRole` objects."""
  nodes: [_JoinUsersRole]!
  """A list of edges which contains the `_JoinUsersRole` and cursor to aid in pagination."""
  edges: [_JoinUsersRolesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_JoinUsersRole` you could get from the connection."""
  totalCount: Int!
}

type _JoinUsersRole implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  relatedId: String!
  owningId: String!
}

"""A `_JoinUsersRole` edge in the connection."""
type _JoinUsersRolesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_JoinUsersRole` at the end of the edge."""
  node: _JoinUsersRole
}

"""Methods to use when ordering `_JoinUsersRole`."""
enum _JoinUsersRolesOrderBy {
  NATURAL
  RELATED_ID_ASC
  RELATED_ID_DESC
  OWNING_ID_ASC
  OWNING_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `_JoinUsersRole` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _JoinUsersRoleCondition {
  """Checks for equality with the object’s `relatedId` field."""
  relatedId: String
  """Checks for equality with the object’s `owningId` field."""
  owningId: String
}

"""A connection to a list of `_PushStatus` values."""
type _PushStatusesConnection {
  """A list of `_PushStatus` objects."""
  nodes: [_PushStatus]!
  """A list of edges which contains the `_PushStatus` and cursor to aid in pagination."""
  edges: [_PushStatusesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_PushStatus` you could get from the connection."""
  totalCount: Int!
}

type _PushStatus implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  objectId: String!
  createdAt: Datetime
  updatedAt: Datetime
  pushTime: String
  source: String
  query: String
  payload: String
  title: String
  expiry: Float
  expirationInterval: Float
  status: String
  numSent: Float
  numFailed: Float
  pushHash: String
  errorMessage: JSON
  sentPerType: JSON
  failedPerType: JSON
  sentPerUtcOffset: JSON
  failedPerUtcOffset: JSON
  count: Float
  _rperm: [String]
  _wperm: [String]
}

"""A `_PushStatus` edge in the connection."""
type _PushStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_PushStatus` at the end of the edge."""
  node: _PushStatus
}

"""Methods to use when ordering `_PushStatus`."""
enum _PushStatusesOrderBy {
  NATURAL
  OBJECT_ID_ASC
  OBJECT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PUSH_TIME_ASC
  PUSH_TIME_DESC
  SOURCE_ASC
  SOURCE_DESC
  QUERY_ASC
  QUERY_DESC
  PAYLOAD_ASC
  PAYLOAD_DESC
  TITLE_ASC
  TITLE_DESC
  EXPIRY_ASC
  EXPIRY_DESC
  EXPIRATION_INTERVAL_ASC
  EXPIRATION_INTERVAL_DESC
  STATUS_ASC
  STATUS_DESC
  NUM_SENT_ASC
  NUM_SENT_DESC
  NUM_FAILED_ASC
  NUM_FAILED_DESC
  PUSH_HASH_ASC
  PUSH_HASH_DESC
  ERROR_MESSAGE_ASC
  ERROR_MESSAGE_DESC
  SENT_PER_TYPE_ASC
  SENT_PER_TYPE_DESC
  FAILED_PER_TYPE_ASC
  FAILED_PER_TYPE_DESC
  SENT_PER_UTCOFFSET_ASC
  SENT_PER_UTCOFFSET_DESC
  FAILED_PER_UTCOFFSET_ASC
  FAILED_PER_UTCOFFSET_DESC
  COUNT_ASC
  COUNT_DESC
  _RPERM_ASC
  _RPERM_DESC
  _WPERM_ASC
  _WPERM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `_PushStatus` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input _PushStatusCondition {
  """Checks for equality with the object’s `objectId` field."""
  objectId: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
  """Checks for equality with the object’s `pushTime` field."""
  pushTime: String
  """Checks for equality with the object’s `source` field."""
  source: String
  """Checks for equality with the object’s `query` field."""
  query: String
  """Checks for equality with the object’s `payload` field."""
  payload: String
  """Checks for equality with the object’s `title` field."""
  title: String
  """Checks for equality with the object’s `expiry` field."""
  expiry: Float
  """Checks for equality with the object’s `expirationInterval` field."""
  expirationInterval: Float
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `numSent` field."""
  numSent: Float
  """Checks for equality with the object’s `numFailed` field."""
  numFailed: Float
  """Checks for equality with the object’s `pushHash` field."""
  pushHash: String
  """Checks for equality with the object’s `errorMessage` field."""
  errorMessage: JSON
  """Checks for equality with the object’s `sentPerType` field."""
  sentPerType: JSON
  """Checks for equality with the object’s `failedPerType` field."""
  failedPerType: JSON
  """Checks for equality with the object’s `sentPerUtcOffset` field."""
  sentPerUtcOffset: JSON
  """Checks for equality with the object’s `failedPerUtcOffset` field."""
  failedPerUtcOffset: JSON
  """Checks for equality with the object’s `count` field."""
  count: Float
  """Checks for equality with the object’s `_rperm` field."""
  _rperm: [String]
  """Checks for equality with the object’s `_wperm` field."""
  _wperm: [String]
}

"""A connection to a list of `Role` values."""
type RolesConnection {
  """A list of `Role` objects."""
  nodes: [Role]!
  """A list of edges which contains the `Role` and cursor to aid in pagination."""
  edges: [RolesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Role` you could get from the connection."""
  totalCount: Int!
}

type Role implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  roleName: String!
  content: String
  createdAt: Datetime
}

"""A `Role` edge in the connection."""
type RolesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Role` at the end of the edge."""
  node: Role
}

"""Methods to use when ordering `Role`."""
enum RolesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ROLE_NAME_ASC
  ROLE_NAME_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Role` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input RoleCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `roleName` field."""
  roleName: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A connection to a list of `_Schema` values."""
type _SchemasConnection {
  """A list of `_Schema` objects."""
  nodes: [_Schema]!
  """A list of edges which contains the `_Schema` and cursor to aid in pagination."""
  edges: [_SchemasEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_Schema` you could get from the connection."""
  totalCount: Int!
}

type _Schema implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  className: String!
  schema: JSON
  isParseClass: Boolean
}

"""A `_Schema` edge in the connection."""
type _SchemasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_Schema` at the end of the edge."""
  node: _Schema
}

"""Methods to use when ordering `_Schema`."""
enum _SchemasOrderBy {
  NATURAL
  CLASS_NAME_ASC
  CLASS_NAME_DESC
  SCHEMA_ASC
  SCHEMA_DESC
  IS_PARSE_CLASS_ASC
  IS_PARSE_CLASS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `_Schema` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input _SchemaCondition {
  """Checks for equality with the object’s `className` field."""
  className: String
  """Checks for equality with the object’s `schema` field."""
  schema: JSON
  """Checks for equality with the object’s `isParseClass` field."""
  isParseClass: Boolean
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User` and cursor to aid in pagination."""
  edges: [UsersEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

type User implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  username: String!
  firstName: String!
  lastName: String
  email: String!
  password: String!
  interfaceLocale: String
  value: String
  permissions: String
  createdAt: Datetime
  """Reads and enables pagination through a set of `Email`."""
  emailsByStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): EmailsConnection!
  """Reads and enables pagination through a set of `Email`."""
  emailsByStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): [Email!]!
  """Reads and enables pagination through a set of `Project`."""
  projectsByStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
  """Reads and enables pagination through a set of `Message`."""
  messagesByStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): MessagesConnection!
  """Reads and enables pagination through a set of `Message`."""
  messagesByStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): [Message!]!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByEmailStaffIdAndCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): UserCustomersByEmailStaffIdAndCustIdManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByEmailStaffIdAndCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByProjectStaffIdAndCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): UserCustomersByProjectStaffIdAndCustIdManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByProjectStaffIdAndCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByProjectStaffIdAndTaskId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): UserTasksByProjectStaffIdAndTaskIdManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByProjectStaffIdAndTaskIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `Ticketing`."""
  ticketingsByProjectStaffIdAndTicketId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Ticketing`."""
    orderBy: [TicketingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TicketingCondition
  ): UserTicketingsByProjectStaffIdAndTicketIdManyToManyConnection!
  """Reads and enables pagination through a set of `Ticketing`."""
  ticketingsByProjectStaffIdAndTicketIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Ticketing`."""
    orderBy: [TicketingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TicketingCondition
  ): [Ticketing!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMessageStaffIdAndCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): UserCustomersByMessageStaffIdAndCustIdManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMessageStaffIdAndCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerMembersAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): UserBrandsByMediamanagerMembersAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerMembersAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerMembersAndAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): UserCustomersByMediamanagerMembersAndAuthorManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerMembersAndAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerMembersAndAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): UserAgreementsByMediamanagerMembersAndAgreementsManyToManyConnection!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerMembersAndAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): [Agreement!]!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerMembersAndComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): UserCommentsByMediamanagerMembersAndCommentManyToManyConnection!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerMembersAndCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerMembersAndTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): UserTasksByMediamanagerMembersAndTaskNameManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerMembersAndTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerMembersAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): UserProductsByMediamanagerMembersAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerMembersAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceUsersAndCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): UserCustomersByWorkspaceUsersAndCustomersManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceUsersAndCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceUsersAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): UserProductsByWorkspaceUsersAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceUsersAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceUsersAndTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): UserTasksByWorkspaceUsersAndTasksManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceUsersAndTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceUsersAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): UserBrandsByWorkspaceUsersAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceUsersAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceUsersAndShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): UserShopsByWorkspaceUsersAndShopsManyToManyConnection!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceUsersAndShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): [Shop!]!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceUsersAndCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): UserCategoriesByWorkspaceUsersAndCategoryManyToManyConnection!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceUsersAndCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): [Category!]!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceUsersAndProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): UserProjectsByWorkspaceUsersAndProjectsManyToManyConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceUsersAndProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `Email` values."""
type EmailsConnection {
  """A list of `Email` objects."""
  nodes: [Email]!
  """A list of edges which contains the `Email` and cursor to aid in pagination."""
  edges: [EmailsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Email` you could get from the connection."""
  totalCount: Int!
}

type Email implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  createdAt: Datetime
  subject: String
  content: String
  custId: Int!
  bcc: String
  cc: String
  from: String
  media: String
  staffId: Int
  """Reads a single `Customer` that is related to this `Email`."""
  customerByCustId: Customer
  """Reads a single `User` that is related to this `Email`."""
  userByStaffId: User
}

type Customer implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  thumbnail: String
  namePrefix: String
  firstName: String!
  middleName: String
  lastName: String!
  email: String!
  customerGroup: String
  phone: String
  zipcode: String
  nameSuffix: String
  websites: String
  product: String
  country: String
  state: String
  customerSince: Datetime
  confirmedEmail: String
  dateOfBirth: String
  taxVatNumber: String
  gender: String
  description: String
  shortDescription: String
  image: String
  address: String
  addressTwo: String
  paymentType: String
  username: String
  password: String
  """Reads and enables pagination through a set of `Comment`."""
  commentsByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): CommentsConnection!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]!
  """Reads and enables pagination through a set of `CreditMemo`."""
  creditMemosByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): CreditMemosConnection!
  """Reads and enables pagination through a set of `CreditMemo`."""
  creditMemosByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): [CreditMemo!]!
  """Reads and enables pagination through a set of `NewsletterSubscriber`."""
  newsletterSubscribersByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `NewsletterSubscriber`."""
    orderBy: [NewsletterSubscribersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: NewsletterSubscriberCondition
  ): NewsletterSubscribersConnection!
  """Reads and enables pagination through a set of `NewsletterSubscriber`."""
  newsletterSubscribersByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `NewsletterSubscriber`."""
    orderBy: [NewsletterSubscribersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: NewsletterSubscriberCondition
  ): [NewsletterSubscriber!]!
  """Reads and enables pagination through a set of `Order`."""
  ordersByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): OrdersConnection!
  """Reads and enables pagination through a set of `Order`."""
  ordersByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): [Order!]!
  """Reads and enables pagination through a set of `Quote`."""
  quotesByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): QuotesConnection!
  """Reads and enables pagination through a set of `Quote`."""
  quotesByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): [Quote!]!
  """Reads and enables pagination through a set of `CustomerGroup`."""
  customerGroupsByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CustomerGroup`."""
    orderBy: [CustomerGroupsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerGroupCondition
  ): CustomerGroupsConnection!
  """Reads and enables pagination through a set of `CustomerGroup`."""
  customerGroupsByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CustomerGroup`."""
    orderBy: [CustomerGroupsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerGroupCondition
  ): [CustomerGroup!]!
  """Reads and enables pagination through a set of `Email`."""
  emailsByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): EmailsConnection!
  """Reads and enables pagination through a set of `Email`."""
  emailsByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): [Email!]!
  """Reads and enables pagination through a set of `Return`."""
  returnsByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): ReturnsConnection!
  """Reads and enables pagination through a set of `Return`."""
  returnsByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): [Return!]!
  """Reads and enables pagination through a set of `CustomerPayment`."""
  customerPaymentsByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CustomerPayment`."""
    orderBy: [CustomerPaymentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerPaymentCondition
  ): CustomerPaymentsConnection!
  """Reads and enables pagination through a set of `CustomerPayment`."""
  customerPaymentsByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CustomerPayment`."""
    orderBy: [CustomerPaymentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerPaymentCondition
  ): [CustomerPayment!]!
  """Reads and enables pagination through a set of `Project`."""
  projectsByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
  """Reads and enables pagination through a set of `Message`."""
  messagesByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): MessagesConnection!
  """Reads and enables pagination through a set of `Message`."""
  messagesByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): [Message!]!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByCreditMemoCustIdAndProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): CustomerProductsByCreditMemoCustIdAndProdIdManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByCreditMemoCustIdAndProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByOrderCustIdAndProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): CustomerProductsByOrderCustIdAndProdIdManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByOrderCustIdAndProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByQuoteCustIdAndProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): CustomerProductsByQuoteCustIdAndProdIdManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByQuoteCustIdAndProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Order`."""
  ordersByQuoteCustIdAndOrderId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): CustomerOrdersByQuoteCustIdAndOrderIdManyToManyConnection!
  """Reads and enables pagination through a set of `Order`."""
  ordersByQuoteCustIdAndOrderIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): [Order!]!
  """Reads and enables pagination through a set of `User`."""
  usersByEmailCustIdAndStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): CustomerUsersByEmailCustIdAndStaffIdManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByEmailCustIdAndStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByReturnCustIdAndProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): CustomerProductsByReturnCustIdAndProdIdManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByReturnCustIdAndProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `User`."""
  usersByProjectCustIdAndStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): CustomerUsersByProjectCustIdAndStaffIdManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByProjectCustIdAndStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByProjectCustIdAndTaskId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): CustomerTasksByProjectCustIdAndTaskIdManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByProjectCustIdAndTaskIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `Ticketing`."""
  ticketingsByProjectCustIdAndTicketId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Ticketing`."""
    orderBy: [TicketingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TicketingCondition
  ): CustomerTicketingsByProjectCustIdAndTicketIdManyToManyConnection!
  """Reads and enables pagination through a set of `Ticketing`."""
  ticketingsByProjectCustIdAndTicketIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Ticketing`."""
    orderBy: [TicketingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TicketingCondition
  ): [Ticketing!]!
  """Reads and enables pagination through a set of `User`."""
  usersByMessageCustIdAndStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): CustomerUsersByMessageCustIdAndStaffIdManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByMessageCustIdAndStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerAuthorAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): CustomerBrandsByMediamanagerAuthorAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerAuthorAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerAuthorAndAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): CustomerAgreementsByMediamanagerAuthorAndAgreementsManyToManyConnection!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerAuthorAndAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): [Agreement!]!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerAuthorAndComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): CustomerCommentsByMediamanagerAuthorAndCommentManyToManyConnection!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerAuthorAndCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerAuthorAndTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): CustomerTasksByMediamanagerAuthorAndTaskNameManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerAuthorAndTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerAuthorAndMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): CustomerUsersByMediamanagerAuthorAndMembersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerAuthorAndMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerAuthorAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): CustomerProductsByMediamanagerAuthorAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerAuthorAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceCustomersAndUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): CustomerUsersByWorkspaceCustomersAndUsersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceCustomersAndUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceCustomersAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): CustomerProductsByWorkspaceCustomersAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceCustomersAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceCustomersAndTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): CustomerTasksByWorkspaceCustomersAndTasksManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceCustomersAndTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceCustomersAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): CustomerBrandsByWorkspaceCustomersAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceCustomersAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceCustomersAndShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): CustomerShopsByWorkspaceCustomersAndShopsManyToManyConnection!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceCustomersAndShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): [Shop!]!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceCustomersAndCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): CustomerCategoriesByWorkspaceCustomersAndCategoryManyToManyConnection!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceCustomersAndCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): [Category!]!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceCustomersAndProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): CustomerProjectsByWorkspaceCustomersAndProjectsManyToManyConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceCustomersAndProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `Comment` values."""
type CommentsConnection {
  """A list of `Comment` objects."""
  nodes: [Comment]!
  """A list of edges which contains the `Comment` and cursor to aid in pagination."""
  edges: [CommentsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

type Comment implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  customerName: String!
  description: String
  image: String
  response: String
  published: Datetime
  custId: Int!
  """Reads a single `Customer` that is related to this `Comment`."""
  customerByCustId: Customer
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerCommentAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): CommentBrandsByMediamanagerCommentAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerCommentAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerCommentAndAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): CommentCustomersByMediamanagerCommentAndAuthorManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerCommentAndAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerCommentAndAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): CommentAgreementsByMediamanagerCommentAndAgreementsManyToManyConnection!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerCommentAndAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): [Agreement!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerCommentAndTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): CommentTasksByMediamanagerCommentAndTaskNameManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerCommentAndTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerCommentAndMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): CommentUsersByMediamanagerCommentAndMembersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerCommentAndMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerCommentAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): CommentProductsByMediamanagerCommentAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerCommentAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Country`."""
  countriesByTrainingCommentAndCountry(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): CommentCountriesByTrainingCommentAndCountryManyToManyConnection!
  """Reads and enables pagination through a set of `Country`."""
  countriesByTrainingCommentAndCountryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): [Country!]!
  """Reads and enables pagination through a set of `State`."""
  statesByTrainingCommentAndState(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): CommentStatesByTrainingCommentAndStateManyToManyConnection!
  """Reads and enables pagination through a set of `State`."""
  statesByTrainingCommentAndStateList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): [State!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByTrainingCommentAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): CommentProductsByTrainingCommentAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByTrainingCommentAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Checklist`."""
  checklistsByTrainingCommentAndChecklists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): CommentChecklistsByTrainingCommentAndChecklistsManyToManyConnection!
  """Reads and enables pagination through a set of `Checklist`."""
  checklistsByTrainingCommentAndChecklistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): [Checklist!]!
}

"""A connection to a list of `Mediamanager` values."""
type MediamanagersConnection {
  """A list of `Mediamanager` objects."""
  nodes: [Mediamanager]!
  """A list of edges which contains the `Mediamanager` and cursor to aid in pagination."""
  edges: [MediamanagersEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Mediamanager` you could get from the connection."""
  totalCount: Int!
}

type Mediamanager implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  createdAt: Datetime
  name: String
  description: String
  media: String
  keywords: String
  tags: String
  brands: BigInt
  status: String
  expirationDate: String
  copyright: String
  dimensions: String
  author: Int
  contentType: String
  versions: String
  watermarkName: String
  watermarkDescription: String
  watermarkMedia: String
  agreements: Int
  albums: String
  comment: Int
  workspace: String
  taskName: BigInt
  taskDescription: String
  taskType: String
  members: Int
  products: BigInt
  """Reads a single `Brand` that is related to this `Mediamanager`."""
  brandByBrands: Brand
  """Reads a single `Customer` that is related to this `Mediamanager`."""
  customerByAuthor: Customer
  """Reads a single `Agreement` that is related to this `Mediamanager`."""
  agreementByAgreements: Agreement
  """Reads a single `Comment` that is related to this `Mediamanager`."""
  commentByComment: Comment
  """Reads a single `Task` that is related to this `Mediamanager`."""
  taskByTaskName: Task
  """Reads a single `User` that is related to this `Mediamanager`."""
  userByMembers: User
  """Reads a single `Product` that is related to this `Mediamanager`."""
  productByProducts: Product
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type Brand implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  code: String
  name: String
  country: String
  state: String
  isPublic: String
  city: String
  product: BigInt
  description: String
  media: String
  """Reads a single `Product` that is related to this `Brand`."""
  productByProduct: Product
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerBrandsAndAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): BrandCustomersByMediamanagerBrandsAndAuthorManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerBrandsAndAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerBrandsAndAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): BrandAgreementsByMediamanagerBrandsAndAgreementsManyToManyConnection!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerBrandsAndAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): [Agreement!]!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerBrandsAndComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): BrandCommentsByMediamanagerBrandsAndCommentManyToManyConnection!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerBrandsAndCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerBrandsAndTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): BrandTasksByMediamanagerBrandsAndTaskNameManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerBrandsAndTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerBrandsAndMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): BrandUsersByMediamanagerBrandsAndMembersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerBrandsAndMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerBrandsAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): BrandProductsByMediamanagerBrandsAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerBrandsAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceBrandsAndCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): BrandCustomersByWorkspaceBrandsAndCustomersManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceBrandsAndCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceBrandsAndUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): BrandUsersByWorkspaceBrandsAndUsersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceBrandsAndUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceBrandsAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): BrandProductsByWorkspaceBrandsAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceBrandsAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceBrandsAndTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): BrandTasksByWorkspaceBrandsAndTasksManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceBrandsAndTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceBrandsAndShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): BrandShopsByWorkspaceBrandsAndShopsManyToManyConnection!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceBrandsAndShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): [Shop!]!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceBrandsAndCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): BrandCategoriesByWorkspaceBrandsAndCategoryManyToManyConnection!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceBrandsAndCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): [Category!]!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceBrandsAndProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): BrandProjectsByWorkspaceBrandsAndProjectsManyToManyConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceBrandsAndProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

type Product implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  sku: BigInt!
  thumbnail: String
  name: String!
  types: String
  attributes: String
  price: String
  quantityPerSource: String
  salableQuantity: String
  visibility: String
  status: Boolean
  websites: String
  product: String
  taxClass: String
  stockStatus: String
  weight: String
  categories: String
  createdAt: Datetime
  country: String
  size: String
  format: String
  height: String
  content: String
  shortDescription: String
  image: String
  metaTitle: String
  metaKeywords: String
  metaDescription: String
  metaUrl: String
  file: String
  manufacture: String
  partNumber: String
  contract: String
  costString: String
  manufacturerPartNumber: String
  relatedProduct: BigInt
  tags: String
  brand: String
  occassions: String
  customerType: String
  family: String
  zone: String
  variants: String
  """Reads a single `Product` that is related to this `Product`."""
  productByRelatedProduct: Product
  """Reads and enables pagination through a set of `Coupon`."""
  couponsByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Coupon`."""
    orderBy: [CouponsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CouponCondition
  ): CouponsConnection!
  """Reads and enables pagination through a set of `Coupon`."""
  couponsByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Coupon`."""
    orderBy: [CouponsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CouponCondition
  ): [Coupon!]!
  """Reads and enables pagination through a set of `CreditMemo`."""
  creditMemosByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): CreditMemosConnection!
  """Reads and enables pagination through a set of `CreditMemo`."""
  creditMemosByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): [CreditMemo!]!
  """Reads and enables pagination through a set of `Order`."""
  ordersByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): OrdersConnection!
  """Reads and enables pagination through a set of `Order`."""
  ordersByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): [Order!]!
  """Reads and enables pagination through a set of `ProductAttribute`."""
  productAttributesByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ProductAttribute`."""
    orderBy: [ProductAttributesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeCondition
  ): ProductAttributesConnection!
  """Reads and enables pagination through a set of `ProductAttribute`."""
  productAttributesByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ProductAttribute`."""
    orderBy: [ProductAttributesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeCondition
  ): [ProductAttribute!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByRelatedProduct(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): ProductsConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByRelatedProductList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Quote`."""
  quotesByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): QuotesConnection!
  """Reads and enables pagination through a set of `Quote`."""
  quotesByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): [Quote!]!
  """Reads and enables pagination through a set of `Rating`."""
  ratingsByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Rating`."""
    orderBy: [RatingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RatingCondition
  ): RatingsConnection!
  """Reads and enables pagination through a set of `Rating`."""
  ratingsByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Rating`."""
    orderBy: [RatingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RatingCondition
  ): [Rating!]!
  """Reads and enables pagination through a set of `TaxRate`."""
  taxRatesByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `TaxRate`."""
    orderBy: [TaxRatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRateCondition
  ): TaxRatesConnection!
  """Reads and enables pagination through a set of `TaxRate`."""
  taxRatesByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `TaxRate`."""
    orderBy: [TaxRatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRateCondition
  ): [TaxRate!]!
  """Reads and enables pagination through a set of `TaxRule`."""
  taxRulesByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `TaxRule`."""
    orderBy: [TaxRulesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRuleCondition
  ): TaxRulesConnection!
  """Reads and enables pagination through a set of `TaxRule`."""
  taxRulesByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `TaxRule`."""
    orderBy: [TaxRulesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRuleCondition
  ): [TaxRule!]!
  """Reads and enables pagination through a set of `Return`."""
  returnsByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): ReturnsConnection!
  """Reads and enables pagination through a set of `Return`."""
  returnsByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): [Return!]!
  """Reads and enables pagination through a set of `ProductType`."""
  productTypesByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ProductType`."""
    orderBy: [ProductTypesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductTypeCondition
  ): ProductTypesConnection!
  """Reads and enables pagination through a set of `ProductType`."""
  productTypesByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ProductType`."""
    orderBy: [ProductTypesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductTypeCondition
  ): [ProductType!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByProduct(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): BrandsConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByProductList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Occassion`."""
  occassionsByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): OccassionsConnection!
  """Reads and enables pagination through a set of `Occassion`."""
  occassionsByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): [Occassion!]!
  """Reads and enables pagination through a set of `Manufacturer`."""
  manufacturersByProduct(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Manufacturer`."""
    orderBy: [ManufacturersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ManufacturerCondition
  ): ManufacturersConnection!
  """Reads and enables pagination through a set of `Manufacturer`."""
  manufacturersByProductList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Manufacturer`."""
    orderBy: [ManufacturersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ManufacturerCondition
  ): [Manufacturer!]!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByCreditMemoProdIdAndCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): ProductCustomersByCreditMemoProdIdAndCustIdManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByCreditMemoProdIdAndCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByOrderProdIdAndCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): ProductCustomersByOrderProdIdAndCustIdManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByOrderProdIdAndCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByQuoteProdIdAndCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): ProductCustomersByQuoteProdIdAndCustIdManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByQuoteProdIdAndCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Order`."""
  ordersByQuoteProdIdAndOrderId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): ProductOrdersByQuoteProdIdAndOrderIdManyToManyConnection!
  """Reads and enables pagination through a set of `Order`."""
  ordersByQuoteProdIdAndOrderIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): [Order!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByReturnProdIdAndCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): ProductCustomersByReturnProdIdAndCustIdManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByReturnProdIdAndCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Wishlist`."""
  wishlistsByOccassionProductsAndWishlists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Wishlist`."""
    orderBy: [WishlistsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WishlistCondition
  ): ProductWishlistsByOccassionProductsAndWishlistsManyToManyConnection!
  """Reads and enables pagination through a set of `Wishlist`."""
  wishlistsByOccassionProductsAndWishlistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Wishlist`."""
    orderBy: [WishlistsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WishlistCondition
  ): [Wishlist!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerProductsAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): ProductBrandsByMediamanagerProductsAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerProductsAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerProductsAndAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): ProductCustomersByMediamanagerProductsAndAuthorManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerProductsAndAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerProductsAndAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): ProductAgreementsByMediamanagerProductsAndAgreementsManyToManyConnection!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerProductsAndAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): [Agreement!]!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerProductsAndComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): ProductCommentsByMediamanagerProductsAndCommentManyToManyConnection!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerProductsAndCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerProductsAndTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): ProductTasksByMediamanagerProductsAndTaskNameManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerProductsAndTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerProductsAndMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): ProductUsersByMediamanagerProductsAndMembersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerProductsAndMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceProductsAndCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): ProductCustomersByWorkspaceProductsAndCustomersManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceProductsAndCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceProductsAndUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): ProductUsersByWorkspaceProductsAndUsersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceProductsAndUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceProductsAndTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): ProductTasksByWorkspaceProductsAndTasksManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceProductsAndTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceProductsAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): ProductBrandsByWorkspaceProductsAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceProductsAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceProductsAndShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): ProductShopsByWorkspaceProductsAndShopsManyToManyConnection!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceProductsAndShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): [Shop!]!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceProductsAndCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): ProductCategoriesByWorkspaceProductsAndCategoryManyToManyConnection!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceProductsAndCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): [Category!]!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceProductsAndProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProductProjectsByWorkspaceProductsAndProjectsManyToManyConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceProductsAndProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByTrainingProductsAndComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): ProductCommentsByTrainingProductsAndCommentManyToManyConnection!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByTrainingProductsAndCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]!
  """Reads and enables pagination through a set of `Country`."""
  countriesByTrainingProductsAndCountry(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): ProductCountriesByTrainingProductsAndCountryManyToManyConnection!
  """Reads and enables pagination through a set of `Country`."""
  countriesByTrainingProductsAndCountryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): [Country!]!
  """Reads and enables pagination through a set of `State`."""
  statesByTrainingProductsAndState(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): ProductStatesByTrainingProductsAndStateManyToManyConnection!
  """Reads and enables pagination through a set of `State`."""
  statesByTrainingProductsAndStateList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): [State!]!
  """Reads and enables pagination through a set of `Checklist`."""
  checklistsByTrainingProductsAndChecklists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): ProductChecklistsByTrainingProductsAndChecklistsManyToManyConnection!
  """Reads and enables pagination through a set of `Checklist`."""
  checklistsByTrainingProductsAndChecklistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): [Checklist!]!
}

"""A connection to a list of `Coupon` values."""
type CouponsConnection {
  """A list of `Coupon` objects."""
  nodes: [Coupon]!
  """A list of edges which contains the `Coupon` and cursor to aid in pagination."""
  edges: [CouponsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Coupon` you could get from the connection."""
  totalCount: Int!
}

type Coupon implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  name: String!
  excerpt: String
  discount: String
  image: String
  published: Datetime
  expiration: String
  categories: String
  articles: String
  products: String
  customers: String
  users: String
  prodId: BigInt!
  """Reads a single `Product` that is related to this `Coupon`."""
  productByProdId: Product
}

"""A `Coupon` edge in the connection."""
type CouponsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Coupon` at the end of the edge."""
  node: Coupon
}

"""Methods to use when ordering `Coupon`."""
enum CouponsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EXCERPT_ASC
  EXCERPT_DESC
  DISCOUNT_ASC
  DISCOUNT_DESC
  IMAGE_ASC
  IMAGE_DESC
  PUBLISHED_ASC
  PUBLISHED_DESC
  EXPIRATION_ASC
  EXPIRATION_DESC
  CATEGORIES_ASC
  CATEGORIES_DESC
  ARTICLES_ASC
  ARTICLES_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  USERS_ASC
  USERS_DESC
  PROD_ID_ASC
  PROD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Coupon` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input CouponCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `excerpt` field."""
  excerpt: String
  """Checks for equality with the object’s `discount` field."""
  discount: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `published` field."""
  published: Datetime
  """Checks for equality with the object’s `expiration` field."""
  expiration: String
  """Checks for equality with the object’s `categories` field."""
  categories: String
  """Checks for equality with the object’s `articles` field."""
  articles: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `users` field."""
  users: String
  """Checks for equality with the object’s `prodId` field."""
  prodId: BigInt
}

"""A connection to a list of `CreditMemo` values."""
type CreditMemosConnection {
  """A list of `CreditMemo` objects."""
  nodes: [CreditMemo]!
  """A list of edges which contains the `CreditMemo` and cursor to aid in pagination."""
  edges: [CreditMemosEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `CreditMemo` you could get from the connection."""
  totalCount: Int!
}

type CreditMemo implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  creditMemo: String!
  orderNumber: Int!
  created: Datetime
  billToName: String!
  status: String
  refunded: String
  action: String
  id: BigInt!
  custId: Int!
  prodId: BigInt!
  """Reads a single `Customer` that is related to this `CreditMemo`."""
  customerByCustId: Customer
  """Reads a single `Product` that is related to this `CreditMemo`."""
  productByProdId: Product
}

"""A `CreditMemo` edge in the connection."""
type CreditMemosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `CreditMemo` at the end of the edge."""
  node: CreditMemo
}

"""Methods to use when ordering `CreditMemo`."""
enum CreditMemosOrderBy {
  NATURAL
  CREDIT_MEMO_ASC
  CREDIT_MEMO_DESC
  ORDER_NUMBER_ASC
  ORDER_NUMBER_DESC
  CREATED_ASC
  CREATED_DESC
  BILL_TO_NAME_ASC
  BILL_TO_NAME_DESC
  STATUS_ASC
  STATUS_DESC
  REFUNDED_ASC
  REFUNDED_DESC
  ACTION_ASC
  ACTION_DESC
  ID_ASC
  ID_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  PROD_ID_ASC
  PROD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CreditMemo` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CreditMemoCondition {
  """Checks for equality with the object’s `creditMemo` field."""
  creditMemo: String
  """Checks for equality with the object’s `orderNumber` field."""
  orderNumber: Int
  """Checks for equality with the object’s `created` field."""
  created: Datetime
  """Checks for equality with the object’s `billToName` field."""
  billToName: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `refunded` field."""
  refunded: String
  """Checks for equality with the object’s `action` field."""
  action: String
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `custId` field."""
  custId: Int
  """Checks for equality with the object’s `prodId` field."""
  prodId: BigInt
}

"""A connection to a list of `Order` values."""
type OrdersConnection {
  """A list of `Order` objects."""
  nodes: [Order]!
  """A list of edges which contains the `Order` and cursor to aid in pagination."""
  edges: [OrdersEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Order` you could get from the connection."""
  totalCount: Int!
}

type Order implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  purchasePoint: Int
  purchaseDate: Datetime
  billToName: String!
  shipToName: String
  grandTotalBase: Int
  grandTotalPurchased: Int
  status: Boolean
  action: Boolean
  allocatedSources: String
  braintreeTransactionSource: String
  custId: Int!
  prodId: BigInt!
  """Reads a single `Customer` that is related to this `Order`."""
  customerByCustId: Customer
  """Reads a single `Product` that is related to this `Order`."""
  productByProdId: Product
  """Reads and enables pagination through a set of `Quote`."""
  quotesByOrderId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): QuotesConnection!
  """Reads and enables pagination through a set of `Quote`."""
  quotesByOrderIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): [Quote!]!
  """Reads and enables pagination through a set of `Transaction`."""
  transactionsByOrderId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): TransactionsConnection!
  """Reads and enables pagination through a set of `Transaction`."""
  transactionsByOrderIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): [Transaction!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByQuoteOrderIdAndCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): OrderCustomersByQuoteOrderIdAndCustIdManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByQuoteOrderIdAndCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByQuoteOrderIdAndProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): OrderProductsByQuoteOrderIdAndProdIdManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByQuoteOrderIdAndProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `CustomerPayment`."""
  customerPaymentsByTransactionOrderIdAndPaymentMethod(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CustomerPayment`."""
    orderBy: [CustomerPaymentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerPaymentCondition
  ): OrderCustomerPaymentsByTransactionOrderIdAndPaymentMethodManyToManyConnection!
  """Reads and enables pagination through a set of `CustomerPayment`."""
  customerPaymentsByTransactionOrderIdAndPaymentMethodList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CustomerPayment`."""
    orderBy: [CustomerPaymentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerPaymentCondition
  ): [CustomerPayment!]!
}

"""A connection to a list of `Quote` values."""
type QuotesConnection {
  """A list of `Quote` objects."""
  nodes: [Quote]!
  """A list of edges which contains the `Quote` and cursor to aid in pagination."""
  edges: [QuotesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Quote` you could get from the connection."""
  totalCount: Int!
}

type Quote implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  grandTotal: String
  createdAt: Datetime
  categories: String
  validUntil: String
  quoteStage: String
  customers: String
  custId: Int!
  prodId: BigInt!
  orderId: Int!
  account: String
  approvalIssues: String
  approvalStatus: String
  assignedTo: String
  billingCity: String
  billingCountry: String
  billingPostal: String
  billingState: String
  billingStreet: String
  contact: String
  currency: String
  discount: String
  invoiceStatus: String
  lineItemDiscount: String
  lineItemGroupTotal: String
  lineItemName: String
  lineItemSubtotal: String
  lineItemTax: String
  lineItemTotal: String
  paymentTerms: String
  shipping: String
  shippingCity: String
  shippingCountry: String
  shippingPostal: String
  shippingState: String
  shippingStreet: String
  shippingTax: String
  subtotal: String
  tax: String
  total: String
  """Reads a single `Customer` that is related to this `Quote`."""
  customerByCustId: Customer
  """Reads a single `Product` that is related to this `Quote`."""
  productByProdId: Product
  """Reads a single `Order` that is related to this `Quote`."""
  orderByOrderId: Order
}

"""A `Quote` edge in the connection."""
type QuotesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Quote` at the end of the edge."""
  node: Quote
}

"""Methods to use when ordering `Quote`."""
enum QuotesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  GRAND_TOTAL_ASC
  GRAND_TOTAL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CATEGORIES_ASC
  CATEGORIES_DESC
  VALID_UNTIL_ASC
  VALID_UNTIL_DESC
  QUOTE_STAGE_ASC
  QUOTE_STAGE_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  PROD_ID_ASC
  PROD_ID_DESC
  ORDER_ID_ASC
  ORDER_ID_DESC
  ACCOUNT_ASC
  ACCOUNT_DESC
  APPROVAL_ISSUES_ASC
  APPROVAL_ISSUES_DESC
  APPROVAL_STATUS_ASC
  APPROVAL_STATUS_DESC
  ASSIGNED_TO_ASC
  ASSIGNED_TO_DESC
  BILLING_CITY_ASC
  BILLING_CITY_DESC
  BILLING_COUNTRY_ASC
  BILLING_COUNTRY_DESC
  BILLING_POSTAL_ASC
  BILLING_POSTAL_DESC
  BILLING_STATE_ASC
  BILLING_STATE_DESC
  BILLING_STREET_ASC
  BILLING_STREET_DESC
  CONTACT_ASC
  CONTACT_DESC
  CURRENCY_ASC
  CURRENCY_DESC
  DISCOUNT_ASC
  DISCOUNT_DESC
  INVOICE_STATUS_ASC
  INVOICE_STATUS_DESC
  LINE_ITEM_DISCOUNT_ASC
  LINE_ITEM_DISCOUNT_DESC
  LINE_ITEM_GROUP_TOTAL_ASC
  LINE_ITEM_GROUP_TOTAL_DESC
  LINE_ITEM_NAME_ASC
  LINE_ITEM_NAME_DESC
  LINE_ITEM_SUBTOTAL_ASC
  LINE_ITEM_SUBTOTAL_DESC
  LINE_ITEM_TAX_ASC
  LINE_ITEM_TAX_DESC
  LINE_ITEM_TOTAL_ASC
  LINE_ITEM_TOTAL_DESC
  PAYMENT_TERMS_ASC
  PAYMENT_TERMS_DESC
  SHIPPING_ASC
  SHIPPING_DESC
  SHIPPING_CITY_ASC
  SHIPPING_CITY_DESC
  SHIPPING_COUNTRY_ASC
  SHIPPING_COUNTRY_DESC
  SHIPPING_POSTAL_ASC
  SHIPPING_POSTAL_DESC
  SHIPPING_STATE_ASC
  SHIPPING_STATE_DESC
  SHIPPING_STREET_ASC
  SHIPPING_STREET_DESC
  SHIPPING_TAX_ASC
  SHIPPING_TAX_DESC
  SUBTOTAL_ASC
  SUBTOTAL_DESC
  TAX_ASC
  TAX_DESC
  TOTAL_ASC
  TOTAL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Quote` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input QuoteCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `grandTotal` field."""
  grandTotal: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `categories` field."""
  categories: String
  """Checks for equality with the object’s `validUntil` field."""
  validUntil: String
  """Checks for equality with the object’s `quoteStage` field."""
  quoteStage: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `custId` field."""
  custId: Int
  """Checks for equality with the object’s `prodId` field."""
  prodId: BigInt
  """Checks for equality with the object’s `orderId` field."""
  orderId: Int
  """Checks for equality with the object’s `account` field."""
  account: String
  """Checks for equality with the object’s `approvalIssues` field."""
  approvalIssues: String
  """Checks for equality with the object’s `approvalStatus` field."""
  approvalStatus: String
  """Checks for equality with the object’s `assignedTo` field."""
  assignedTo: String
  """Checks for equality with the object’s `billingCity` field."""
  billingCity: String
  """Checks for equality with the object’s `billingCountry` field."""
  billingCountry: String
  """Checks for equality with the object’s `billingPostal` field."""
  billingPostal: String
  """Checks for equality with the object’s `billingState` field."""
  billingState: String
  """Checks for equality with the object’s `billingStreet` field."""
  billingStreet: String
  """Checks for equality with the object’s `contact` field."""
  contact: String
  """Checks for equality with the object’s `currency` field."""
  currency: String
  """Checks for equality with the object’s `discount` field."""
  discount: String
  """Checks for equality with the object’s `invoiceStatus` field."""
  invoiceStatus: String
  """Checks for equality with the object’s `lineItemDiscount` field."""
  lineItemDiscount: String
  """Checks for equality with the object’s `lineItemGroupTotal` field."""
  lineItemGroupTotal: String
  """Checks for equality with the object’s `lineItemName` field."""
  lineItemName: String
  """Checks for equality with the object’s `lineItemSubtotal` field."""
  lineItemSubtotal: String
  """Checks for equality with the object’s `lineItemTax` field."""
  lineItemTax: String
  """Checks for equality with the object’s `lineItemTotal` field."""
  lineItemTotal: String
  """Checks for equality with the object’s `paymentTerms` field."""
  paymentTerms: String
  """Checks for equality with the object’s `shipping` field."""
  shipping: String
  """Checks for equality with the object’s `shippingCity` field."""
  shippingCity: String
  """Checks for equality with the object’s `shippingCountry` field."""
  shippingCountry: String
  """Checks for equality with the object’s `shippingPostal` field."""
  shippingPostal: String
  """Checks for equality with the object’s `shippingState` field."""
  shippingState: String
  """Checks for equality with the object’s `shippingStreet` field."""
  shippingStreet: String
  """Checks for equality with the object’s `shippingTax` field."""
  shippingTax: String
  """Checks for equality with the object’s `subtotal` field."""
  subtotal: String
  """Checks for equality with the object’s `tax` field."""
  tax: String
  """Checks for equality with the object’s `total` field."""
  total: String
}

"""A connection to a list of `Transaction` values."""
type TransactionsConnection {
  """A list of `Transaction` objects."""
  nodes: [Transaction]!
  """A list of edges which contains the `Transaction` and cursor to aid in pagination."""
  edges: [TransactionsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Transaction` you could get from the connection."""
  totalCount: Int!
}

type Transaction implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  orderId: Int!
  transactionId: Int!
  parentTransactionId: Int!
  created: Datetime
  paymentMethod: BigInt!
  closed: String
  """Reads a single `Order` that is related to this `Transaction`."""
  orderByOrderId: Order
  """Reads a single `CustomerPayment` that is related to this `Transaction`."""
  customerPaymentByPaymentMethod: CustomerPayment
}

type CustomerPayment implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  custId: Int!
  paymentInfo: String
  provider: String
  accountNo: BigInt!
  expiry: BigInt
  """Reads a single `Customer` that is related to this `CustomerPayment`."""
  customerByCustId: Customer
  """Reads and enables pagination through a set of `Transaction`."""
  transactionsByPaymentMethod(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): TransactionsConnection!
  """Reads and enables pagination through a set of `Transaction`."""
  transactionsByPaymentMethodList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): [Transaction!]!
  """Reads and enables pagination through a set of `Order`."""
  ordersByTransactionPaymentMethodAndOrderId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): CustomerPaymentOrdersByTransactionPaymentMethodAndOrderIdManyToManyConnection!
  """Reads and enables pagination through a set of `Order`."""
  ordersByTransactionPaymentMethodAndOrderIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): [Order!]!
}

"""Methods to use when ordering `Transaction`."""
enum TransactionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORDER_ID_ASC
  ORDER_ID_DESC
  TRANSACTION_ID_ASC
  TRANSACTION_ID_DESC
  PARENT_TRANSACTION_ID_ASC
  PARENT_TRANSACTION_ID_DESC
  CREATED_ASC
  CREATED_DESC
  PAYMENT_METHOD_ASC
  PAYMENT_METHOD_DESC
  CLOSED_ASC
  CLOSED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Transaction` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TransactionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `orderId` field."""
  orderId: Int
  """Checks for equality with the object’s `transactionId` field."""
  transactionId: Int
  """Checks for equality with the object’s `parentTransactionId` field."""
  parentTransactionId: Int
  """Checks for equality with the object’s `created` field."""
  created: Datetime
  """Checks for equality with the object’s `paymentMethod` field."""
  paymentMethod: BigInt
  """Checks for equality with the object’s `closed` field."""
  closed: String
}

"""A connection to a list of `Order` values, with data from `Transaction`."""
type CustomerPaymentOrdersByTransactionPaymentMethodAndOrderIdManyToManyConnection {
  """A list of `Order` objects."""
  nodes: [Order]!
  """A list of edges which contains the `Order`, info from the `Transaction`, and the cursor to aid in pagination."""
  edges: [CustomerPaymentOrdersByTransactionPaymentMethodAndOrderIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Order` you could get from the connection."""
  totalCount: Int!
}

"""A `Order` edge in the connection, with data from `Transaction`."""
type CustomerPaymentOrdersByTransactionPaymentMethodAndOrderIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Order` at the end of the edge."""
  node: Order
  """Reads and enables pagination through a set of `Transaction`."""
  transactionsByOrderId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): TransactionsConnection!
  """Reads and enables pagination through a set of `Transaction`."""
  transactionsByOrderIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): [Transaction!]!
}

"""Methods to use when ordering `Order`."""
enum OrdersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PURCHASE_POINT_ASC
  PURCHASE_POINT_DESC
  PURCHASE_DATE_ASC
  PURCHASE_DATE_DESC
  BILL_TO_NAME_ASC
  BILL_TO_NAME_DESC
  SHIP_TO_NAME_ASC
  SHIP_TO_NAME_DESC
  GRAND_TOTAL_BASE_ASC
  GRAND_TOTAL_BASE_DESC
  GRAND_TOTAL_PURCHASED_ASC
  GRAND_TOTAL_PURCHASED_DESC
  STATUS_ASC
  STATUS_DESC
  ACTION_ASC
  ACTION_DESC
  ALLOCATED_SOURCES_ASC
  ALLOCATED_SOURCES_DESC
  BRAINTREE_TRANSACTION_SOURCE_ASC
  BRAINTREE_TRANSACTION_SOURCE_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  PROD_ID_ASC
  PROD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Order` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input OrderCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `purchasePoint` field."""
  purchasePoint: Int
  """Checks for equality with the object’s `purchaseDate` field."""
  purchaseDate: Datetime
  """Checks for equality with the object’s `billToName` field."""
  billToName: String
  """Checks for equality with the object’s `shipToName` field."""
  shipToName: String
  """Checks for equality with the object’s `grandTotalBase` field."""
  grandTotalBase: Int
  """Checks for equality with the object’s `grandTotalPurchased` field."""
  grandTotalPurchased: Int
  """Checks for equality with the object’s `status` field."""
  status: Boolean
  """Checks for equality with the object’s `action` field."""
  action: Boolean
  """Checks for equality with the object’s `allocatedSources` field."""
  allocatedSources: String
  """Checks for equality with the object’s `braintreeTransactionSource` field."""
  braintreeTransactionSource: String
  """Checks for equality with the object’s `custId` field."""
  custId: Int
  """Checks for equality with the object’s `prodId` field."""
  prodId: BigInt
}

"""A `Transaction` edge in the connection."""
type TransactionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Transaction` at the end of the edge."""
  node: Transaction
}

"""A connection to a list of `Customer` values, with data from `Quote`."""
type OrderCustomersByQuoteOrderIdAndCustIdManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Quote`, and the cursor to aid in pagination."""
  edges: [OrderCustomersByQuoteOrderIdAndCustIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Quote`."""
type OrderCustomersByQuoteOrderIdAndCustIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Quote`."""
  quotesByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): QuotesConnection!
  """Reads and enables pagination through a set of `Quote`."""
  quotesByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): [Quote!]!
}

"""Methods to use when ordering `Customer`."""
enum CustomersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  THUMBNAIL_ASC
  THUMBNAIL_DESC
  NAME_PREFIX_ASC
  NAME_PREFIX_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  MIDDLE_NAME_ASC
  MIDDLE_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  CUSTOMER_GROUP_ASC
  CUSTOMER_GROUP_DESC
  PHONE_ASC
  PHONE_DESC
  ZIPCODE_ASC
  ZIPCODE_DESC
  NAME_SUFFIX_ASC
  NAME_SUFFIX_DESC
  WEBSITES_ASC
  WEBSITES_DESC
  PRODUCT_ASC
  PRODUCT_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  STATE_ASC
  STATE_DESC
  CUSTOMER_SINCE_ASC
  CUSTOMER_SINCE_DESC
  CONFIRMED_EMAIL_ASC
  CONFIRMED_EMAIL_DESC
  DATE_OF_BIRTH_ASC
  DATE_OF_BIRTH_DESC
  TAX_VAT_NUMBER_ASC
  TAX_VAT_NUMBER_DESC
  GENDER_ASC
  GENDER_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  SHORT_DESCRIPTION_ASC
  SHORT_DESCRIPTION_DESC
  IMAGE_ASC
  IMAGE_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  ADDRESS_TWO_ASC
  ADDRESS_TWO_DESC
  PAYMENT_TYPE_ASC
  PAYMENT_TYPE_DESC
  USERNAME_ASC
  USERNAME_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Customer` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CustomerCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `thumbnail` field."""
  thumbnail: String
  """Checks for equality with the object’s `namePrefix` field."""
  namePrefix: String
  """Checks for equality with the object’s `firstName` field."""
  firstName: String
  """Checks for equality with the object’s `middleName` field."""
  middleName: String
  """Checks for equality with the object’s `lastName` field."""
  lastName: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `customerGroup` field."""
  customerGroup: String
  """Checks for equality with the object’s `phone` field."""
  phone: String
  """Checks for equality with the object’s `zipcode` field."""
  zipcode: String
  """Checks for equality with the object’s `nameSuffix` field."""
  nameSuffix: String
  """Checks for equality with the object’s `websites` field."""
  websites: String
  """Checks for equality with the object’s `product` field."""
  product: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `customerSince` field."""
  customerSince: Datetime
  """Checks for equality with the object’s `confirmedEmail` field."""
  confirmedEmail: String
  """Checks for equality with the object’s `dateOfBirth` field."""
  dateOfBirth: String
  """Checks for equality with the object’s `taxVatNumber` field."""
  taxVatNumber: String
  """Checks for equality with the object’s `gender` field."""
  gender: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `shortDescription` field."""
  shortDescription: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `address` field."""
  address: String
  """Checks for equality with the object’s `addressTwo` field."""
  addressTwo: String
  """Checks for equality with the object’s `paymentType` field."""
  paymentType: String
  """Checks for equality with the object’s `username` field."""
  username: String
  """Checks for equality with the object’s `password` field."""
  password: String
}

"""A connection to a list of `Product` values, with data from `Quote`."""
type OrderProductsByQuoteOrderIdAndProdIdManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Quote`, and the cursor to aid in pagination."""
  edges: [OrderProductsByQuoteOrderIdAndProdIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Quote`."""
type OrderProductsByQuoteOrderIdAndProdIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Quote`."""
  quotesByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): QuotesConnection!
  """Reads and enables pagination through a set of `Quote`."""
  quotesByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): [Quote!]!
}

"""Methods to use when ordering `Product`."""
enum ProductsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SKU_ASC
  SKU_DESC
  THUMBNAIL_ASC
  THUMBNAIL_DESC
  NAME_ASC
  NAME_DESC
  TYPES_ASC
  TYPES_DESC
  ATTRIBUTES_ASC
  ATTRIBUTES_DESC
  PRICE_ASC
  PRICE_DESC
  QUANTITY_PER_SOURCE_ASC
  QUANTITY_PER_SOURCE_DESC
  SALABLE_QUANTITY_ASC
  SALABLE_QUANTITY_DESC
  VISIBILITY_ASC
  VISIBILITY_DESC
  STATUS_ASC
  STATUS_DESC
  WEBSITES_ASC
  WEBSITES_DESC
  PRODUCT_ASC
  PRODUCT_DESC
  TAX_CLASS_ASC
  TAX_CLASS_DESC
  STOCK_STATUS_ASC
  STOCK_STATUS_DESC
  WEIGHT_ASC
  WEIGHT_DESC
  CATEGORIES_ASC
  CATEGORIES_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  SIZE_ASC
  SIZE_DESC
  FORMAT_ASC
  FORMAT_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  CONTENT_ASC
  CONTENT_DESC
  SHORT_DESCRIPTION_ASC
  SHORT_DESCRIPTION_DESC
  IMAGE_ASC
  IMAGE_DESC
  META_TITLE_ASC
  META_TITLE_DESC
  META_KEYWORDS_ASC
  META_KEYWORDS_DESC
  META_DESCRIPTION_ASC
  META_DESCRIPTION_DESC
  META_URL_ASC
  META_URL_DESC
  FILE_ASC
  FILE_DESC
  MANUFACTURE_ASC
  MANUFACTURE_DESC
  PART_NUMBER_ASC
  PART_NUMBER_DESC
  CONTRACT_ASC
  CONTRACT_DESC
  COST_STRING_ASC
  COST_STRING_DESC
  MANUFACTURER_PART_NUMBER_ASC
  MANUFACTURER_PART_NUMBER_DESC
  RELATED_PRODUCT_ASC
  RELATED_PRODUCT_DESC
  TAGS_ASC
  TAGS_DESC
  BRAND_ASC
  BRAND_DESC
  OCCASSIONS_ASC
  OCCASSIONS_DESC
  CUSTOMER_TYPE_ASC
  CUSTOMER_TYPE_DESC
  FAMILY_ASC
  FAMILY_DESC
  ZONE_ASC
  ZONE_DESC
  VARIANTS_ASC
  VARIANTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input ProductCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `sku` field."""
  sku: BigInt
  """Checks for equality with the object’s `thumbnail` field."""
  thumbnail: String
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `types` field."""
  types: String
  """Checks for equality with the object’s `attributes` field."""
  attributes: String
  """Checks for equality with the object’s `price` field."""
  price: String
  """Checks for equality with the object’s `quantityPerSource` field."""
  quantityPerSource: String
  """Checks for equality with the object’s `salableQuantity` field."""
  salableQuantity: String
  """Checks for equality with the object’s `visibility` field."""
  visibility: String
  """Checks for equality with the object’s `status` field."""
  status: Boolean
  """Checks for equality with the object’s `websites` field."""
  websites: String
  """Checks for equality with the object’s `product` field."""
  product: String
  """Checks for equality with the object’s `taxClass` field."""
  taxClass: String
  """Checks for equality with the object’s `stockStatus` field."""
  stockStatus: String
  """Checks for equality with the object’s `weight` field."""
  weight: String
  """Checks for equality with the object’s `categories` field."""
  categories: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `size` field."""
  size: String
  """Checks for equality with the object’s `format` field."""
  format: String
  """Checks for equality with the object’s `height` field."""
  height: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `shortDescription` field."""
  shortDescription: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `metaTitle` field."""
  metaTitle: String
  """Checks for equality with the object’s `metaKeywords` field."""
  metaKeywords: String
  """Checks for equality with the object’s `metaDescription` field."""
  metaDescription: String
  """Checks for equality with the object’s `metaUrl` field."""
  metaUrl: String
  """Checks for equality with the object’s `file` field."""
  file: String
  """Checks for equality with the object’s `manufacture` field."""
  manufacture: String
  """Checks for equality with the object’s `partNumber` field."""
  partNumber: String
  """Checks for equality with the object’s `contract` field."""
  contract: String
  """Checks for equality with the object’s `costString` field."""
  costString: String
  """Checks for equality with the object’s `manufacturerPartNumber` field."""
  manufacturerPartNumber: String
  """Checks for equality with the object’s `relatedProduct` field."""
  relatedProduct: BigInt
  """Checks for equality with the object’s `tags` field."""
  tags: String
  """Checks for equality with the object’s `brand` field."""
  brand: String
  """Checks for equality with the object’s `occassions` field."""
  occassions: String
  """Checks for equality with the object’s `customerType` field."""
  customerType: String
  """Checks for equality with the object’s `family` field."""
  family: String
  """Checks for equality with the object’s `zone` field."""
  zone: String
  """Checks for equality with the object’s `variants` field."""
  variants: String
}

"""A connection to a list of `CustomerPayment` values, with data from `Transaction`."""
type OrderCustomerPaymentsByTransactionOrderIdAndPaymentMethodManyToManyConnection {
  """A list of `CustomerPayment` objects."""
  nodes: [CustomerPayment]!
  """A list of edges which contains the `CustomerPayment`, info from the `Transaction`, and the cursor to aid in pagination."""
  edges: [OrderCustomerPaymentsByTransactionOrderIdAndPaymentMethodManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `CustomerPayment` you could get from the connection."""
  totalCount: Int!
}

"""A `CustomerPayment` edge in the connection, with data from `Transaction`."""
type OrderCustomerPaymentsByTransactionOrderIdAndPaymentMethodManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `CustomerPayment` at the end of the edge."""
  node: CustomerPayment
  """Reads and enables pagination through a set of `Transaction`."""
  transactionsByPaymentMethod(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): TransactionsConnection!
  """Reads and enables pagination through a set of `Transaction`."""
  transactionsByPaymentMethodList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): [Transaction!]!
}

"""Methods to use when ordering `CustomerPayment`."""
enum CustomerPaymentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  PAYMENT_INFO_ASC
  PAYMENT_INFO_DESC
  PROVIDER_ASC
  PROVIDER_DESC
  ACCOUNT_NO_ASC
  ACCOUNT_NO_DESC
  EXPIRY_ASC
  EXPIRY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CustomerPayment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CustomerPaymentCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `custId` field."""
  custId: Int
  """Checks for equality with the object’s `paymentInfo` field."""
  paymentInfo: String
  """Checks for equality with the object’s `provider` field."""
  provider: String
  """Checks for equality with the object’s `accountNo` field."""
  accountNo: BigInt
  """Checks for equality with the object’s `expiry` field."""
  expiry: BigInt
}

"""A `Order` edge in the connection."""
type OrdersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Order` at the end of the edge."""
  node: Order
}

"""A connection to a list of `ProductAttribute` values."""
type ProductAttributesConnection {
  """A list of `ProductAttribute` objects."""
  nodes: [ProductAttribute]!
  """A list of edges which contains the `ProductAttribute` and cursor to aid in pagination."""
  edges: [ProductAttributesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `ProductAttribute` you could get from the connection."""
  totalCount: Int!
}

type ProductAttribute implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  defaultLabel: String
  attributeCode: String
  filterOptions: String
  useSearch: String
  layeredNavigation: Boolean
  searchResultsLayeredNavigation: Boolean
  position: String
  promoRuleConditions: Boolean
  allowHtmlTagsStorefront: Boolean
  visibleCatalogPagesStorefront: Boolean
  usedProductListing: Boolean
  usedSortingProductListing: Boolean
  prodId: BigInt!
  attributeClass: String
  attributeValue: String
  columnOptions: String
  facetedNavigation: Boolean
  isPublic: String
  metaDescription: String
  metaName: Boolean
  metaUrl: String
  """Reads a single `Product` that is related to this `ProductAttribute`."""
  productByProdId: Product
  """Reads and enables pagination through a set of `ProductAttributeSet`."""
  productAttributeSetsByAttributeId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ProductAttributeSet`."""
    orderBy: [ProductAttributeSetsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeSetCondition
  ): ProductAttributeSetsConnection!
  """Reads and enables pagination through a set of `ProductAttributeSet`."""
  productAttributeSetsByAttributeIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ProductAttributeSet`."""
    orderBy: [ProductAttributeSetsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeSetCondition
  ): [ProductAttributeSet!]!
}

"""A connection to a list of `ProductAttributeSet` values."""
type ProductAttributeSetsConnection {
  """A list of `ProductAttributeSet` objects."""
  nodes: [ProductAttributeSet]!
  """A list of edges which contains the `ProductAttributeSet` and cursor to aid in pagination."""
  edges: [ProductAttributeSetsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `ProductAttributeSet` you could get from the connection."""
  totalCount: Int!
}

type ProductAttributeSet implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  basedOn: String
  attributeId: Int!
  """Reads a single `ProductAttribute` that is related to this `ProductAttributeSet`."""
  productAttributeByAttributeId: ProductAttribute
}

"""A `ProductAttributeSet` edge in the connection."""
type ProductAttributeSetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `ProductAttributeSet` at the end of the edge."""
  node: ProductAttributeSet
}

"""Methods to use when ordering `ProductAttributeSet`."""
enum ProductAttributeSetsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  BASED_ON_ASC
  BASED_ON_DESC
  ATTRIBUTE_ID_ASC
  ATTRIBUTE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProductAttributeSet` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProductAttributeSetCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `basedOn` field."""
  basedOn: String
  """Checks for equality with the object’s `attributeId` field."""
  attributeId: Int
}

"""A `ProductAttribute` edge in the connection."""
type ProductAttributesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `ProductAttribute` at the end of the edge."""
  node: ProductAttribute
}

"""Methods to use when ordering `ProductAttribute`."""
enum ProductAttributesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DEFAULT_LABEL_ASC
  DEFAULT_LABEL_DESC
  ATTRIBUTE_CODE_ASC
  ATTRIBUTE_CODE_DESC
  FILTER_OPTIONS_ASC
  FILTER_OPTIONS_DESC
  USE_SEARCH_ASC
  USE_SEARCH_DESC
  LAYERED_NAVIGATION_ASC
  LAYERED_NAVIGATION_DESC
  SEARCH_RESULTS_LAYERED_NAVIGATION_ASC
  SEARCH_RESULTS_LAYERED_NAVIGATION_DESC
  POSITION_ASC
  POSITION_DESC
  PROMO_RULE_CONDITIONS_ASC
  PROMO_RULE_CONDITIONS_DESC
  ALLOW_HTML_TAGS_STOREFRONT_ASC
  ALLOW_HTML_TAGS_STOREFRONT_DESC
  VISIBLE_CATALOG_PAGES_STOREFRONT_ASC
  VISIBLE_CATALOG_PAGES_STOREFRONT_DESC
  USED_PRODUCT_LISTING_ASC
  USED_PRODUCT_LISTING_DESC
  USED_SORTING_PRODUCT_LISTING_ASC
  USED_SORTING_PRODUCT_LISTING_DESC
  PROD_ID_ASC
  PROD_ID_DESC
  ATTRIBUTE_CLASS_ASC
  ATTRIBUTE_CLASS_DESC
  ATTRIBUTE_VALUE_ASC
  ATTRIBUTE_VALUE_DESC
  COLUMN_OPTIONS_ASC
  COLUMN_OPTIONS_DESC
  FACETED_NAVIGATION_ASC
  FACETED_NAVIGATION_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  META_DESCRIPTION_ASC
  META_DESCRIPTION_DESC
  META_NAME_ASC
  META_NAME_DESC
  META_URL_ASC
  META_URL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProductAttribute` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProductAttributeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `defaultLabel` field."""
  defaultLabel: String
  """Checks for equality with the object’s `attributeCode` field."""
  attributeCode: String
  """Checks for equality with the object’s `filterOptions` field."""
  filterOptions: String
  """Checks for equality with the object’s `useSearch` field."""
  useSearch: String
  """Checks for equality with the object’s `layeredNavigation` field."""
  layeredNavigation: Boolean
  """Checks for equality with the object’s `searchResultsLayeredNavigation` field."""
  searchResultsLayeredNavigation: Boolean
  """Checks for equality with the object’s `position` field."""
  position: String
  """Checks for equality with the object’s `promoRuleConditions` field."""
  promoRuleConditions: Boolean
  """Checks for equality with the object’s `allowHtmlTagsStorefront` field."""
  allowHtmlTagsStorefront: Boolean
  """Checks for equality with the object’s `visibleCatalogPagesStorefront` field."""
  visibleCatalogPagesStorefront: Boolean
  """Checks for equality with the object’s `usedProductListing` field."""
  usedProductListing: Boolean
  """Checks for equality with the object’s `usedSortingProductListing` field."""
  usedSortingProductListing: Boolean
  """Checks for equality with the object’s `prodId` field."""
  prodId: BigInt
  """Checks for equality with the object’s `attributeClass` field."""
  attributeClass: String
  """Checks for equality with the object’s `attributeValue` field."""
  attributeValue: String
  """Checks for equality with the object’s `columnOptions` field."""
  columnOptions: String
  """Checks for equality with the object’s `facetedNavigation` field."""
  facetedNavigation: Boolean
  """Checks for equality with the object’s `isPublic` field."""
  isPublic: String
  """Checks for equality with the object’s `metaDescription` field."""
  metaDescription: String
  """Checks for equality with the object’s `metaName` field."""
  metaName: Boolean
  """Checks for equality with the object’s `metaUrl` field."""
  metaUrl: String
}

"""A connection to a list of `Product` values."""
type ProductsConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product` and cursor to aid in pagination."""
  edges: [ProductsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection."""
type ProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
}

"""A connection to a list of `Rating` values."""
type RatingsConnection {
  """A list of `Rating` objects."""
  nodes: [Rating]!
  """A list of edges which contains the `Rating` and cursor to aid in pagination."""
  edges: [RatingsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Rating` you could get from the connection."""
  totalCount: Int!
}

type Rating implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  defaultValue: String
  defaultStoreView: String
  ratingVisibility: String
  active: Boolean
  sortOrder: BigFloat
  prodId: BigInt!
  """Reads a single `Product` that is related to this `Rating`."""
  productByProdId: Product
}

"""A floating point number that requires more precision than IEEE 754 binary 64"""
scalar BigFloat

"""A `Rating` edge in the connection."""
type RatingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Rating` at the end of the edge."""
  node: Rating
}

"""Methods to use when ordering `Rating`."""
enum RatingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DEFAULT_VALUE_ASC
  DEFAULT_VALUE_DESC
  DEFAULT_STORE_VIEW_ASC
  DEFAULT_STORE_VIEW_DESC
  RATING_VISIBILITY_ASC
  RATING_VISIBILITY_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  SORT_ORDER_ASC
  SORT_ORDER_DESC
  PROD_ID_ASC
  PROD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Rating` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input RatingCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `defaultValue` field."""
  defaultValue: String
  """Checks for equality with the object’s `defaultStoreView` field."""
  defaultStoreView: String
  """Checks for equality with the object’s `ratingVisibility` field."""
  ratingVisibility: String
  """Checks for equality with the object’s `active` field."""
  active: Boolean
  """Checks for equality with the object’s `sortOrder` field."""
  sortOrder: BigFloat
  """Checks for equality with the object’s `prodId` field."""
  prodId: BigInt
}

"""A connection to a list of `TaxRate` values."""
type TaxRatesConnection {
  """A list of `TaxRate` objects."""
  nodes: [TaxRate]!
  """A list of edges which contains the `TaxRate` and cursor to aid in pagination."""
  edges: [TaxRatesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `TaxRate` you could get from the connection."""
  totalCount: Int!
}

type TaxRate implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  taxIdentifier: String!
  zipPostIsRange: Boolean
  postcode: String
  state: String
  country: String
  ratePercent: String
  defaultStoreView: String
  prodId: BigInt!
  """Reads a single `Product` that is related to this `TaxRate`."""
  productByProdId: Product
}

"""A `TaxRate` edge in the connection."""
type TaxRatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `TaxRate` at the end of the edge."""
  node: TaxRate
}

"""Methods to use when ordering `TaxRate`."""
enum TaxRatesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TAX_IDENTIFIER_ASC
  TAX_IDENTIFIER_DESC
  ZIP_POST_IS_RANGE_ASC
  ZIP_POST_IS_RANGE_DESC
  POSTCODE_ASC
  POSTCODE_DESC
  STATE_ASC
  STATE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  RATE_PERCENT_ASC
  RATE_PERCENT_DESC
  DEFAULT_STORE_VIEW_ASC
  DEFAULT_STORE_VIEW_DESC
  PROD_ID_ASC
  PROD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `TaxRate` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input TaxRateCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `taxIdentifier` field."""
  taxIdentifier: String
  """Checks for equality with the object’s `zipPostIsRange` field."""
  zipPostIsRange: Boolean
  """Checks for equality with the object’s `postcode` field."""
  postcode: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `ratePercent` field."""
  ratePercent: String
  """Checks for equality with the object’s `defaultStoreView` field."""
  defaultStoreView: String
  """Checks for equality with the object’s `prodId` field."""
  prodId: BigInt
}

"""A connection to a list of `TaxRule` values."""
type TaxRulesConnection {
  """A list of `TaxRule` objects."""
  nodes: [TaxRule]!
  """A list of edges which contains the `TaxRule` and cursor to aid in pagination."""
  edges: [TaxRulesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `TaxRule` you could get from the connection."""
  totalCount: Int!
}

type TaxRule implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  taxRate: String
  prodId: BigInt!
  """Reads a single `Product` that is related to this `TaxRule`."""
  productByProdId: Product
}

"""A `TaxRule` edge in the connection."""
type TaxRulesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `TaxRule` at the end of the edge."""
  node: TaxRule
}

"""Methods to use when ordering `TaxRule`."""
enum TaxRulesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  TAX_RATE_ASC
  TAX_RATE_DESC
  PROD_ID_ASC
  PROD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `TaxRule` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input TaxRuleCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `taxRate` field."""
  taxRate: String
  """Checks for equality with the object’s `prodId` field."""
  prodId: BigInt
}

"""A connection to a list of `Return` values."""
type ReturnsConnection {
  """A list of `Return` objects."""
  nodes: [Return]!
  """A list of edges which contains the `Return` and cursor to aid in pagination."""
  edges: [ReturnsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Return` you could get from the connection."""
  totalCount: Int!
}

type Return implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  validity: String
  returnPrefix: String
  prodId: BigInt!
  custId: Int!
  """Reads a single `Product` that is related to this `Return`."""
  productByProdId: Product
  """Reads a single `Customer` that is related to this `Return`."""
  customerByCustId: Customer
}

"""A `Return` edge in the connection."""
type ReturnsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Return` at the end of the edge."""
  node: Return
}

"""Methods to use when ordering `Return`."""
enum ReturnsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  VALIDITY_ASC
  VALIDITY_DESC
  RETURN_PREFIX_ASC
  RETURN_PREFIX_DESC
  PROD_ID_ASC
  PROD_ID_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Return` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input ReturnCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `validity` field."""
  validity: String
  """Checks for equality with the object’s `returnPrefix` field."""
  returnPrefix: String
  """Checks for equality with the object’s `prodId` field."""
  prodId: BigInt
  """Checks for equality with the object’s `custId` field."""
  custId: Int
}

"""A connection to a list of `ProductType` values."""
type ProductTypesConnection {
  """A list of `ProductType` objects."""
  nodes: [ProductType]!
  """A list of edges which contains the `ProductType` and cursor to aid in pagination."""
  edges: [ProductTypesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `ProductType` you could get from the connection."""
  totalCount: Int!
}

type ProductType implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  typeName: String
  taxes: String
  isShippable: String
  metaUrl: String
  metaDescription: String
  filterOptions: String
  productType: String
  prodId: BigInt!
  """Reads a single `Product` that is related to this `ProductType`."""
  productByProdId: Product
}

"""A `ProductType` edge in the connection."""
type ProductTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `ProductType` at the end of the edge."""
  node: ProductType
}

"""Methods to use when ordering `ProductType`."""
enum ProductTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  TAXES_ASC
  TAXES_DESC
  IS_SHIPPABLE_ASC
  IS_SHIPPABLE_DESC
  META_URL_ASC
  META_URL_DESC
  META_DESCRIPTION_ASC
  META_DESCRIPTION_DESC
  FILTER_OPTIONS_ASC
  FILTER_OPTIONS_DESC
  PRODUCT_TYPE_ASC
  PRODUCT_TYPE_DESC
  PROD_ID_ASC
  PROD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProductType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProductTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `typeName` field."""
  typeName: String
  """Checks for equality with the object’s `taxes` field."""
  taxes: String
  """Checks for equality with the object’s `isShippable` field."""
  isShippable: String
  """Checks for equality with the object’s `metaUrl` field."""
  metaUrl: String
  """Checks for equality with the object’s `metaDescription` field."""
  metaDescription: String
  """Checks for equality with the object’s `filterOptions` field."""
  filterOptions: String
  """Checks for equality with the object’s `productType` field."""
  productType: String
  """Checks for equality with the object’s `prodId` field."""
  prodId: BigInt
}

"""A connection to a list of `Brand` values."""
type BrandsConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand` and cursor to aid in pagination."""
  edges: [BrandsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection."""
type BrandsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
}

"""Methods to use when ordering `Brand`."""
enum BrandsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CODE_ASC
  CODE_DESC
  NAME_ASC
  NAME_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  STATE_ASC
  STATE_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  CITY_ASC
  CITY_DESC
  PRODUCT_ASC
  PRODUCT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  MEDIA_ASC
  MEDIA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Brand` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input BrandCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `code` field."""
  code: String
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `isPublic` field."""
  isPublic: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `product` field."""
  product: BigInt
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `media` field."""
  media: String
}

"""A connection to a list of `Occassion` values."""
type OccassionsConnection {
  """A list of `Occassion` objects."""
  nodes: [Occassion]!
  """A list of edges which contains the `Occassion` and cursor to aid in pagination."""
  edges: [OccassionsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Occassion` you could get from the connection."""
  totalCount: Int!
}

type Occassion implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  code: String
  name: String
  category: String
  tags: String
  description: String
  products: BigInt
  wishlists: BigInt
  """Reads a single `Product` that is related to this `Occassion`."""
  productByProducts: Product
  """Reads a single `Wishlist` that is related to this `Occassion`."""
  wishlistByWishlists: Wishlist
}

type Wishlist implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  customers: String
  visibility: String
  products: String
  quantity: String
  """Reads and enables pagination through a set of `Occassion`."""
  occassionsByWishlists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): OccassionsConnection!
  """Reads and enables pagination through a set of `Occassion`."""
  occassionsByWishlistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): [Occassion!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByOccassionWishlistsAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): WishlistProductsByOccassionWishlistsAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByOccassionWishlistsAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
}

"""Methods to use when ordering `Occassion`."""
enum OccassionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CODE_ASC
  CODE_DESC
  NAME_ASC
  NAME_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  TAGS_ASC
  TAGS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  WISHLISTS_ASC
  WISHLISTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Occassion` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OccassionCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `code` field."""
  code: String
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `category` field."""
  category: String
  """Checks for equality with the object’s `tags` field."""
  tags: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `products` field."""
  products: BigInt
  """Checks for equality with the object’s `wishlists` field."""
  wishlists: BigInt
}

"""A connection to a list of `Product` values, with data from `Occassion`."""
type WishlistProductsByOccassionWishlistsAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Occassion`, and the cursor to aid in pagination."""
  edges: [WishlistProductsByOccassionWishlistsAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Occassion`."""
type WishlistProductsByOccassionWishlistsAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Occassion`."""
  occassionsByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): OccassionsConnection!
  """Reads and enables pagination through a set of `Occassion`."""
  occassionsByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): [Occassion!]!
}

"""A `Occassion` edge in the connection."""
type OccassionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Occassion` at the end of the edge."""
  node: Occassion
}

"""A connection to a list of `Manufacturer` values."""
type ManufacturersConnection {
  """A list of `Manufacturer` objects."""
  nodes: [Manufacturer]!
  """A list of edges which contains the `Manufacturer` and cursor to aid in pagination."""
  edges: [ManufacturersEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Manufacturer` you could get from the connection."""
  totalCount: Int!
}

type Manufacturer implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  code: String
  name: String
  country: String
  state: String
  isPublic: String
  city: String
  product: BigInt
  description: String
  media: String
  """Reads a single `Product` that is related to this `Manufacturer`."""
  productByProduct: Product
}

"""A `Manufacturer` edge in the connection."""
type ManufacturersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Manufacturer` at the end of the edge."""
  node: Manufacturer
}

"""Methods to use when ordering `Manufacturer`."""
enum ManufacturersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CODE_ASC
  CODE_DESC
  NAME_ASC
  NAME_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  STATE_ASC
  STATE_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  CITY_ASC
  CITY_DESC
  PRODUCT_ASC
  PRODUCT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  MEDIA_ASC
  MEDIA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Manufacturer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ManufacturerCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `code` field."""
  code: String
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `isPublic` field."""
  isPublic: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `product` field."""
  product: BigInt
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `media` field."""
  media: String
}

"""Methods to use when ordering `Mediamanager`."""
enum MediamanagersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  MEDIA_ASC
  MEDIA_DESC
  KEYWORDS_ASC
  KEYWORDS_DESC
  TAGS_ASC
  TAGS_DESC
  BRANDS_ASC
  BRANDS_DESC
  STATUS_ASC
  STATUS_DESC
  EXPIRATION_DATE_ASC
  EXPIRATION_DATE_DESC
  COPYRIGHT_ASC
  COPYRIGHT_DESC
  DIMENSIONS_ASC
  DIMENSIONS_DESC
  AUTHOR_ASC
  AUTHOR_DESC
  CONTENT_TYPE_ASC
  CONTENT_TYPE_DESC
  VERSIONS_ASC
  VERSIONS_DESC
  WATERMARK_NAME_ASC
  WATERMARK_NAME_DESC
  WATERMARK_DESCRIPTION_ASC
  WATERMARK_DESCRIPTION_DESC
  WATERMARK_MEDIA_ASC
  WATERMARK_MEDIA_DESC
  AGREEMENTS_ASC
  AGREEMENTS_DESC
  ALBUMS_ASC
  ALBUMS_DESC
  COMMENT_ASC
  COMMENT_DESC
  WORKSPACE_ASC
  WORKSPACE_DESC
  TASK_NAME_ASC
  TASK_NAME_DESC
  TASK_DESCRIPTION_ASC
  TASK_DESCRIPTION_DESC
  TASK_TYPE_ASC
  TASK_TYPE_DESC
  MEMBERS_ASC
  MEMBERS_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Mediamanager` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MediamanagerCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `media` field."""
  media: String
  """Checks for equality with the object’s `keywords` field."""
  keywords: String
  """Checks for equality with the object’s `tags` field."""
  tags: String
  """Checks for equality with the object’s `brands` field."""
  brands: BigInt
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `expirationDate` field."""
  expirationDate: String
  """Checks for equality with the object’s `copyright` field."""
  copyright: String
  """Checks for equality with the object’s `dimensions` field."""
  dimensions: String
  """Checks for equality with the object’s `author` field."""
  author: Int
  """Checks for equality with the object’s `contentType` field."""
  contentType: String
  """Checks for equality with the object’s `versions` field."""
  versions: String
  """Checks for equality with the object’s `watermarkName` field."""
  watermarkName: String
  """Checks for equality with the object’s `watermarkDescription` field."""
  watermarkDescription: String
  """Checks for equality with the object’s `watermarkMedia` field."""
  watermarkMedia: String
  """Checks for equality with the object’s `agreements` field."""
  agreements: Int
  """Checks for equality with the object’s `albums` field."""
  albums: String
  """Checks for equality with the object’s `comment` field."""
  comment: Int
  """Checks for equality with the object’s `workspace` field."""
  workspace: String
  """Checks for equality with the object’s `taskName` field."""
  taskName: BigInt
  """Checks for equality with the object’s `taskDescription` field."""
  taskDescription: String
  """Checks for equality with the object’s `taskType` field."""
  taskType: String
  """Checks for equality with the object’s `members` field."""
  members: Int
  """Checks for equality with the object’s `products` field."""
  products: BigInt
}

"""A connection to a list of `Workspace` values."""
type WorkspacesConnection {
  """A list of `Workspace` objects."""
  nodes: [Workspace]!
  """A list of edges which contains the `Workspace` and cursor to aid in pagination."""
  edges: [WorkspacesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Workspace` you could get from the connection."""
  totalCount: Int!
}

type Workspace implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  code: String
  name: String
  description: String
  customers: Int
  users: Int
  products: BigInt
  tasks: BigInt
  brands: BigInt
  shops: Int
  category: Int
  isPublic: Boolean
  projects: BigInt
  author: String
  media: String
  """Reads a single `Customer` that is related to this `Workspace`."""
  customerByCustomers: Customer
  """Reads a single `User` that is related to this `Workspace`."""
  userByUsers: User
  """Reads a single `Product` that is related to this `Workspace`."""
  productByProducts: Product
  """Reads a single `Task` that is related to this `Workspace`."""
  taskByTasks: Task
  """Reads a single `Brand` that is related to this `Workspace`."""
  brandByBrands: Brand
  """Reads a single `Shop` that is related to this `Workspace`."""
  shopByShops: Shop
  """Reads a single `Category` that is related to this `Workspace`."""
  categoryByCategory: Category
  """Reads a single `Project` that is related to this `Workspace`."""
  projectByProjects: Project
}

type Task implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  subject: String
  startDate: String
  dueDate: String
  priority: String
  description: String
  status: String
  relatedTo: String
  contact: String
  assignedTo: String
  dateModified: Datetime
  """Reads and enables pagination through a set of `Project`."""
  projectsByTaskId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByTaskIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByProjectTaskIdAndCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): TaskCustomersByProjectTaskIdAndCustIdManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByProjectTaskIdAndCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `User`."""
  usersByProjectTaskIdAndStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): TaskUsersByProjectTaskIdAndStaffIdManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByProjectTaskIdAndStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Ticketing`."""
  ticketingsByProjectTaskIdAndTicketId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Ticketing`."""
    orderBy: [TicketingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TicketingCondition
  ): TaskTicketingsByProjectTaskIdAndTicketIdManyToManyConnection!
  """Reads and enables pagination through a set of `Ticketing`."""
  ticketingsByProjectTaskIdAndTicketIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Ticketing`."""
    orderBy: [TicketingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TicketingCondition
  ): [Ticketing!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerTaskNameAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): TaskBrandsByMediamanagerTaskNameAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerTaskNameAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerTaskNameAndAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): TaskCustomersByMediamanagerTaskNameAndAuthorManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerTaskNameAndAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerTaskNameAndAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): TaskAgreementsByMediamanagerTaskNameAndAgreementsManyToManyConnection!
  """Reads and enables pagination through a set of `Agreement`."""
  agreementsByMediamanagerTaskNameAndAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): [Agreement!]!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerTaskNameAndComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): TaskCommentsByMediamanagerTaskNameAndCommentManyToManyConnection!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerTaskNameAndCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerTaskNameAndMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): TaskUsersByMediamanagerTaskNameAndMembersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerTaskNameAndMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerTaskNameAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): TaskProductsByMediamanagerTaskNameAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerTaskNameAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceTasksAndCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): TaskCustomersByWorkspaceTasksAndCustomersManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceTasksAndCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceTasksAndUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): TaskUsersByWorkspaceTasksAndUsersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceTasksAndUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceTasksAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): TaskProductsByWorkspaceTasksAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceTasksAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceTasksAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): TaskBrandsByWorkspaceTasksAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceTasksAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceTasksAndShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): TaskShopsByWorkspaceTasksAndShopsManyToManyConnection!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceTasksAndShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): [Shop!]!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceTasksAndCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): TaskCategoriesByWorkspaceTasksAndCategoryManyToManyConnection!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceTasksAndCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): [Category!]!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceTasksAndProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): TaskProjectsByWorkspaceTasksAndProjectsManyToManyConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceTasksAndProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """A list of `Project` objects."""
  nodes: [Project]!
  """A list of edges which contains the `Project` and cursor to aid in pagination."""
  edges: [ProjectsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

type Project implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  name: String
  projectManager: String
  startDate: String
  endDate: String
  resource: String
  considerworkingdays: String
  projectTemplate: String
  status: String
  createdAt: Datetime
  priority: String
  assignee: String
  doing: String
  done: String
  sectionRule: String
  goalName: String
  goalTimeperiod: String
  goalPrivacy: String
  goalCollaborators: String
  goalUpdatemethod: String
  goalProgressSource: String
  goalMeasurement: String
  custId: Int
  staffId: Int
  taskId: BigInt
  ticketId: BigInt
  """Reads a single `Customer` that is related to this `Project`."""
  customerByCustId: Customer
  """Reads a single `User` that is related to this `Project`."""
  userByStaffId: User
  """Reads a single `Task` that is related to this `Project`."""
  taskByTaskId: Task
  """Reads a single `Ticketing` that is related to this `Project`."""
  ticketingByTicketId: Ticketing
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceProjectsAndCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): ProjectCustomersByWorkspaceProjectsAndCustomersManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceProjectsAndCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceProjectsAndUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): ProjectUsersByWorkspaceProjectsAndUsersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceProjectsAndUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceProjectsAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): ProjectProductsByWorkspaceProjectsAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceProjectsAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceProjectsAndTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): ProjectTasksByWorkspaceProjectsAndTasksManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceProjectsAndTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceProjectsAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): ProjectBrandsByWorkspaceProjectsAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceProjectsAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceProjectsAndShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): ProjectShopsByWorkspaceProjectsAndShopsManyToManyConnection!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceProjectsAndShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): [Shop!]!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceProjectsAndCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): ProjectCategoriesByWorkspaceProjectsAndCategoryManyToManyConnection!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceProjectsAndCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): [Category!]!
}

type Ticketing implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  location: String
  date: String
  severity: String
  team: String
  requester: String
  requesterEmail: String
  content: String
  department: String
  media: String
  projects: String
  ticketType: String
  comment: String
  products: String
  priority: String
  status: String
  resolution: String
  assignedTo: String
  dateModified: Datetime
  accountName: String
  level: String
  """Reads and enables pagination through a set of `Project`."""
  projectsByTicketId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByTicketIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByProjectTicketIdAndCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): TicketingCustomersByProjectTicketIdAndCustIdManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByProjectTicketIdAndCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `User`."""
  usersByProjectTicketIdAndStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): TicketingUsersByProjectTicketIdAndStaffIdManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByProjectTicketIdAndStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByProjectTicketIdAndTaskId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): TicketingTasksByProjectTicketIdAndTaskIdManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByProjectTicketIdAndTaskIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PROJECT_MANAGER_ASC
  PROJECT_MANAGER_DESC
  START_DATE_ASC
  START_DATE_DESC
  END_DATE_ASC
  END_DATE_DESC
  RESOURCE_ASC
  RESOURCE_DESC
  CONSIDERWORKINGDAYS_ASC
  CONSIDERWORKINGDAYS_DESC
  PROJECT_TEMPLATE_ASC
  PROJECT_TEMPLATE_DESC
  STATUS_ASC
  STATUS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIORITY_ASC
  PRIORITY_DESC
  ASSIGNEE_ASC
  ASSIGNEE_DESC
  DOING_ASC
  DOING_DESC
  DONE_ASC
  DONE_DESC
  SECTION_RULE_ASC
  SECTION_RULE_DESC
  GOAL_NAME_ASC
  GOAL_NAME_DESC
  GOAL_TIMEPERIOD_ASC
  GOAL_TIMEPERIOD_DESC
  GOAL_PRIVACY_ASC
  GOAL_PRIVACY_DESC
  GOAL_COLLABORATORS_ASC
  GOAL_COLLABORATORS_DESC
  GOAL_UPDATEMETHOD_ASC
  GOAL_UPDATEMETHOD_DESC
  GOAL_PROGRESS_SOURCE_ASC
  GOAL_PROGRESS_SOURCE_DESC
  GOAL_MEASUREMENT_ASC
  GOAL_MEASUREMENT_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  STAFF_ID_ASC
  STAFF_ID_DESC
  TASK_ID_ASC
  TASK_ID_DESC
  TICKET_ID_ASC
  TICKET_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input ProjectCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `projectManager` field."""
  projectManager: String
  """Checks for equality with the object’s `startDate` field."""
  startDate: String
  """Checks for equality with the object’s `endDate` field."""
  endDate: String
  """Checks for equality with the object’s `resource` field."""
  resource: String
  """Checks for equality with the object’s `considerworkingdays` field."""
  considerworkingdays: String
  """Checks for equality with the object’s `projectTemplate` field."""
  projectTemplate: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `priority` field."""
  priority: String
  """Checks for equality with the object’s `assignee` field."""
  assignee: String
  """Checks for equality with the object’s `doing` field."""
  doing: String
  """Checks for equality with the object’s `done` field."""
  done: String
  """Checks for equality with the object’s `sectionRule` field."""
  sectionRule: String
  """Checks for equality with the object’s `goalName` field."""
  goalName: String
  """Checks for equality with the object’s `goalTimeperiod` field."""
  goalTimeperiod: String
  """Checks for equality with the object’s `goalPrivacy` field."""
  goalPrivacy: String
  """Checks for equality with the object’s `goalCollaborators` field."""
  goalCollaborators: String
  """Checks for equality with the object’s `goalUpdatemethod` field."""
  goalUpdatemethod: String
  """Checks for equality with the object’s `goalProgressSource` field."""
  goalProgressSource: String
  """Checks for equality with the object’s `goalMeasurement` field."""
  goalMeasurement: String
  """Checks for equality with the object’s `custId` field."""
  custId: Int
  """Checks for equality with the object’s `staffId` field."""
  staffId: Int
  """Checks for equality with the object’s `taskId` field."""
  taskId: BigInt
  """Checks for equality with the object’s `ticketId` field."""
  ticketId: BigInt
}

"""A connection to a list of `Customer` values, with data from `Project`."""
type TicketingCustomersByProjectTicketIdAndCustIdManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [TicketingCustomersByProjectTicketIdAndCustIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Project`."""
type TicketingCustomersByProjectTicketIdAndCustIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Project`."""
  projectsByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `User` values, with data from `Project`."""
type TicketingUsersByProjectTicketIdAndStaffIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [TicketingUsersByProjectTicketIdAndStaffIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Project`."""
type TicketingUsersByProjectTicketIdAndStaffIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Project`."""
  projectsByStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  INTERFACE_LOCALE_ASC
  INTERFACE_LOCALE_DESC
  VALUE_ASC
  VALUE_DESC
  PERMISSIONS_ASC
  PERMISSIONS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `username` field."""
  username: String
  """Checks for equality with the object’s `firstName` field."""
  firstName: String
  """Checks for equality with the object’s `lastName` field."""
  lastName: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `password` field."""
  password: String
  """Checks for equality with the object’s `interfaceLocale` field."""
  interfaceLocale: String
  """Checks for equality with the object’s `value` field."""
  value: String
  """Checks for equality with the object’s `permissions` field."""
  permissions: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A connection to a list of `Task` values, with data from `Project`."""
type TicketingTasksByProjectTicketIdAndTaskIdManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [TicketingTasksByProjectTicketIdAndTaskIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Project`."""
type TicketingTasksByProjectTicketIdAndTaskIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Project`."""
  projectsByTaskId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByTaskIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""Methods to use when ordering `Task`."""
enum TasksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  START_DATE_ASC
  START_DATE_DESC
  DUE_DATE_ASC
  DUE_DATE_DESC
  PRIORITY_ASC
  PRIORITY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  STATUS_ASC
  STATUS_DESC
  RELATED_TO_ASC
  RELATED_TO_DESC
  CONTACT_ASC
  CONTACT_DESC
  ASSIGNED_TO_ASC
  ASSIGNED_TO_DESC
  DATE_MODIFIED_ASC
  DATE_MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Task` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input TaskCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `subject` field."""
  subject: String
  """Checks for equality with the object’s `startDate` field."""
  startDate: String
  """Checks for equality with the object’s `dueDate` field."""
  dueDate: String
  """Checks for equality with the object’s `priority` field."""
  priority: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `relatedTo` field."""
  relatedTo: String
  """Checks for equality with the object’s `contact` field."""
  contact: String
  """Checks for equality with the object’s `assignedTo` field."""
  assignedTo: String
  """Checks for equality with the object’s `dateModified` field."""
  dateModified: Datetime
}

"""Methods to use when ordering `Workspace`."""
enum WorkspacesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CODE_ASC
  CODE_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  USERS_ASC
  USERS_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  TASKS_ASC
  TASKS_DESC
  BRANDS_ASC
  BRANDS_DESC
  SHOPS_ASC
  SHOPS_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  PROJECTS_ASC
  PROJECTS_DESC
  AUTHOR_ASC
  AUTHOR_DESC
  MEDIA_ASC
  MEDIA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Workspace` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WorkspaceCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `code` field."""
  code: String
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `customers` field."""
  customers: Int
  """Checks for equality with the object’s `users` field."""
  users: Int
  """Checks for equality with the object’s `products` field."""
  products: BigInt
  """Checks for equality with the object’s `tasks` field."""
  tasks: BigInt
  """Checks for equality with the object’s `brands` field."""
  brands: BigInt
  """Checks for equality with the object’s `shops` field."""
  shops: Int
  """Checks for equality with the object’s `category` field."""
  category: Int
  """Checks for equality with the object’s `isPublic` field."""
  isPublic: Boolean
  """Checks for equality with the object’s `projects` field."""
  projects: BigInt
  """Checks for equality with the object’s `author` field."""
  author: String
  """Checks for equality with the object’s `media` field."""
  media: String
}

"""A connection to a list of `Customer` values, with data from `Workspace`."""
type ProjectCustomersByWorkspaceProjectsAndCustomersManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProjectCustomersByWorkspaceProjectsAndCustomersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Workspace`."""
type ProjectCustomersByWorkspaceProjectsAndCustomersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `User` values, with data from `Workspace`."""
type ProjectUsersByWorkspaceProjectsAndUsersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProjectUsersByWorkspaceProjectsAndUsersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Workspace`."""
type ProjectUsersByWorkspaceProjectsAndUsersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Product` values, with data from `Workspace`."""
type ProjectProductsByWorkspaceProjectsAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProjectProductsByWorkspaceProjectsAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Workspace`."""
type ProjectProductsByWorkspaceProjectsAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Task` values, with data from `Workspace`."""
type ProjectTasksByWorkspaceProjectsAndTasksManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProjectTasksByWorkspaceProjectsAndTasksManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Workspace`."""
type ProjectTasksByWorkspaceProjectsAndTasksManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Brand` values, with data from `Workspace`."""
type ProjectBrandsByWorkspaceProjectsAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProjectBrandsByWorkspaceProjectsAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Workspace`."""
type ProjectBrandsByWorkspaceProjectsAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Shop` values, with data from `Workspace`."""
type ProjectShopsByWorkspaceProjectsAndShopsManyToManyConnection {
  """A list of `Shop` objects."""
  nodes: [Shop]!
  """A list of edges which contains the `Shop`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProjectShopsByWorkspaceProjectsAndShopsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Shop` you could get from the connection."""
  totalCount: Int!
}

type Shop implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  description: String
  image: String
  website: String
  products: String
  articles: String
  customers: String
  comments: String
  coupons: String
  categories: String
  polls: String
  quotes: String
  reviews: String
  giftCertificates: String
  rating: String
  tags: String
  users: String
  invoices: String
  reports: String
  rewardPoints: String
  specialDiscounts: String
  statistics: String
  stocks: String
  country: String
  physicalStore: String
  type: String
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceShopsAndCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): ShopCustomersByWorkspaceShopsAndCustomersManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceShopsAndCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceShopsAndUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): ShopUsersByWorkspaceShopsAndUsersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceShopsAndUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceShopsAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): ShopProductsByWorkspaceShopsAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceShopsAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceShopsAndTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): ShopTasksByWorkspaceShopsAndTasksManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceShopsAndTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceShopsAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): ShopBrandsByWorkspaceShopsAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceShopsAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceShopsAndCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): ShopCategoriesByWorkspaceShopsAndCategoryManyToManyConnection!
  """Reads and enables pagination through a set of `Category`."""
  categoriesByWorkspaceShopsAndCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): [Category!]!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceShopsAndProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ShopProjectsByWorkspaceShopsAndProjectsManyToManyConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceShopsAndProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `Customer` values, with data from `Workspace`."""
type ShopCustomersByWorkspaceShopsAndCustomersManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ShopCustomersByWorkspaceShopsAndCustomersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Workspace`."""
type ShopCustomersByWorkspaceShopsAndCustomersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `User` values, with data from `Workspace`."""
type ShopUsersByWorkspaceShopsAndUsersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ShopUsersByWorkspaceShopsAndUsersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Workspace`."""
type ShopUsersByWorkspaceShopsAndUsersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Product` values, with data from `Workspace`."""
type ShopProductsByWorkspaceShopsAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ShopProductsByWorkspaceShopsAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Workspace`."""
type ShopProductsByWorkspaceShopsAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Task` values, with data from `Workspace`."""
type ShopTasksByWorkspaceShopsAndTasksManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ShopTasksByWorkspaceShopsAndTasksManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Workspace`."""
type ShopTasksByWorkspaceShopsAndTasksManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Brand` values, with data from `Workspace`."""
type ShopBrandsByWorkspaceShopsAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ShopBrandsByWorkspaceShopsAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Workspace`."""
type ShopBrandsByWorkspaceShopsAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Category` values, with data from `Workspace`."""
type ShopCategoriesByWorkspaceShopsAndCategoryManyToManyConnection {
  """A list of `Category` objects."""
  nodes: [Category]!
  """A list of edges which contains the `Category`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ShopCategoriesByWorkspaceShopsAndCategoryManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

type Category implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  thumbnail: String
  name: String!
  visibility: String
  status: Boolean
  websites: String
  product: String
  country: String
  description: String
  content: String
  image: String
  metaTitle: String
  metaKeywords: String
  metaDescription: String
  metaUrl: String
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceCategoryAndCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): CategoryCustomersByWorkspaceCategoryAndCustomersManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByWorkspaceCategoryAndCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceCategoryAndUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): CategoryUsersByWorkspaceCategoryAndUsersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByWorkspaceCategoryAndUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceCategoryAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): CategoryProductsByWorkspaceCategoryAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByWorkspaceCategoryAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceCategoryAndTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): CategoryTasksByWorkspaceCategoryAndTasksManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByWorkspaceCategoryAndTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceCategoryAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): CategoryBrandsByWorkspaceCategoryAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByWorkspaceCategoryAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceCategoryAndShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): CategoryShopsByWorkspaceCategoryAndShopsManyToManyConnection!
  """Reads and enables pagination through a set of `Shop`."""
  shopsByWorkspaceCategoryAndShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): [Shop!]!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceCategoryAndProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): CategoryProjectsByWorkspaceCategoryAndProjectsManyToManyConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByWorkspaceCategoryAndProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `Customer` values, with data from `Workspace`."""
type CategoryCustomersByWorkspaceCategoryAndCustomersManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CategoryCustomersByWorkspaceCategoryAndCustomersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Workspace`."""
type CategoryCustomersByWorkspaceCategoryAndCustomersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `User` values, with data from `Workspace`."""
type CategoryUsersByWorkspaceCategoryAndUsersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CategoryUsersByWorkspaceCategoryAndUsersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Workspace`."""
type CategoryUsersByWorkspaceCategoryAndUsersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Product` values, with data from `Workspace`."""
type CategoryProductsByWorkspaceCategoryAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CategoryProductsByWorkspaceCategoryAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Workspace`."""
type CategoryProductsByWorkspaceCategoryAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Task` values, with data from `Workspace`."""
type CategoryTasksByWorkspaceCategoryAndTasksManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CategoryTasksByWorkspaceCategoryAndTasksManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Workspace`."""
type CategoryTasksByWorkspaceCategoryAndTasksManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Brand` values, with data from `Workspace`."""
type CategoryBrandsByWorkspaceCategoryAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CategoryBrandsByWorkspaceCategoryAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Workspace`."""
type CategoryBrandsByWorkspaceCategoryAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Shop` values, with data from `Workspace`."""
type CategoryShopsByWorkspaceCategoryAndShopsManyToManyConnection {
  """A list of `Shop` objects."""
  nodes: [Shop]!
  """A list of edges which contains the `Shop`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CategoryShopsByWorkspaceCategoryAndShopsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Shop` you could get from the connection."""
  totalCount: Int!
}

"""A `Shop` edge in the connection, with data from `Workspace`."""
type CategoryShopsByWorkspaceCategoryAndShopsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Shop` at the end of the edge."""
  node: Shop
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""Methods to use when ordering `Shop`."""
enum ShopsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  IMAGE_ASC
  IMAGE_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  ARTICLES_ASC
  ARTICLES_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  COUPONS_ASC
  COUPONS_DESC
  CATEGORIES_ASC
  CATEGORIES_DESC
  POLLS_ASC
  POLLS_DESC
  QUOTES_ASC
  QUOTES_DESC
  REVIEWS_ASC
  REVIEWS_DESC
  GIFT_CERTIFICATES_ASC
  GIFT_CERTIFICATES_DESC
  RATING_ASC
  RATING_DESC
  TAGS_ASC
  TAGS_DESC
  USERS_ASC
  USERS_DESC
  INVOICES_ASC
  INVOICES_DESC
  REPORTS_ASC
  REPORTS_DESC
  REWARD_POINTS_ASC
  REWARD_POINTS_DESC
  SPECIAL_DISCOUNTS_ASC
  SPECIAL_DISCOUNTS_DESC
  STATISTICS_ASC
  STATISTICS_DESC
  STOCKS_ASC
  STOCKS_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  PHYSICAL_STORE_ASC
  PHYSICAL_STORE_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Shop` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input ShopCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `website` field."""
  website: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `articles` field."""
  articles: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `comments` field."""
  comments: String
  """Checks for equality with the object’s `coupons` field."""
  coupons: String
  """Checks for equality with the object’s `categories` field."""
  categories: String
  """Checks for equality with the object’s `polls` field."""
  polls: String
  """Checks for equality with the object’s `quotes` field."""
  quotes: String
  """Checks for equality with the object’s `reviews` field."""
  reviews: String
  """Checks for equality with the object’s `giftCertificates` field."""
  giftCertificates: String
  """Checks for equality with the object’s `rating` field."""
  rating: String
  """Checks for equality with the object’s `tags` field."""
  tags: String
  """Checks for equality with the object’s `users` field."""
  users: String
  """Checks for equality with the object’s `invoices` field."""
  invoices: String
  """Checks for equality with the object’s `reports` field."""
  reports: String
  """Checks for equality with the object’s `rewardPoints` field."""
  rewardPoints: String
  """Checks for equality with the object’s `specialDiscounts` field."""
  specialDiscounts: String
  """Checks for equality with the object’s `statistics` field."""
  statistics: String
  """Checks for equality with the object’s `stocks` field."""
  stocks: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `physicalStore` field."""
  physicalStore: String
  """Checks for equality with the object’s `type` field."""
  type: String
}

"""A connection to a list of `Project` values, with data from `Workspace`."""
type CategoryProjectsByWorkspaceCategoryAndProjectsManyToManyConnection {
  """A list of `Project` objects."""
  nodes: [Project]!
  """A list of edges which contains the `Project`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CategoryProjectsByWorkspaceCategoryAndProjectsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `Workspace`."""
type CategoryProjectsByWorkspaceCategoryAndProjectsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Project` at the end of the edge."""
  node: Project
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A `Category` edge in the connection, with data from `Workspace`."""
type ShopCategoriesByWorkspaceShopsAndCategoryManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Category` at the end of the edge."""
  node: Category
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""Methods to use when ordering `Category`."""
enum CategoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  THUMBNAIL_ASC
  THUMBNAIL_DESC
  NAME_ASC
  NAME_DESC
  VISIBILITY_ASC
  VISIBILITY_DESC
  STATUS_ASC
  STATUS_DESC
  WEBSITES_ASC
  WEBSITES_DESC
  PRODUCT_ASC
  PRODUCT_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CONTENT_ASC
  CONTENT_DESC
  IMAGE_ASC
  IMAGE_DESC
  META_TITLE_ASC
  META_TITLE_DESC
  META_KEYWORDS_ASC
  META_KEYWORDS_DESC
  META_DESCRIPTION_ASC
  META_DESCRIPTION_DESC
  META_URL_ASC
  META_URL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `thumbnail` field."""
  thumbnail: String
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `visibility` field."""
  visibility: String
  """Checks for equality with the object’s `status` field."""
  status: Boolean
  """Checks for equality with the object’s `websites` field."""
  websites: String
  """Checks for equality with the object’s `product` field."""
  product: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `metaTitle` field."""
  metaTitle: String
  """Checks for equality with the object’s `metaKeywords` field."""
  metaKeywords: String
  """Checks for equality with the object’s `metaDescription` field."""
  metaDescription: String
  """Checks for equality with the object’s `metaUrl` field."""
  metaUrl: String
}

"""A connection to a list of `Project` values, with data from `Workspace`."""
type ShopProjectsByWorkspaceShopsAndProjectsManyToManyConnection {
  """A list of `Project` objects."""
  nodes: [Project]!
  """A list of edges which contains the `Project`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ShopProjectsByWorkspaceShopsAndProjectsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `Workspace`."""
type ShopProjectsByWorkspaceShopsAndProjectsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Project` at the end of the edge."""
  node: Project
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A `Shop` edge in the connection, with data from `Workspace`."""
type ProjectShopsByWorkspaceProjectsAndShopsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Shop` at the end of the edge."""
  node: Shop
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Category` values, with data from `Workspace`."""
type ProjectCategoriesByWorkspaceProjectsAndCategoryManyToManyConnection {
  """A list of `Category` objects."""
  nodes: [Category]!
  """A list of edges which contains the `Category`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProjectCategoriesByWorkspaceProjectsAndCategoryManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection, with data from `Workspace`."""
type ProjectCategoriesByWorkspaceProjectsAndCategoryManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Category` at the end of the edge."""
  node: Category
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Project` at the end of the edge."""
  node: Project
}

"""A connection to a list of `Customer` values, with data from `Project`."""
type TaskCustomersByProjectTaskIdAndCustIdManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [TaskCustomersByProjectTaskIdAndCustIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Project`."""
type TaskCustomersByProjectTaskIdAndCustIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Project`."""
  projectsByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `User` values, with data from `Project`."""
type TaskUsersByProjectTaskIdAndStaffIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [TaskUsersByProjectTaskIdAndStaffIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Project`."""
type TaskUsersByProjectTaskIdAndStaffIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Project`."""
  projectsByStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `Ticketing` values, with data from `Project`."""
type TaskTicketingsByProjectTaskIdAndTicketIdManyToManyConnection {
  """A list of `Ticketing` objects."""
  nodes: [Ticketing]!
  """A list of edges which contains the `Ticketing`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [TaskTicketingsByProjectTaskIdAndTicketIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Ticketing` you could get from the connection."""
  totalCount: Int!
}

"""A `Ticketing` edge in the connection, with data from `Project`."""
type TaskTicketingsByProjectTaskIdAndTicketIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Ticketing` at the end of the edge."""
  node: Ticketing
  """Reads and enables pagination through a set of `Project`."""
  projectsByTicketId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByTicketIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""Methods to use when ordering `Ticketing`."""
enum TicketingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  LOCATION_ASC
  LOCATION_DESC
  DATE_ASC
  DATE_DESC
  SEVERITY_ASC
  SEVERITY_DESC
  TEAM_ASC
  TEAM_DESC
  REQUESTER_ASC
  REQUESTER_DESC
  REQUESTER_EMAIL_ASC
  REQUESTER_EMAIL_DESC
  CONTENT_ASC
  CONTENT_DESC
  DEPARTMENT_ASC
  DEPARTMENT_DESC
  MEDIA_ASC
  MEDIA_DESC
  PROJECTS_ASC
  PROJECTS_DESC
  TICKET_TYPE_ASC
  TICKET_TYPE_DESC
  COMMENT_ASC
  COMMENT_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  PRIORITY_ASC
  PRIORITY_DESC
  STATUS_ASC
  STATUS_DESC
  RESOLUTION_ASC
  RESOLUTION_DESC
  ASSIGNED_TO_ASC
  ASSIGNED_TO_DESC
  DATE_MODIFIED_ASC
  DATE_MODIFIED_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  LEVEL_ASC
  LEVEL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Ticketing` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TicketingCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `location` field."""
  location: String
  """Checks for equality with the object’s `date` field."""
  date: String
  """Checks for equality with the object’s `severity` field."""
  severity: String
  """Checks for equality with the object’s `team` field."""
  team: String
  """Checks for equality with the object’s `requester` field."""
  requester: String
  """Checks for equality with the object’s `requesterEmail` field."""
  requesterEmail: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `department` field."""
  department: String
  """Checks for equality with the object’s `media` field."""
  media: String
  """Checks for equality with the object’s `projects` field."""
  projects: String
  """Checks for equality with the object’s `ticketType` field."""
  ticketType: String
  """Checks for equality with the object’s `comment` field."""
  comment: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `priority` field."""
  priority: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `resolution` field."""
  resolution: String
  """Checks for equality with the object’s `assignedTo` field."""
  assignedTo: String
  """Checks for equality with the object’s `dateModified` field."""
  dateModified: Datetime
  """Checks for equality with the object’s `accountName` field."""
  accountName: String
  """Checks for equality with the object’s `level` field."""
  level: String
}

"""A connection to a list of `Brand` values, with data from `Mediamanager`."""
type TaskBrandsByMediamanagerTaskNameAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [TaskBrandsByMediamanagerTaskNameAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Mediamanager`."""
type TaskBrandsByMediamanagerTaskNameAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Customer` values, with data from `Mediamanager`."""
type TaskCustomersByMediamanagerTaskNameAndAuthorManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [TaskCustomersByMediamanagerTaskNameAndAuthorManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Mediamanager`."""
type TaskCustomersByMediamanagerTaskNameAndAuthorManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Agreement` values, with data from `Mediamanager`."""
type TaskAgreementsByMediamanagerTaskNameAndAgreementsManyToManyConnection {
  """A list of `Agreement` objects."""
  nodes: [Agreement]!
  """A list of edges which contains the `Agreement`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [TaskAgreementsByMediamanagerTaskNameAndAgreementsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Agreement` you could get from the connection."""
  totalCount: Int!
}

type Agreement implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  referenceId: Int!
  created: Datetime
  updated: Datetime
  content: String
  name: String
  image: String
  excerpt: String
  type: String
  userId: Int!
  shopId: Int!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerAgreementsAndBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): AgreementBrandsByMediamanagerAgreementsAndBrandsManyToManyConnection!
  """Reads and enables pagination through a set of `Brand`."""
  brandsByMediamanagerAgreementsAndBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerAgreementsAndAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): AgreementCustomersByMediamanagerAgreementsAndAuthorManyToManyConnection!
  """Reads and enables pagination through a set of `Customer`."""
  customersByMediamanagerAgreementsAndAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerAgreementsAndComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): AgreementCommentsByMediamanagerAgreementsAndCommentManyToManyConnection!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByMediamanagerAgreementsAndCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerAgreementsAndTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): AgreementTasksByMediamanagerAgreementsAndTaskNameManyToManyConnection!
  """Reads and enables pagination through a set of `Task`."""
  tasksByMediamanagerAgreementsAndTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerAgreementsAndMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): AgreementUsersByMediamanagerAgreementsAndMembersManyToManyConnection!
  """Reads and enables pagination through a set of `User`."""
  usersByMediamanagerAgreementsAndMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerAgreementsAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): AgreementProductsByMediamanagerAgreementsAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByMediamanagerAgreementsAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
}

"""A connection to a list of `Brand` values, with data from `Mediamanager`."""
type AgreementBrandsByMediamanagerAgreementsAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [AgreementBrandsByMediamanagerAgreementsAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Mediamanager`."""
type AgreementBrandsByMediamanagerAgreementsAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Customer` values, with data from `Mediamanager`."""
type AgreementCustomersByMediamanagerAgreementsAndAuthorManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [AgreementCustomersByMediamanagerAgreementsAndAuthorManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Mediamanager`."""
type AgreementCustomersByMediamanagerAgreementsAndAuthorManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Comment` values, with data from `Mediamanager`."""
type AgreementCommentsByMediamanagerAgreementsAndCommentManyToManyConnection {
  """A list of `Comment` objects."""
  nodes: [Comment]!
  """A list of edges which contains the `Comment`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [AgreementCommentsByMediamanagerAgreementsAndCommentManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection, with data from `Mediamanager`."""
type AgreementCommentsByMediamanagerAgreementsAndCommentManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Comment` at the end of the edge."""
  node: Comment
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""Methods to use when ordering `Comment`."""
enum CommentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CUSTOMER_NAME_ASC
  CUSTOMER_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  IMAGE_ASC
  IMAGE_DESC
  RESPONSE_ASC
  RESPONSE_DESC
  PUBLISHED_ASC
  PUBLISHED_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Comment` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input CommentCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `customerName` field."""
  customerName: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `response` field."""
  response: String
  """Checks for equality with the object’s `published` field."""
  published: Datetime
  """Checks for equality with the object’s `custId` field."""
  custId: Int
}

"""A connection to a list of `Task` values, with data from `Mediamanager`."""
type AgreementTasksByMediamanagerAgreementsAndTaskNameManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [AgreementTasksByMediamanagerAgreementsAndTaskNameManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Mediamanager`."""
type AgreementTasksByMediamanagerAgreementsAndTaskNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `User` values, with data from `Mediamanager`."""
type AgreementUsersByMediamanagerAgreementsAndMembersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [AgreementUsersByMediamanagerAgreementsAndMembersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Mediamanager`."""
type AgreementUsersByMediamanagerAgreementsAndMembersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Product` values, with data from `Mediamanager`."""
type AgreementProductsByMediamanagerAgreementsAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [AgreementProductsByMediamanagerAgreementsAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Mediamanager`."""
type AgreementProductsByMediamanagerAgreementsAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A `Agreement` edge in the connection, with data from `Mediamanager`."""
type TaskAgreementsByMediamanagerTaskNameAndAgreementsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Agreement` at the end of the edge."""
  node: Agreement
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""Methods to use when ordering `Agreement`."""
enum AgreementsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REFERENCE_ID_ASC
  REFERENCE_ID_DESC
  CREATED_ASC
  CREATED_DESC
  UPDATED_ASC
  UPDATED_DESC
  CONTENT_ASC
  CONTENT_DESC
  NAME_ASC
  NAME_DESC
  IMAGE_ASC
  IMAGE_DESC
  EXCERPT_ASC
  EXCERPT_DESC
  TYPE_ASC
  TYPE_DESC
  USER_ID_ASC
  USER_ID_DESC
  SHOP_ID_ASC
  SHOP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Agreement` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AgreementCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `referenceId` field."""
  referenceId: Int
  """Checks for equality with the object’s `created` field."""
  created: Datetime
  """Checks for equality with the object’s `updated` field."""
  updated: Datetime
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `excerpt` field."""
  excerpt: String
  """Checks for equality with the object’s `type` field."""
  type: String
  """Checks for equality with the object’s `userId` field."""
  userId: Int
  """Checks for equality with the object’s `shopId` field."""
  shopId: Int
}

"""A connection to a list of `Comment` values, with data from `Mediamanager`."""
type TaskCommentsByMediamanagerTaskNameAndCommentManyToManyConnection {
  """A list of `Comment` objects."""
  nodes: [Comment]!
  """A list of edges which contains the `Comment`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [TaskCommentsByMediamanagerTaskNameAndCommentManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection, with data from `Mediamanager`."""
type TaskCommentsByMediamanagerTaskNameAndCommentManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Comment` at the end of the edge."""
  node: Comment
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `User` values, with data from `Mediamanager`."""
type TaskUsersByMediamanagerTaskNameAndMembersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [TaskUsersByMediamanagerTaskNameAndMembersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Mediamanager`."""
type TaskUsersByMediamanagerTaskNameAndMembersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Product` values, with data from `Mediamanager`."""
type TaskProductsByMediamanagerTaskNameAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [TaskProductsByMediamanagerTaskNameAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Mediamanager`."""
type TaskProductsByMediamanagerTaskNameAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Customer` values, with data from `Workspace`."""
type TaskCustomersByWorkspaceTasksAndCustomersManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [TaskCustomersByWorkspaceTasksAndCustomersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Workspace`."""
type TaskCustomersByWorkspaceTasksAndCustomersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `User` values, with data from `Workspace`."""
type TaskUsersByWorkspaceTasksAndUsersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [TaskUsersByWorkspaceTasksAndUsersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Workspace`."""
type TaskUsersByWorkspaceTasksAndUsersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Product` values, with data from `Workspace`."""
type TaskProductsByWorkspaceTasksAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [TaskProductsByWorkspaceTasksAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Workspace`."""
type TaskProductsByWorkspaceTasksAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Brand` values, with data from `Workspace`."""
type TaskBrandsByWorkspaceTasksAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [TaskBrandsByWorkspaceTasksAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Workspace`."""
type TaskBrandsByWorkspaceTasksAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Shop` values, with data from `Workspace`."""
type TaskShopsByWorkspaceTasksAndShopsManyToManyConnection {
  """A list of `Shop` objects."""
  nodes: [Shop]!
  """A list of edges which contains the `Shop`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [TaskShopsByWorkspaceTasksAndShopsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Shop` you could get from the connection."""
  totalCount: Int!
}

"""A `Shop` edge in the connection, with data from `Workspace`."""
type TaskShopsByWorkspaceTasksAndShopsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Shop` at the end of the edge."""
  node: Shop
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Category` values, with data from `Workspace`."""
type TaskCategoriesByWorkspaceTasksAndCategoryManyToManyConnection {
  """A list of `Category` objects."""
  nodes: [Category]!
  """A list of edges which contains the `Category`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [TaskCategoriesByWorkspaceTasksAndCategoryManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection, with data from `Workspace`."""
type TaskCategoriesByWorkspaceTasksAndCategoryManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Category` at the end of the edge."""
  node: Category
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Project` values, with data from `Workspace`."""
type TaskProjectsByWorkspaceTasksAndProjectsManyToManyConnection {
  """A list of `Project` objects."""
  nodes: [Project]!
  """A list of edges which contains the `Project`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [TaskProjectsByWorkspaceTasksAndProjectsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `Workspace`."""
type TaskProjectsByWorkspaceTasksAndProjectsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Project` at the end of the edge."""
  node: Project
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A `Workspace` edge in the connection."""
type WorkspacesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Workspace` at the end of the edge."""
  node: Workspace
}

"""A connection to a list of `Training` values."""
type TrainingsConnection {
  """A list of `Training` objects."""
  nodes: [Training]!
  """A list of edges which contains the `Training` and cursor to aid in pagination."""
  edges: [TrainingsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Training` you could get from the connection."""
  totalCount: Int!
}

type Training implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  subject: String
  content: String
  media: String
  link: String
  steps: String
  updated: Datetime
  analytics: String
  competency: String
  course: String
  grade: String
  school: String
  comment: Int
  address: String
  country: Int
  state: Int
  postal: String
  teacher: String
  student: String
  anncouncement: String
  resource: String
  badges: String
  isPublic: String
  isCompleted: String
  speakers: String
  fieldTrips: String
  assignments: String
  assignmentsDueDate: String
  origanlityReport: String
  products: BigInt
  faqs: String
  languages: String
  checklists: BigInt
  city: String
  meetups: String
  lab: String
  digiboards: String
  """Reads a single `Comment` that is related to this `Training`."""
  commentByComment: Comment
  """Reads a single `Country` that is related to this `Training`."""
  countryByCountry: Country
  """Reads a single `State` that is related to this `Training`."""
  stateByState: State
  """Reads a single `Product` that is related to this `Training`."""
  productByProducts: Product
  """Reads a single `Checklist` that is related to this `Training`."""
  checklistByChecklists: Checklist
}

type Country implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  description: String
  image: String
  region: String
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCountry(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCountryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByTrainingCountryAndComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): CountryCommentsByTrainingCountryAndCommentManyToManyConnection!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByTrainingCountryAndCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]!
  """Reads and enables pagination through a set of `State`."""
  statesByTrainingCountryAndState(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): CountryStatesByTrainingCountryAndStateManyToManyConnection!
  """Reads and enables pagination through a set of `State`."""
  statesByTrainingCountryAndStateList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): [State!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByTrainingCountryAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): CountryProductsByTrainingCountryAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByTrainingCountryAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Checklist`."""
  checklistsByTrainingCountryAndChecklists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): CountryChecklistsByTrainingCountryAndChecklistsManyToManyConnection!
  """Reads and enables pagination through a set of `Checklist`."""
  checklistsByTrainingCountryAndChecklistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): [Checklist!]!
}

"""Methods to use when ordering `Training`."""
enum TrainingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  CONTENT_ASC
  CONTENT_DESC
  MEDIA_ASC
  MEDIA_DESC
  LINK_ASC
  LINK_DESC
  STEPS_ASC
  STEPS_DESC
  UPDATED_ASC
  UPDATED_DESC
  ANALYTICS_ASC
  ANALYTICS_DESC
  COMPETENCY_ASC
  COMPETENCY_DESC
  COURSE_ASC
  COURSE_DESC
  GRADE_ASC
  GRADE_DESC
  SCHOOL_ASC
  SCHOOL_DESC
  COMMENT_ASC
  COMMENT_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  STATE_ASC
  STATE_DESC
  POSTAL_ASC
  POSTAL_DESC
  TEACHER_ASC
  TEACHER_DESC
  STUDENT_ASC
  STUDENT_DESC
  ANNCOUNCEMENT_ASC
  ANNCOUNCEMENT_DESC
  RESOURCE_ASC
  RESOURCE_DESC
  BADGES_ASC
  BADGES_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  IS_COMPLETED_ASC
  IS_COMPLETED_DESC
  SPEAKERS_ASC
  SPEAKERS_DESC
  FIELD_TRIPS_ASC
  FIELD_TRIPS_DESC
  ASSIGNMENTS_ASC
  ASSIGNMENTS_DESC
  ASSIGNMENTS_DUE_DATE_ASC
  ASSIGNMENTS_DUE_DATE_DESC
  ORIGANLITY_REPORT_ASC
  ORIGANLITY_REPORT_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  FAQS_ASC
  FAQS_DESC
  LANGUAGES_ASC
  LANGUAGES_DESC
  CHECKLISTS_ASC
  CHECKLISTS_DESC
  CITY_ASC
  CITY_DESC
  MEETUPS_ASC
  MEETUPS_DESC
  LAB_ASC
  LAB_DESC
  DIGIBOARDS_ASC
  DIGIBOARDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Training` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TrainingCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `subject` field."""
  subject: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `media` field."""
  media: String
  """Checks for equality with the object’s `link` field."""
  link: String
  """Checks for equality with the object’s `steps` field."""
  steps: String
  """Checks for equality with the object’s `updated` field."""
  updated: Datetime
  """Checks for equality with the object’s `analytics` field."""
  analytics: String
  """Checks for equality with the object’s `competency` field."""
  competency: String
  """Checks for equality with the object’s `course` field."""
  course: String
  """Checks for equality with the object’s `grade` field."""
  grade: String
  """Checks for equality with the object’s `school` field."""
  school: String
  """Checks for equality with the object’s `comment` field."""
  comment: Int
  """Checks for equality with the object’s `address` field."""
  address: String
  """Checks for equality with the object’s `country` field."""
  country: Int
  """Checks for equality with the object’s `state` field."""
  state: Int
  """Checks for equality with the object’s `postal` field."""
  postal: String
  """Checks for equality with the object’s `teacher` field."""
  teacher: String
  """Checks for equality with the object’s `student` field."""
  student: String
  """Checks for equality with the object’s `anncouncement` field."""
  anncouncement: String
  """Checks for equality with the object’s `resource` field."""
  resource: String
  """Checks for equality with the object’s `badges` field."""
  badges: String
  """Checks for equality with the object’s `isPublic` field."""
  isPublic: String
  """Checks for equality with the object’s `isCompleted` field."""
  isCompleted: String
  """Checks for equality with the object’s `speakers` field."""
  speakers: String
  """Checks for equality with the object’s `fieldTrips` field."""
  fieldTrips: String
  """Checks for equality with the object’s `assignments` field."""
  assignments: String
  """Checks for equality with the object’s `assignmentsDueDate` field."""
  assignmentsDueDate: String
  """Checks for equality with the object’s `origanlityReport` field."""
  origanlityReport: String
  """Checks for equality with the object’s `products` field."""
  products: BigInt
  """Checks for equality with the object’s `faqs` field."""
  faqs: String
  """Checks for equality with the object’s `languages` field."""
  languages: String
  """Checks for equality with the object’s `checklists` field."""
  checklists: BigInt
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `meetups` field."""
  meetups: String
  """Checks for equality with the object’s `lab` field."""
  lab: String
  """Checks for equality with the object’s `digiboards` field."""
  digiboards: String
}

"""A connection to a list of `Comment` values, with data from `Training`."""
type CountryCommentsByTrainingCountryAndCommentManyToManyConnection {
  """A list of `Comment` objects."""
  nodes: [Comment]!
  """A list of edges which contains the `Comment`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [CountryCommentsByTrainingCountryAndCommentManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection, with data from `Training`."""
type CountryCommentsByTrainingCountryAndCommentManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Comment` at the end of the edge."""
  node: Comment
  """Reads and enables pagination through a set of `Training`."""
  trainingsByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `State` values, with data from `Training`."""
type CountryStatesByTrainingCountryAndStateManyToManyConnection {
  """A list of `State` objects."""
  nodes: [State]!
  """A list of edges which contains the `State`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [CountryStatesByTrainingCountryAndStateManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `State` you could get from the connection."""
  totalCount: Int!
}

type State implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  description: String
  country: String
  image: String
  """Reads and enables pagination through a set of `Training`."""
  trainingsByState(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByStateList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByTrainingStateAndComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): StateCommentsByTrainingStateAndCommentManyToManyConnection!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByTrainingStateAndCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]!
  """Reads and enables pagination through a set of `Country`."""
  countriesByTrainingStateAndCountry(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): StateCountriesByTrainingStateAndCountryManyToManyConnection!
  """Reads and enables pagination through a set of `Country`."""
  countriesByTrainingStateAndCountryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): [Country!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByTrainingStateAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): StateProductsByTrainingStateAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByTrainingStateAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
  """Reads and enables pagination through a set of `Checklist`."""
  checklistsByTrainingStateAndChecklists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): StateChecklistsByTrainingStateAndChecklistsManyToManyConnection!
  """Reads and enables pagination through a set of `Checklist`."""
  checklistsByTrainingStateAndChecklistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): [Checklist!]!
}

"""A connection to a list of `Comment` values, with data from `Training`."""
type StateCommentsByTrainingStateAndCommentManyToManyConnection {
  """A list of `Comment` objects."""
  nodes: [Comment]!
  """A list of edges which contains the `Comment`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [StateCommentsByTrainingStateAndCommentManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection, with data from `Training`."""
type StateCommentsByTrainingStateAndCommentManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Comment` at the end of the edge."""
  node: Comment
  """Reads and enables pagination through a set of `Training`."""
  trainingsByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `Country` values, with data from `Training`."""
type StateCountriesByTrainingStateAndCountryManyToManyConnection {
  """A list of `Country` objects."""
  nodes: [Country]!
  """A list of edges which contains the `Country`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [StateCountriesByTrainingStateAndCountryManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Country` you could get from the connection."""
  totalCount: Int!
}

"""A `Country` edge in the connection, with data from `Training`."""
type StateCountriesByTrainingStateAndCountryManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Country` at the end of the edge."""
  node: Country
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCountry(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCountryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""Methods to use when ordering `Country`."""
enum CountriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  IMAGE_ASC
  IMAGE_DESC
  REGION_ASC
  REGION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Country` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input CountryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `region` field."""
  region: String
}

"""A connection to a list of `Product` values, with data from `Training`."""
type StateProductsByTrainingStateAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [StateProductsByTrainingStateAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Training`."""
type StateProductsByTrainingStateAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Training`."""
  trainingsByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `Checklist` values, with data from `Training`."""
type StateChecklistsByTrainingStateAndChecklistsManyToManyConnection {
  """A list of `Checklist` objects."""
  nodes: [Checklist]!
  """A list of edges which contains the `Checklist`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [StateChecklistsByTrainingStateAndChecklistsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Checklist` you could get from the connection."""
  totalCount: Int!
}

type Checklist implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  username: String
  location: String
  regionalManager: String
  manager: String
  description: String
  ticket: String
  project: String
  region: String
  country: String
  media: String
  prodId: String
  """Reads and enables pagination through a set of `Training`."""
  trainingsByChecklists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByChecklistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByTrainingChecklistsAndComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): ChecklistCommentsByTrainingChecklistsAndCommentManyToManyConnection!
  """Reads and enables pagination through a set of `Comment`."""
  commentsByTrainingChecklistsAndCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]!
  """Reads and enables pagination through a set of `Country`."""
  countriesByTrainingChecklistsAndCountry(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): ChecklistCountriesByTrainingChecklistsAndCountryManyToManyConnection!
  """Reads and enables pagination through a set of `Country`."""
  countriesByTrainingChecklistsAndCountryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): [Country!]!
  """Reads and enables pagination through a set of `State`."""
  statesByTrainingChecklistsAndState(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): ChecklistStatesByTrainingChecklistsAndStateManyToManyConnection!
  """Reads and enables pagination through a set of `State`."""
  statesByTrainingChecklistsAndStateList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): [State!]!
  """Reads and enables pagination through a set of `Product`."""
  productsByTrainingChecklistsAndProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): ChecklistProductsByTrainingChecklistsAndProductsManyToManyConnection!
  """Reads and enables pagination through a set of `Product`."""
  productsByTrainingChecklistsAndProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]!
}

"""A connection to a list of `Comment` values, with data from `Training`."""
type ChecklistCommentsByTrainingChecklistsAndCommentManyToManyConnection {
  """A list of `Comment` objects."""
  nodes: [Comment]!
  """A list of edges which contains the `Comment`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [ChecklistCommentsByTrainingChecklistsAndCommentManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection, with data from `Training`."""
type ChecklistCommentsByTrainingChecklistsAndCommentManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Comment` at the end of the edge."""
  node: Comment
  """Reads and enables pagination through a set of `Training`."""
  trainingsByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `Country` values, with data from `Training`."""
type ChecklistCountriesByTrainingChecklistsAndCountryManyToManyConnection {
  """A list of `Country` objects."""
  nodes: [Country]!
  """A list of edges which contains the `Country`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [ChecklistCountriesByTrainingChecklistsAndCountryManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Country` you could get from the connection."""
  totalCount: Int!
}

"""A `Country` edge in the connection, with data from `Training`."""
type ChecklistCountriesByTrainingChecklistsAndCountryManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Country` at the end of the edge."""
  node: Country
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCountry(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCountryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `State` values, with data from `Training`."""
type ChecklistStatesByTrainingChecklistsAndStateManyToManyConnection {
  """A list of `State` objects."""
  nodes: [State]!
  """A list of edges which contains the `State`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [ChecklistStatesByTrainingChecklistsAndStateManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `State` you could get from the connection."""
  totalCount: Int!
}

"""A `State` edge in the connection, with data from `Training`."""
type ChecklistStatesByTrainingChecklistsAndStateManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `State` at the end of the edge."""
  node: State
  """Reads and enables pagination through a set of `Training`."""
  trainingsByState(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByStateList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""Methods to use when ordering `State`."""
enum StatesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  IMAGE_ASC
  IMAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `State` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input StateCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `image` field."""
  image: String
}

"""A connection to a list of `Product` values, with data from `Training`."""
type ChecklistProductsByTrainingChecklistsAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [ChecklistProductsByTrainingChecklistsAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Training`."""
type ChecklistProductsByTrainingChecklistsAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Training`."""
  trainingsByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A `Checklist` edge in the connection, with data from `Training`."""
type StateChecklistsByTrainingStateAndChecklistsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Checklist` at the end of the edge."""
  node: Checklist
  """Reads and enables pagination through a set of `Training`."""
  trainingsByChecklists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByChecklistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""Methods to use when ordering `Checklist`."""
enum ChecklistsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
  LOCATION_ASC
  LOCATION_DESC
  REGIONAL_MANAGER_ASC
  REGIONAL_MANAGER_DESC
  MANAGER_ASC
  MANAGER_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TICKET_ASC
  TICKET_DESC
  PROJECT_ASC
  PROJECT_DESC
  REGION_ASC
  REGION_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  MEDIA_ASC
  MEDIA_DESC
  PROD_ID_ASC
  PROD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Checklist` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ChecklistCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `username` field."""
  username: String
  """Checks for equality with the object’s `location` field."""
  location: String
  """Checks for equality with the object’s `regionalManager` field."""
  regionalManager: String
  """Checks for equality with the object’s `manager` field."""
  manager: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `ticket` field."""
  ticket: String
  """Checks for equality with the object’s `project` field."""
  project: String
  """Checks for equality with the object’s `region` field."""
  region: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `media` field."""
  media: String
  """Checks for equality with the object’s `prodId` field."""
  prodId: String
}

"""A `State` edge in the connection, with data from `Training`."""
type CountryStatesByTrainingCountryAndStateManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `State` at the end of the edge."""
  node: State
  """Reads and enables pagination through a set of `Training`."""
  trainingsByState(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByStateList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `Product` values, with data from `Training`."""
type CountryProductsByTrainingCountryAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [CountryProductsByTrainingCountryAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Training`."""
type CountryProductsByTrainingCountryAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Training`."""
  trainingsByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `Checklist` values, with data from `Training`."""
type CountryChecklistsByTrainingCountryAndChecklistsManyToManyConnection {
  """A list of `Checklist` objects."""
  nodes: [Checklist]!
  """A list of edges which contains the `Checklist`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [CountryChecklistsByTrainingCountryAndChecklistsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Checklist` you could get from the connection."""
  totalCount: Int!
}

"""A `Checklist` edge in the connection, with data from `Training`."""
type CountryChecklistsByTrainingCountryAndChecklistsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Checklist` at the end of the edge."""
  node: Checklist
  """Reads and enables pagination through a set of `Training`."""
  trainingsByChecklists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByChecklistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A `Training` edge in the connection."""
type TrainingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Training` at the end of the edge."""
  node: Training
}

"""A connection to a list of `Customer` values, with data from `CreditMemo`."""
type ProductCustomersByCreditMemoProdIdAndCustIdManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `CreditMemo`, and the cursor to aid in pagination."""
  edges: [ProductCustomersByCreditMemoProdIdAndCustIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `CreditMemo`."""
type ProductCustomersByCreditMemoProdIdAndCustIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `CreditMemo`."""
  creditMemosByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): CreditMemosConnection!
  """Reads and enables pagination through a set of `CreditMemo`."""
  creditMemosByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): [CreditMemo!]!
}

"""A connection to a list of `Customer` values, with data from `Order`."""
type ProductCustomersByOrderProdIdAndCustIdManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Order`, and the cursor to aid in pagination."""
  edges: [ProductCustomersByOrderProdIdAndCustIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Order`."""
type ProductCustomersByOrderProdIdAndCustIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Order`."""
  ordersByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): OrdersConnection!
  """Reads and enables pagination through a set of `Order`."""
  ordersByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): [Order!]!
}

"""A connection to a list of `Customer` values, with data from `Quote`."""
type ProductCustomersByQuoteProdIdAndCustIdManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Quote`, and the cursor to aid in pagination."""
  edges: [ProductCustomersByQuoteProdIdAndCustIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Quote`."""
type ProductCustomersByQuoteProdIdAndCustIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Quote`."""
  quotesByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): QuotesConnection!
  """Reads and enables pagination through a set of `Quote`."""
  quotesByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): [Quote!]!
}

"""A connection to a list of `Order` values, with data from `Quote`."""
type ProductOrdersByQuoteProdIdAndOrderIdManyToManyConnection {
  """A list of `Order` objects."""
  nodes: [Order]!
  """A list of edges which contains the `Order`, info from the `Quote`, and the cursor to aid in pagination."""
  edges: [ProductOrdersByQuoteProdIdAndOrderIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Order` you could get from the connection."""
  totalCount: Int!
}

"""A `Order` edge in the connection, with data from `Quote`."""
type ProductOrdersByQuoteProdIdAndOrderIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Order` at the end of the edge."""
  node: Order
  """Reads and enables pagination through a set of `Quote`."""
  quotesByOrderId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): QuotesConnection!
  """Reads and enables pagination through a set of `Quote`."""
  quotesByOrderIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): [Quote!]!
}

"""A connection to a list of `Customer` values, with data from `Return`."""
type ProductCustomersByReturnProdIdAndCustIdManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Return`, and the cursor to aid in pagination."""
  edges: [ProductCustomersByReturnProdIdAndCustIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Return`."""
type ProductCustomersByReturnProdIdAndCustIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Return`."""
  returnsByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): ReturnsConnection!
  """Reads and enables pagination through a set of `Return`."""
  returnsByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): [Return!]!
}

"""A connection to a list of `Wishlist` values, with data from `Occassion`."""
type ProductWishlistsByOccassionProductsAndWishlistsManyToManyConnection {
  """A list of `Wishlist` objects."""
  nodes: [Wishlist]!
  """A list of edges which contains the `Wishlist`, info from the `Occassion`, and the cursor to aid in pagination."""
  edges: [ProductWishlistsByOccassionProductsAndWishlistsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Wishlist` you could get from the connection."""
  totalCount: Int!
}

"""A `Wishlist` edge in the connection, with data from `Occassion`."""
type ProductWishlistsByOccassionProductsAndWishlistsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Wishlist` at the end of the edge."""
  node: Wishlist
  """Reads and enables pagination through a set of `Occassion`."""
  occassionsByWishlists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): OccassionsConnection!
  """Reads and enables pagination through a set of `Occassion`."""
  occassionsByWishlistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): [Occassion!]!
}

"""Methods to use when ordering `Wishlist`."""
enum WishlistsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  VISIBILITY_ASC
  VISIBILITY_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Wishlist` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WishlistCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `visibility` field."""
  visibility: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `quantity` field."""
  quantity: String
}

"""A connection to a list of `Brand` values, with data from `Mediamanager`."""
type ProductBrandsByMediamanagerProductsAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [ProductBrandsByMediamanagerProductsAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Mediamanager`."""
type ProductBrandsByMediamanagerProductsAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Customer` values, with data from `Mediamanager`."""
type ProductCustomersByMediamanagerProductsAndAuthorManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [ProductCustomersByMediamanagerProductsAndAuthorManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Mediamanager`."""
type ProductCustomersByMediamanagerProductsAndAuthorManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Agreement` values, with data from `Mediamanager`."""
type ProductAgreementsByMediamanagerProductsAndAgreementsManyToManyConnection {
  """A list of `Agreement` objects."""
  nodes: [Agreement]!
  """A list of edges which contains the `Agreement`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [ProductAgreementsByMediamanagerProductsAndAgreementsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Agreement` you could get from the connection."""
  totalCount: Int!
}

"""A `Agreement` edge in the connection, with data from `Mediamanager`."""
type ProductAgreementsByMediamanagerProductsAndAgreementsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Agreement` at the end of the edge."""
  node: Agreement
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Comment` values, with data from `Mediamanager`."""
type ProductCommentsByMediamanagerProductsAndCommentManyToManyConnection {
  """A list of `Comment` objects."""
  nodes: [Comment]!
  """A list of edges which contains the `Comment`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [ProductCommentsByMediamanagerProductsAndCommentManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection, with data from `Mediamanager`."""
type ProductCommentsByMediamanagerProductsAndCommentManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Comment` at the end of the edge."""
  node: Comment
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Task` values, with data from `Mediamanager`."""
type ProductTasksByMediamanagerProductsAndTaskNameManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [ProductTasksByMediamanagerProductsAndTaskNameManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Mediamanager`."""
type ProductTasksByMediamanagerProductsAndTaskNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `User` values, with data from `Mediamanager`."""
type ProductUsersByMediamanagerProductsAndMembersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [ProductUsersByMediamanagerProductsAndMembersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Mediamanager`."""
type ProductUsersByMediamanagerProductsAndMembersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Customer` values, with data from `Workspace`."""
type ProductCustomersByWorkspaceProductsAndCustomersManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProductCustomersByWorkspaceProductsAndCustomersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Workspace`."""
type ProductCustomersByWorkspaceProductsAndCustomersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `User` values, with data from `Workspace`."""
type ProductUsersByWorkspaceProductsAndUsersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProductUsersByWorkspaceProductsAndUsersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Workspace`."""
type ProductUsersByWorkspaceProductsAndUsersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Task` values, with data from `Workspace`."""
type ProductTasksByWorkspaceProductsAndTasksManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProductTasksByWorkspaceProductsAndTasksManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Workspace`."""
type ProductTasksByWorkspaceProductsAndTasksManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Brand` values, with data from `Workspace`."""
type ProductBrandsByWorkspaceProductsAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProductBrandsByWorkspaceProductsAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Workspace`."""
type ProductBrandsByWorkspaceProductsAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Shop` values, with data from `Workspace`."""
type ProductShopsByWorkspaceProductsAndShopsManyToManyConnection {
  """A list of `Shop` objects."""
  nodes: [Shop]!
  """A list of edges which contains the `Shop`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProductShopsByWorkspaceProductsAndShopsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Shop` you could get from the connection."""
  totalCount: Int!
}

"""A `Shop` edge in the connection, with data from `Workspace`."""
type ProductShopsByWorkspaceProductsAndShopsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Shop` at the end of the edge."""
  node: Shop
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Category` values, with data from `Workspace`."""
type ProductCategoriesByWorkspaceProductsAndCategoryManyToManyConnection {
  """A list of `Category` objects."""
  nodes: [Category]!
  """A list of edges which contains the `Category`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProductCategoriesByWorkspaceProductsAndCategoryManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection, with data from `Workspace`."""
type ProductCategoriesByWorkspaceProductsAndCategoryManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Category` at the end of the edge."""
  node: Category
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Project` values, with data from `Workspace`."""
type ProductProjectsByWorkspaceProductsAndProjectsManyToManyConnection {
  """A list of `Project` objects."""
  nodes: [Project]!
  """A list of edges which contains the `Project`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [ProductProjectsByWorkspaceProductsAndProjectsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `Workspace`."""
type ProductProjectsByWorkspaceProductsAndProjectsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Project` at the end of the edge."""
  node: Project
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Comment` values, with data from `Training`."""
type ProductCommentsByTrainingProductsAndCommentManyToManyConnection {
  """A list of `Comment` objects."""
  nodes: [Comment]!
  """A list of edges which contains the `Comment`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [ProductCommentsByTrainingProductsAndCommentManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection, with data from `Training`."""
type ProductCommentsByTrainingProductsAndCommentManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Comment` at the end of the edge."""
  node: Comment
  """Reads and enables pagination through a set of `Training`."""
  trainingsByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `Country` values, with data from `Training`."""
type ProductCountriesByTrainingProductsAndCountryManyToManyConnection {
  """A list of `Country` objects."""
  nodes: [Country]!
  """A list of edges which contains the `Country`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [ProductCountriesByTrainingProductsAndCountryManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Country` you could get from the connection."""
  totalCount: Int!
}

"""A `Country` edge in the connection, with data from `Training`."""
type ProductCountriesByTrainingProductsAndCountryManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Country` at the end of the edge."""
  node: Country
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCountry(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCountryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `State` values, with data from `Training`."""
type ProductStatesByTrainingProductsAndStateManyToManyConnection {
  """A list of `State` objects."""
  nodes: [State]!
  """A list of edges which contains the `State`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [ProductStatesByTrainingProductsAndStateManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `State` you could get from the connection."""
  totalCount: Int!
}

"""A `State` edge in the connection, with data from `Training`."""
type ProductStatesByTrainingProductsAndStateManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `State` at the end of the edge."""
  node: State
  """Reads and enables pagination through a set of `Training`."""
  trainingsByState(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByStateList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `Checklist` values, with data from `Training`."""
type ProductChecklistsByTrainingProductsAndChecklistsManyToManyConnection {
  """A list of `Checklist` objects."""
  nodes: [Checklist]!
  """A list of edges which contains the `Checklist`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [ProductChecklistsByTrainingProductsAndChecklistsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Checklist` you could get from the connection."""
  totalCount: Int!
}

"""A `Checklist` edge in the connection, with data from `Training`."""
type ProductChecklistsByTrainingProductsAndChecklistsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Checklist` at the end of the edge."""
  node: Checklist
  """Reads and enables pagination through a set of `Training`."""
  trainingsByChecklists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByChecklistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `Customer` values, with data from `Mediamanager`."""
type BrandCustomersByMediamanagerBrandsAndAuthorManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [BrandCustomersByMediamanagerBrandsAndAuthorManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Mediamanager`."""
type BrandCustomersByMediamanagerBrandsAndAuthorManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Agreement` values, with data from `Mediamanager`."""
type BrandAgreementsByMediamanagerBrandsAndAgreementsManyToManyConnection {
  """A list of `Agreement` objects."""
  nodes: [Agreement]!
  """A list of edges which contains the `Agreement`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [BrandAgreementsByMediamanagerBrandsAndAgreementsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Agreement` you could get from the connection."""
  totalCount: Int!
}

"""A `Agreement` edge in the connection, with data from `Mediamanager`."""
type BrandAgreementsByMediamanagerBrandsAndAgreementsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Agreement` at the end of the edge."""
  node: Agreement
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Comment` values, with data from `Mediamanager`."""
type BrandCommentsByMediamanagerBrandsAndCommentManyToManyConnection {
  """A list of `Comment` objects."""
  nodes: [Comment]!
  """A list of edges which contains the `Comment`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [BrandCommentsByMediamanagerBrandsAndCommentManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection, with data from `Mediamanager`."""
type BrandCommentsByMediamanagerBrandsAndCommentManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Comment` at the end of the edge."""
  node: Comment
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Task` values, with data from `Mediamanager`."""
type BrandTasksByMediamanagerBrandsAndTaskNameManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [BrandTasksByMediamanagerBrandsAndTaskNameManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Mediamanager`."""
type BrandTasksByMediamanagerBrandsAndTaskNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `User` values, with data from `Mediamanager`."""
type BrandUsersByMediamanagerBrandsAndMembersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [BrandUsersByMediamanagerBrandsAndMembersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Mediamanager`."""
type BrandUsersByMediamanagerBrandsAndMembersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Product` values, with data from `Mediamanager`."""
type BrandProductsByMediamanagerBrandsAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [BrandProductsByMediamanagerBrandsAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Mediamanager`."""
type BrandProductsByMediamanagerBrandsAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Customer` values, with data from `Workspace`."""
type BrandCustomersByWorkspaceBrandsAndCustomersManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [BrandCustomersByWorkspaceBrandsAndCustomersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Workspace`."""
type BrandCustomersByWorkspaceBrandsAndCustomersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `User` values, with data from `Workspace`."""
type BrandUsersByWorkspaceBrandsAndUsersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [BrandUsersByWorkspaceBrandsAndUsersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Workspace`."""
type BrandUsersByWorkspaceBrandsAndUsersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Product` values, with data from `Workspace`."""
type BrandProductsByWorkspaceBrandsAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [BrandProductsByWorkspaceBrandsAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Workspace`."""
type BrandProductsByWorkspaceBrandsAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Task` values, with data from `Workspace`."""
type BrandTasksByWorkspaceBrandsAndTasksManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [BrandTasksByWorkspaceBrandsAndTasksManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Workspace`."""
type BrandTasksByWorkspaceBrandsAndTasksManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Shop` values, with data from `Workspace`."""
type BrandShopsByWorkspaceBrandsAndShopsManyToManyConnection {
  """A list of `Shop` objects."""
  nodes: [Shop]!
  """A list of edges which contains the `Shop`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [BrandShopsByWorkspaceBrandsAndShopsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Shop` you could get from the connection."""
  totalCount: Int!
}

"""A `Shop` edge in the connection, with data from `Workspace`."""
type BrandShopsByWorkspaceBrandsAndShopsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Shop` at the end of the edge."""
  node: Shop
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Category` values, with data from `Workspace`."""
type BrandCategoriesByWorkspaceBrandsAndCategoryManyToManyConnection {
  """A list of `Category` objects."""
  nodes: [Category]!
  """A list of edges which contains the `Category`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [BrandCategoriesByWorkspaceBrandsAndCategoryManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection, with data from `Workspace`."""
type BrandCategoriesByWorkspaceBrandsAndCategoryManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Category` at the end of the edge."""
  node: Category
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Project` values, with data from `Workspace`."""
type BrandProjectsByWorkspaceBrandsAndProjectsManyToManyConnection {
  """A list of `Project` objects."""
  nodes: [Project]!
  """A list of edges which contains the `Project`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [BrandProjectsByWorkspaceBrandsAndProjectsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `Workspace`."""
type BrandProjectsByWorkspaceBrandsAndProjectsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Project` at the end of the edge."""
  node: Project
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A `Mediamanager` edge in the connection."""
type MediamanagersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Mediamanager` at the end of the edge."""
  node: Mediamanager
}

"""A connection to a list of `Brand` values, with data from `Mediamanager`."""
type CommentBrandsByMediamanagerCommentAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CommentBrandsByMediamanagerCommentAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Mediamanager`."""
type CommentBrandsByMediamanagerCommentAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Customer` values, with data from `Mediamanager`."""
type CommentCustomersByMediamanagerCommentAndAuthorManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CommentCustomersByMediamanagerCommentAndAuthorManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Mediamanager`."""
type CommentCustomersByMediamanagerCommentAndAuthorManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Agreement` values, with data from `Mediamanager`."""
type CommentAgreementsByMediamanagerCommentAndAgreementsManyToManyConnection {
  """A list of `Agreement` objects."""
  nodes: [Agreement]!
  """A list of edges which contains the `Agreement`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CommentAgreementsByMediamanagerCommentAndAgreementsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Agreement` you could get from the connection."""
  totalCount: Int!
}

"""A `Agreement` edge in the connection, with data from `Mediamanager`."""
type CommentAgreementsByMediamanagerCommentAndAgreementsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Agreement` at the end of the edge."""
  node: Agreement
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Task` values, with data from `Mediamanager`."""
type CommentTasksByMediamanagerCommentAndTaskNameManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CommentTasksByMediamanagerCommentAndTaskNameManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Mediamanager`."""
type CommentTasksByMediamanagerCommentAndTaskNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `User` values, with data from `Mediamanager`."""
type CommentUsersByMediamanagerCommentAndMembersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CommentUsersByMediamanagerCommentAndMembersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Mediamanager`."""
type CommentUsersByMediamanagerCommentAndMembersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Product` values, with data from `Mediamanager`."""
type CommentProductsByMediamanagerCommentAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CommentProductsByMediamanagerCommentAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Mediamanager`."""
type CommentProductsByMediamanagerCommentAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Country` values, with data from `Training`."""
type CommentCountriesByTrainingCommentAndCountryManyToManyConnection {
  """A list of `Country` objects."""
  nodes: [Country]!
  """A list of edges which contains the `Country`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [CommentCountriesByTrainingCommentAndCountryManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Country` you could get from the connection."""
  totalCount: Int!
}

"""A `Country` edge in the connection, with data from `Training`."""
type CommentCountriesByTrainingCommentAndCountryManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Country` at the end of the edge."""
  node: Country
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCountry(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByCountryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `State` values, with data from `Training`."""
type CommentStatesByTrainingCommentAndStateManyToManyConnection {
  """A list of `State` objects."""
  nodes: [State]!
  """A list of edges which contains the `State`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [CommentStatesByTrainingCommentAndStateManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `State` you could get from the connection."""
  totalCount: Int!
}

"""A `State` edge in the connection, with data from `Training`."""
type CommentStatesByTrainingCommentAndStateManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `State` at the end of the edge."""
  node: State
  """Reads and enables pagination through a set of `Training`."""
  trainingsByState(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByStateList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `Product` values, with data from `Training`."""
type CommentProductsByTrainingCommentAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [CommentProductsByTrainingCommentAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Training`."""
type CommentProductsByTrainingCommentAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Training`."""
  trainingsByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A connection to a list of `Checklist` values, with data from `Training`."""
type CommentChecklistsByTrainingCommentAndChecklistsManyToManyConnection {
  """A list of `Checklist` objects."""
  nodes: [Checklist]!
  """A list of edges which contains the `Checklist`, info from the `Training`, and the cursor to aid in pagination."""
  edges: [CommentChecklistsByTrainingCommentAndChecklistsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Checklist` you could get from the connection."""
  totalCount: Int!
}

"""A `Checklist` edge in the connection, with data from `Training`."""
type CommentChecklistsByTrainingCommentAndChecklistsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Checklist` at the end of the edge."""
  node: Checklist
  """Reads and enables pagination through a set of `Training`."""
  trainingsByChecklists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection!
  """Reads and enables pagination through a set of `Training`."""
  trainingsByChecklistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]!
}

"""A `Comment` edge in the connection."""
type CommentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Comment` at the end of the edge."""
  node: Comment
}

"""A connection to a list of `NewsletterSubscriber` values."""
type NewsletterSubscribersConnection {
  """A list of `NewsletterSubscriber` objects."""
  nodes: [NewsletterSubscriber]!
  """A list of edges which contains the `NewsletterSubscriber` and cursor to aid in pagination."""
  edges: [NewsletterSubscribersEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `NewsletterSubscriber` you could get from the connection."""
  totalCount: Int!
}

type NewsletterSubscriber implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  email: String!
  customerFirstName: String
  customerLastName: String
  store: String
  status: String
  websites: String
  createdAt: Datetime
  custId: Int!
  """Reads a single `Customer` that is related to this `NewsletterSubscriber`."""
  customerByCustId: Customer
}

"""A `NewsletterSubscriber` edge in the connection."""
type NewsletterSubscribersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `NewsletterSubscriber` at the end of the edge."""
  node: NewsletterSubscriber
}

"""Methods to use when ordering `NewsletterSubscriber`."""
enum NewsletterSubscribersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  CUSTOMER_FIRST_NAME_ASC
  CUSTOMER_FIRST_NAME_DESC
  CUSTOMER_LAST_NAME_ASC
  CUSTOMER_LAST_NAME_DESC
  STORE_ASC
  STORE_DESC
  STATUS_ASC
  STATUS_DESC
  WEBSITES_ASC
  WEBSITES_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `NewsletterSubscriber` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input NewsletterSubscriberCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `customerFirstName` field."""
  customerFirstName: String
  """Checks for equality with the object’s `customerLastName` field."""
  customerLastName: String
  """Checks for equality with the object’s `store` field."""
  store: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `websites` field."""
  websites: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `custId` field."""
  custId: Int
}

"""A connection to a list of `CustomerGroup` values."""
type CustomerGroupsConnection {
  """A list of `CustomerGroup` objects."""
  nodes: [CustomerGroup]!
  """A list of edges which contains the `CustomerGroup` and cursor to aid in pagination."""
  edges: [CustomerGroupsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `CustomerGroup` you could get from the connection."""
  totalCount: Int!
}

type CustomerGroup implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  taxClass: String
  custId: Int!
  """Reads a single `Customer` that is related to this `CustomerGroup`."""
  customerByCustId: Customer
}

"""A `CustomerGroup` edge in the connection."""
type CustomerGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `CustomerGroup` at the end of the edge."""
  node: CustomerGroup
}

"""Methods to use when ordering `CustomerGroup`."""
enum CustomerGroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  TAX_CLASS_ASC
  TAX_CLASS_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CustomerGroup` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CustomerGroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `taxClass` field."""
  taxClass: String
  """Checks for equality with the object’s `custId` field."""
  custId: Int
}

"""Methods to use when ordering `Email`."""
enum EmailsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  CONTENT_ASC
  CONTENT_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  BCC_ASC
  BCC_DESC
  CC_ASC
  CC_DESC
  FROM_ASC
  FROM_DESC
  MEDIA_ASC
  MEDIA_DESC
  STAFF_ID_ASC
  STAFF_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Email` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input EmailCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `subject` field."""
  subject: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `custId` field."""
  custId: Int
  """Checks for equality with the object’s `bcc` field."""
  bcc: String
  """Checks for equality with the object’s `cc` field."""
  cc: String
  """Checks for equality with the object’s `from` field."""
  from: String
  """Checks for equality with the object’s `media` field."""
  media: String
  """Checks for equality with the object’s `staffId` field."""
  staffId: Int
}

"""A connection to a list of `CustomerPayment` values."""
type CustomerPaymentsConnection {
  """A list of `CustomerPayment` objects."""
  nodes: [CustomerPayment]!
  """A list of edges which contains the `CustomerPayment` and cursor to aid in pagination."""
  edges: [CustomerPaymentsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `CustomerPayment` you could get from the connection."""
  totalCount: Int!
}

"""A `CustomerPayment` edge in the connection."""
type CustomerPaymentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `CustomerPayment` at the end of the edge."""
  node: CustomerPayment
}

"""A connection to a list of `Message` values."""
type MessagesConnection {
  """A list of `Message` objects."""
  nodes: [Message]!
  """A list of edges which contains the `Message` and cursor to aid in pagination."""
  edges: [MessagesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

type Message implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  from: String
  createdAt: Datetime
  subject: String
  content: String
  sender: String
  custId: Int!
  media: String
  staffId: Int
  """Reads a single `Customer` that is related to this `Message`."""
  customerByCustId: Customer
  """Reads a single `User` that is related to this `Message`."""
  userByStaffId: User
}

"""A `Message` edge in the connection."""
type MessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Message` at the end of the edge."""
  node: Message
}

"""Methods to use when ordering `Message`."""
enum MessagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FROM_ASC
  FROM_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  CONTENT_ASC
  CONTENT_DESC
  SENDER_ASC
  SENDER_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  MEDIA_ASC
  MEDIA_DESC
  STAFF_ID_ASC
  STAFF_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Message` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input MessageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `from` field."""
  from: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `subject` field."""
  subject: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `sender` field."""
  sender: String
  """Checks for equality with the object’s `custId` field."""
  custId: Int
  """Checks for equality with the object’s `media` field."""
  media: String
  """Checks for equality with the object’s `staffId` field."""
  staffId: Int
}

"""A connection to a list of `Product` values, with data from `CreditMemo`."""
type CustomerProductsByCreditMemoCustIdAndProdIdManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `CreditMemo`, and the cursor to aid in pagination."""
  edges: [CustomerProductsByCreditMemoCustIdAndProdIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `CreditMemo`."""
type CustomerProductsByCreditMemoCustIdAndProdIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `CreditMemo`."""
  creditMemosByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): CreditMemosConnection!
  """Reads and enables pagination through a set of `CreditMemo`."""
  creditMemosByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): [CreditMemo!]!
}

"""A connection to a list of `Product` values, with data from `Order`."""
type CustomerProductsByOrderCustIdAndProdIdManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Order`, and the cursor to aid in pagination."""
  edges: [CustomerProductsByOrderCustIdAndProdIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Order`."""
type CustomerProductsByOrderCustIdAndProdIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Order`."""
  ordersByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): OrdersConnection!
  """Reads and enables pagination through a set of `Order`."""
  ordersByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): [Order!]!
}

"""A connection to a list of `Product` values, with data from `Quote`."""
type CustomerProductsByQuoteCustIdAndProdIdManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Quote`, and the cursor to aid in pagination."""
  edges: [CustomerProductsByQuoteCustIdAndProdIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Quote`."""
type CustomerProductsByQuoteCustIdAndProdIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Quote`."""
  quotesByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): QuotesConnection!
  """Reads and enables pagination through a set of `Quote`."""
  quotesByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): [Quote!]!
}

"""A connection to a list of `Order` values, with data from `Quote`."""
type CustomerOrdersByQuoteCustIdAndOrderIdManyToManyConnection {
  """A list of `Order` objects."""
  nodes: [Order]!
  """A list of edges which contains the `Order`, info from the `Quote`, and the cursor to aid in pagination."""
  edges: [CustomerOrdersByQuoteCustIdAndOrderIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Order` you could get from the connection."""
  totalCount: Int!
}

"""A `Order` edge in the connection, with data from `Quote`."""
type CustomerOrdersByQuoteCustIdAndOrderIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Order` at the end of the edge."""
  node: Order
  """Reads and enables pagination through a set of `Quote`."""
  quotesByOrderId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): QuotesConnection!
  """Reads and enables pagination through a set of `Quote`."""
  quotesByOrderIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): [Quote!]!
}

"""A connection to a list of `User` values, with data from `Email`."""
type CustomerUsersByEmailCustIdAndStaffIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Email`, and the cursor to aid in pagination."""
  edges: [CustomerUsersByEmailCustIdAndStaffIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Email`."""
type CustomerUsersByEmailCustIdAndStaffIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Email`."""
  emailsByStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): EmailsConnection!
  """Reads and enables pagination through a set of `Email`."""
  emailsByStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): [Email!]!
}

"""A connection to a list of `Product` values, with data from `Return`."""
type CustomerProductsByReturnCustIdAndProdIdManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Return`, and the cursor to aid in pagination."""
  edges: [CustomerProductsByReturnCustIdAndProdIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Return`."""
type CustomerProductsByReturnCustIdAndProdIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Return`."""
  returnsByProdId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): ReturnsConnection!
  """Reads and enables pagination through a set of `Return`."""
  returnsByProdIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): [Return!]!
}

"""A connection to a list of `User` values, with data from `Project`."""
type CustomerUsersByProjectCustIdAndStaffIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [CustomerUsersByProjectCustIdAndStaffIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Project`."""
type CustomerUsersByProjectCustIdAndStaffIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Project`."""
  projectsByStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `Task` values, with data from `Project`."""
type CustomerTasksByProjectCustIdAndTaskIdManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [CustomerTasksByProjectCustIdAndTaskIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Project`."""
type CustomerTasksByProjectCustIdAndTaskIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Project`."""
  projectsByTaskId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByTaskIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `Ticketing` values, with data from `Project`."""
type CustomerTicketingsByProjectCustIdAndTicketIdManyToManyConnection {
  """A list of `Ticketing` objects."""
  nodes: [Ticketing]!
  """A list of edges which contains the `Ticketing`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [CustomerTicketingsByProjectCustIdAndTicketIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Ticketing` you could get from the connection."""
  totalCount: Int!
}

"""A `Ticketing` edge in the connection, with data from `Project`."""
type CustomerTicketingsByProjectCustIdAndTicketIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Ticketing` at the end of the edge."""
  node: Ticketing
  """Reads and enables pagination through a set of `Project`."""
  projectsByTicketId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByTicketIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `User` values, with data from `Message`."""
type CustomerUsersByMessageCustIdAndStaffIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Message`, and the cursor to aid in pagination."""
  edges: [CustomerUsersByMessageCustIdAndStaffIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Message`."""
type CustomerUsersByMessageCustIdAndStaffIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Message`."""
  messagesByStaffId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): MessagesConnection!
  """Reads and enables pagination through a set of `Message`."""
  messagesByStaffIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): [Message!]!
}

"""A connection to a list of `Brand` values, with data from `Mediamanager`."""
type CustomerBrandsByMediamanagerAuthorAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CustomerBrandsByMediamanagerAuthorAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Mediamanager`."""
type CustomerBrandsByMediamanagerAuthorAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Agreement` values, with data from `Mediamanager`."""
type CustomerAgreementsByMediamanagerAuthorAndAgreementsManyToManyConnection {
  """A list of `Agreement` objects."""
  nodes: [Agreement]!
  """A list of edges which contains the `Agreement`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CustomerAgreementsByMediamanagerAuthorAndAgreementsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Agreement` you could get from the connection."""
  totalCount: Int!
}

"""A `Agreement` edge in the connection, with data from `Mediamanager`."""
type CustomerAgreementsByMediamanagerAuthorAndAgreementsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Agreement` at the end of the edge."""
  node: Agreement
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Comment` values, with data from `Mediamanager`."""
type CustomerCommentsByMediamanagerAuthorAndCommentManyToManyConnection {
  """A list of `Comment` objects."""
  nodes: [Comment]!
  """A list of edges which contains the `Comment`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CustomerCommentsByMediamanagerAuthorAndCommentManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection, with data from `Mediamanager`."""
type CustomerCommentsByMediamanagerAuthorAndCommentManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Comment` at the end of the edge."""
  node: Comment
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Task` values, with data from `Mediamanager`."""
type CustomerTasksByMediamanagerAuthorAndTaskNameManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CustomerTasksByMediamanagerAuthorAndTaskNameManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Mediamanager`."""
type CustomerTasksByMediamanagerAuthorAndTaskNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `User` values, with data from `Mediamanager`."""
type CustomerUsersByMediamanagerAuthorAndMembersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CustomerUsersByMediamanagerAuthorAndMembersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Mediamanager`."""
type CustomerUsersByMediamanagerAuthorAndMembersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByMembersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Product` values, with data from `Mediamanager`."""
type CustomerProductsByMediamanagerAuthorAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [CustomerProductsByMediamanagerAuthorAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Mediamanager`."""
type CustomerProductsByMediamanagerAuthorAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `User` values, with data from `Workspace`."""
type CustomerUsersByWorkspaceCustomersAndUsersManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!
  """A list of edges which contains the `User`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CustomerUsersByWorkspaceCustomersAndUsersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Workspace`."""
type CustomerUsersByWorkspaceCustomersAndUsersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Product` values, with data from `Workspace`."""
type CustomerProductsByWorkspaceCustomersAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CustomerProductsByWorkspaceCustomersAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Workspace`."""
type CustomerProductsByWorkspaceCustomersAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Task` values, with data from `Workspace`."""
type CustomerTasksByWorkspaceCustomersAndTasksManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CustomerTasksByWorkspaceCustomersAndTasksManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Workspace`."""
type CustomerTasksByWorkspaceCustomersAndTasksManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Brand` values, with data from `Workspace`."""
type CustomerBrandsByWorkspaceCustomersAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CustomerBrandsByWorkspaceCustomersAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Workspace`."""
type CustomerBrandsByWorkspaceCustomersAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Shop` values, with data from `Workspace`."""
type CustomerShopsByWorkspaceCustomersAndShopsManyToManyConnection {
  """A list of `Shop` objects."""
  nodes: [Shop]!
  """A list of edges which contains the `Shop`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CustomerShopsByWorkspaceCustomersAndShopsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Shop` you could get from the connection."""
  totalCount: Int!
}

"""A `Shop` edge in the connection, with data from `Workspace`."""
type CustomerShopsByWorkspaceCustomersAndShopsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Shop` at the end of the edge."""
  node: Shop
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Category` values, with data from `Workspace`."""
type CustomerCategoriesByWorkspaceCustomersAndCategoryManyToManyConnection {
  """A list of `Category` objects."""
  nodes: [Category]!
  """A list of edges which contains the `Category`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CustomerCategoriesByWorkspaceCustomersAndCategoryManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection, with data from `Workspace`."""
type CustomerCategoriesByWorkspaceCustomersAndCategoryManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Category` at the end of the edge."""
  node: Category
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Project` values, with data from `Workspace`."""
type CustomerProjectsByWorkspaceCustomersAndProjectsManyToManyConnection {
  """A list of `Project` objects."""
  nodes: [Project]!
  """A list of edges which contains the `Project`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [CustomerProjectsByWorkspaceCustomersAndProjectsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `Workspace`."""
type CustomerProjectsByWorkspaceCustomersAndProjectsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Project` at the end of the edge."""
  node: Project
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A `Email` edge in the connection."""
type EmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Email` at the end of the edge."""
  node: Email
}

"""A connection to a list of `Customer` values, with data from `Email`."""
type UserCustomersByEmailStaffIdAndCustIdManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Email`, and the cursor to aid in pagination."""
  edges: [UserCustomersByEmailStaffIdAndCustIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Email`."""
type UserCustomersByEmailStaffIdAndCustIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Email`."""
  emailsByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): EmailsConnection!
  """Reads and enables pagination through a set of `Email`."""
  emailsByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): [Email!]!
}

"""A connection to a list of `Customer` values, with data from `Project`."""
type UserCustomersByProjectStaffIdAndCustIdManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [UserCustomersByProjectStaffIdAndCustIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Project`."""
type UserCustomersByProjectStaffIdAndCustIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Project`."""
  projectsByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `Task` values, with data from `Project`."""
type UserTasksByProjectStaffIdAndTaskIdManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [UserTasksByProjectStaffIdAndTaskIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Project`."""
type UserTasksByProjectStaffIdAndTaskIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Project`."""
  projectsByTaskId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByTaskIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `Ticketing` values, with data from `Project`."""
type UserTicketingsByProjectStaffIdAndTicketIdManyToManyConnection {
  """A list of `Ticketing` objects."""
  nodes: [Ticketing]!
  """A list of edges which contains the `Ticketing`, info from the `Project`, and the cursor to aid in pagination."""
  edges: [UserTicketingsByProjectStaffIdAndTicketIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Ticketing` you could get from the connection."""
  totalCount: Int!
}

"""A `Ticketing` edge in the connection, with data from `Project`."""
type UserTicketingsByProjectStaffIdAndTicketIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Ticketing` at the end of the edge."""
  node: Ticketing
  """Reads and enables pagination through a set of `Project`."""
  projectsByTicketId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection!
  """Reads and enables pagination through a set of `Project`."""
  projectsByTicketIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]!
}

"""A connection to a list of `Customer` values, with data from `Message`."""
type UserCustomersByMessageStaffIdAndCustIdManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Message`, and the cursor to aid in pagination."""
  edges: [UserCustomersByMessageStaffIdAndCustIdManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Message`."""
type UserCustomersByMessageStaffIdAndCustIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Message`."""
  messagesByCustId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): MessagesConnection!
  """Reads and enables pagination through a set of `Message`."""
  messagesByCustIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): [Message!]!
}

"""A connection to a list of `Brand` values, with data from `Mediamanager`."""
type UserBrandsByMediamanagerMembersAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [UserBrandsByMediamanagerMembersAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Mediamanager`."""
type UserBrandsByMediamanagerMembersAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Customer` values, with data from `Mediamanager`."""
type UserCustomersByMediamanagerMembersAndAuthorManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [UserCustomersByMediamanagerMembersAndAuthorManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Mediamanager`."""
type UserCustomersByMediamanagerMembersAndAuthorManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthor(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAuthorList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Agreement` values, with data from `Mediamanager`."""
type UserAgreementsByMediamanagerMembersAndAgreementsManyToManyConnection {
  """A list of `Agreement` objects."""
  nodes: [Agreement]!
  """A list of edges which contains the `Agreement`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [UserAgreementsByMediamanagerMembersAndAgreementsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Agreement` you could get from the connection."""
  totalCount: Int!
}

"""A `Agreement` edge in the connection, with data from `Mediamanager`."""
type UserAgreementsByMediamanagerMembersAndAgreementsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Agreement` at the end of the edge."""
  node: Agreement
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Comment` values, with data from `Mediamanager`."""
type UserCommentsByMediamanagerMembersAndCommentManyToManyConnection {
  """A list of `Comment` objects."""
  nodes: [Comment]!
  """A list of edges which contains the `Comment`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [UserCommentsByMediamanagerMembersAndCommentManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection, with data from `Mediamanager`."""
type UserCommentsByMediamanagerMembersAndCommentManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Comment` at the end of the edge."""
  node: Comment
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByComment(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByCommentList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Task` values, with data from `Mediamanager`."""
type UserTasksByMediamanagerMembersAndTaskNameManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [UserTasksByMediamanagerMembersAndTaskNameManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Mediamanager`."""
type UserTasksByMediamanagerMembersAndTaskNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskName(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByTaskNameList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Product` values, with data from `Mediamanager`."""
type UserProductsByMediamanagerMembersAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Mediamanager`, and the cursor to aid in pagination."""
  edges: [UserProductsByMediamanagerMembersAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Mediamanager`."""
type UserProductsByMediamanagerMembersAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection!
  """Reads and enables pagination through a set of `Mediamanager`."""
  mediamanagersByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]!
}

"""A connection to a list of `Customer` values, with data from `Workspace`."""
type UserCustomersByWorkspaceUsersAndCustomersManyToManyConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [UserCustomersByWorkspaceUsersAndCustomersManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection, with data from `Workspace`."""
type UserCustomersByWorkspaceUsersAndCustomersManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Product` values, with data from `Workspace`."""
type UserProductsByWorkspaceUsersAndProductsManyToManyConnection {
  """A list of `Product` objects."""
  nodes: [Product]!
  """A list of edges which contains the `Product`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [UserProductsByWorkspaceUsersAndProductsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection, with data from `Workspace`."""
type UserProductsByWorkspaceUsersAndProductsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Product` at the end of the edge."""
  node: Product
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Task` values, with data from `Workspace`."""
type UserTasksByWorkspaceUsersAndTasksManyToManyConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [UserTasksByWorkspaceUsersAndTasksManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection, with data from `Workspace`."""
type UserTasksByWorkspaceUsersAndTasksManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Brand` values, with data from `Workspace`."""
type UserBrandsByWorkspaceUsersAndBrandsManyToManyConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!
  """A list of edges which contains the `Brand`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [UserBrandsByWorkspaceUsersAndBrandsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Workspace`."""
type UserBrandsByWorkspaceUsersAndBrandsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Brand` at the end of the edge."""
  node: Brand
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Shop` values, with data from `Workspace`."""
type UserShopsByWorkspaceUsersAndShopsManyToManyConnection {
  """A list of `Shop` objects."""
  nodes: [Shop]!
  """A list of edges which contains the `Shop`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [UserShopsByWorkspaceUsersAndShopsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Shop` you could get from the connection."""
  totalCount: Int!
}

"""A `Shop` edge in the connection, with data from `Workspace`."""
type UserShopsByWorkspaceUsersAndShopsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Shop` at the end of the edge."""
  node: Shop
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Category` values, with data from `Workspace`."""
type UserCategoriesByWorkspaceUsersAndCategoryManyToManyConnection {
  """A list of `Category` objects."""
  nodes: [Category]!
  """A list of edges which contains the `Category`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [UserCategoriesByWorkspaceUsersAndCategoryManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection, with data from `Workspace`."""
type UserCategoriesByWorkspaceUsersAndCategoryManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Category` at the end of the edge."""
  node: Category
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategory(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByCategoryList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A connection to a list of `Project` values, with data from `Workspace`."""
type UserProjectsByWorkspaceUsersAndProjectsManyToManyConnection {
  """A list of `Project` objects."""
  nodes: [Project]!
  """A list of edges which contains the `Project`, info from the `Workspace`, and the cursor to aid in pagination."""
  edges: [UserProjectsByWorkspaceUsersAndProjectsManyToManyEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `Workspace`."""
type UserProjectsByWorkspaceUsersAndProjectsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Project` at the end of the edge."""
  node: Project
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection!
  """Reads and enables pagination through a set of `Workspace`."""
  workspacesByProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User
}

"""A connection to a list of `_PrismaMigration` values."""
type _PrismaMigrationsConnection {
  """A list of `_PrismaMigration` objects."""
  nodes: [_PrismaMigration]!
  """A list of edges which contains the `_PrismaMigration` and cursor to aid in pagination."""
  edges: [_PrismaMigrationsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_PrismaMigration` you could get from the connection."""
  totalCount: Int!
}

type _PrismaMigration implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: String!
  checksum: String!
  finishedAt: Datetime
  migrationName: String!
  logs: String
  rolledBackAt: Datetime
  startedAt: Datetime!
  appliedStepsCount: Int!
}

"""A `_PrismaMigration` edge in the connection."""
type _PrismaMigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_PrismaMigration` at the end of the edge."""
  node: _PrismaMigration
}

"""Methods to use when ordering `_PrismaMigration`."""
enum _PrismaMigrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CHECKSUM_ASC
  CHECKSUM_DESC
  FINISHED_AT_ASC
  FINISHED_AT_DESC
  MIGRATION_NAME_ASC
  MIGRATION_NAME_DESC
  LOGS_ASC
  LOGS_DESC
  ROLLED_BACK_AT_ASC
  ROLLED_BACK_AT_DESC
  STARTED_AT_ASC
  STARTED_AT_DESC
  APPLIED_STEPS_COUNT_ASC
  APPLIED_STEPS_COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `_PrismaMigration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _PrismaMigrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: String
  """Checks for equality with the object’s `checksum` field."""
  checksum: String
  """Checks for equality with the object’s `finishedAt` field."""
  finishedAt: Datetime
  """Checks for equality with the object’s `migrationName` field."""
  migrationName: String
  """Checks for equality with the object’s `logs` field."""
  logs: String
  """Checks for equality with the object’s `rolledBackAt` field."""
  rolledBackAt: Datetime
  """Checks for equality with the object’s `startedAt` field."""
  startedAt: Datetime
  """Checks for equality with the object’s `appliedStepsCount` field."""
  appliedStepsCount: Int
}

"""A connection to a list of `Account` values."""
type AccountsConnection {
  """A list of `Account` objects."""
  nodes: [Account]!
  """A list of edges which contains the `Account` and cursor to aid in pagination."""
  edges: [AccountsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Account` you could get from the connection."""
  totalCount: Int!
}

type Account implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  website: String
  officePhone: String
  fax: String
  email: String
  address: String
  postalcode: String
  city: String
  state: String
  country: String
  assignedTo: String
  altAddress: String
  altPostalcode: String
  altCity: String
  altState: String
  altCountry: String
  type: String
  industry: String
  employees: String
  annualRevenue: String
  memberOf: String
  campaign: String
}

"""A `Account` edge in the connection."""
type AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Account` at the end of the edge."""
  node: Account
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  OFFICE_PHONE_ASC
  OFFICE_PHONE_DESC
  FAX_ASC
  FAX_DESC
  EMAIL_ASC
  EMAIL_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  POSTALCODE_ASC
  POSTALCODE_DESC
  CITY_ASC
  CITY_DESC
  STATE_ASC
  STATE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  ASSIGNED_TO_ASC
  ASSIGNED_TO_DESC
  ALT_ADDRESS_ASC
  ALT_ADDRESS_DESC
  ALT_POSTALCODE_ASC
  ALT_POSTALCODE_DESC
  ALT_CITY_ASC
  ALT_CITY_DESC
  ALT_STATE_ASC
  ALT_STATE_DESC
  ALT_COUNTRY_ASC
  ALT_COUNTRY_DESC
  TYPE_ASC
  TYPE_DESC
  INDUSTRY_ASC
  INDUSTRY_DESC
  EMPLOYEES_ASC
  EMPLOYEES_DESC
  ANNUAL_REVENUE_ASC
  ANNUAL_REVENUE_DESC
  MEMBER_OF_ASC
  MEMBER_OF_DESC
  CAMPAIGN_ASC
  CAMPAIGN_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input AccountCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `website` field."""
  website: String
  """Checks for equality with the object’s `officePhone` field."""
  officePhone: String
  """Checks for equality with the object’s `fax` field."""
  fax: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `address` field."""
  address: String
  """Checks for equality with the object’s `postalcode` field."""
  postalcode: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `assignedTo` field."""
  assignedTo: String
  """Checks for equality with the object’s `altAddress` field."""
  altAddress: String
  """Checks for equality with the object’s `altPostalcode` field."""
  altPostalcode: String
  """Checks for equality with the object’s `altCity` field."""
  altCity: String
  """Checks for equality with the object’s `altState` field."""
  altState: String
  """Checks for equality with the object’s `altCountry` field."""
  altCountry: String
  """Checks for equality with the object’s `type` field."""
  type: String
  """Checks for equality with the object’s `industry` field."""
  industry: String
  """Checks for equality with the object’s `employees` field."""
  employees: String
  """Checks for equality with the object’s `annualRevenue` field."""
  annualRevenue: String
  """Checks for equality with the object’s `memberOf` field."""
  memberOf: String
  """Checks for equality with the object’s `campaign` field."""
  campaign: String
}

"""A connection to a list of `Agreement` values."""
type AgreementsConnection {
  """A list of `Agreement` objects."""
  nodes: [Agreement]!
  """A list of edges which contains the `Agreement` and cursor to aid in pagination."""
  edges: [AgreementsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Agreement` you could get from the connection."""
  totalCount: Int!
}

"""A `Agreement` edge in the connection."""
type AgreementsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Agreement` at the end of the edge."""
  node: Agreement
}

"""A connection to a list of `Analytic` values."""
type AnalyticsConnection {
  """A list of `Analytic` objects."""
  nodes: [Analytic]!
  """A list of edges which contains the `Analytic` and cursor to aid in pagination."""
  edges: [AnalyticsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Analytic` you could get from the connection."""
  totalCount: Int!
}

type Analytic implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  country: String
  shareData: String
  websiteName: String
  clientId: String
  clientSecret: String
  trackingId: String
  propertyName: String
  url: String
  defaultView: String
  category: String
  propertyHit: String
  trackingCode: String
  dataCollection: Boolean
  dataRetention: Boolean
  searchAnalytics: String
}

"""A `Analytic` edge in the connection."""
type AnalyticsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Analytic` at the end of the edge."""
  node: Analytic
}

"""Methods to use when ordering `Analytic`."""
enum AnalyticsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  SHARE_DATA_ASC
  SHARE_DATA_DESC
  WEBSITE_NAME_ASC
  WEBSITE_NAME_DESC
  CLIENT_ID_ASC
  CLIENT_ID_DESC
  CLIENT_SECRET_ASC
  CLIENT_SECRET_DESC
  TRACKING_ID_ASC
  TRACKING_ID_DESC
  PROPERTY_NAME_ASC
  PROPERTY_NAME_DESC
  URL_ASC
  URL_DESC
  DEFAULT_VIEW_ASC
  DEFAULT_VIEW_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  PROPERTY_HIT_ASC
  PROPERTY_HIT_DESC
  TRACKING_CODE_ASC
  TRACKING_CODE_DESC
  DATA_COLLECTION_ASC
  DATA_COLLECTION_DESC
  DATA_RETENTION_ASC
  DATA_RETENTION_DESC
  SEARCH_ANALYTICS_ASC
  SEARCH_ANALYTICS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Analytic` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AnalyticCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `shareData` field."""
  shareData: String
  """Checks for equality with the object’s `websiteName` field."""
  websiteName: String
  """Checks for equality with the object’s `clientId` field."""
  clientId: String
  """Checks for equality with the object’s `clientSecret` field."""
  clientSecret: String
  """Checks for equality with the object’s `trackingId` field."""
  trackingId: String
  """Checks for equality with the object’s `propertyName` field."""
  propertyName: String
  """Checks for equality with the object’s `url` field."""
  url: String
  """Checks for equality with the object’s `defaultView` field."""
  defaultView: String
  """Checks for equality with the object’s `category` field."""
  category: String
  """Checks for equality with the object’s `propertyHit` field."""
  propertyHit: String
  """Checks for equality with the object’s `trackingCode` field."""
  trackingCode: String
  """Checks for equality with the object’s `dataCollection` field."""
  dataCollection: Boolean
  """Checks for equality with the object’s `dataRetention` field."""
  dataRetention: Boolean
  """Checks for equality with the object’s `searchAnalytics` field."""
  searchAnalytics: String
}

"""A connection to a list of `Apitoken` values."""
type ApitokensConnection {
  """A list of `Apitoken` objects."""
  nodes: [Apitoken]!
  """A list of edges which contains the `Apitoken` and cursor to aid in pagination."""
  edges: [ApitokensEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Apitoken` you could get from the connection."""
  totalCount: Int!
}

type Apitoken implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String!
  tokenType: String
  description: String
  token: BigInt!
}

"""A `Apitoken` edge in the connection."""
type ApitokensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Apitoken` at the end of the edge."""
  node: Apitoken
}

"""Methods to use when ordering `Apitoken`."""
enum ApitokensOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  TOKEN_TYPE_ASC
  TOKEN_TYPE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TOKEN_ASC
  TOKEN_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Apitoken` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApitokenCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `tokenType` field."""
  tokenType: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `token` field."""
  token: BigInt
}

"""A connection to a list of `Article` values."""
type ArticlesConnection {
  """A list of `Article` objects."""
  nodes: [Article]!
  """A list of edges which contains the `Article` and cursor to aid in pagination."""
  edges: [ArticlesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Article` you could get from the connection."""
  totalCount: Int!
}

type Article implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  excerpt: String!
  content: String
  image: String
  categories: String
  customers: String
  users: String
  published: String
  custId: Int!
  isPublic: String
  metaDescription: String
  metaName: String
  metaUrl: String
  tags: String
}

"""A `Article` edge in the connection."""
type ArticlesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Article` at the end of the edge."""
  node: Article
}

"""Methods to use when ordering `Article`."""
enum ArticlesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EXCERPT_ASC
  EXCERPT_DESC
  CONTENT_ASC
  CONTENT_DESC
  IMAGE_ASC
  IMAGE_DESC
  CATEGORIES_ASC
  CATEGORIES_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  USERS_ASC
  USERS_DESC
  PUBLISHED_ASC
  PUBLISHED_DESC
  CUST_ID_ASC
  CUST_ID_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  META_DESCRIPTION_ASC
  META_DESCRIPTION_DESC
  META_NAME_ASC
  META_NAME_DESC
  META_URL_ASC
  META_URL_DESC
  TAGS_ASC
  TAGS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Article` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input ArticleCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `excerpt` field."""
  excerpt: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `categories` field."""
  categories: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `users` field."""
  users: String
  """Checks for equality with the object’s `published` field."""
  published: String
  """Checks for equality with the object’s `custId` field."""
  custId: Int
  """Checks for equality with the object’s `isPublic` field."""
  isPublic: String
  """Checks for equality with the object’s `metaDescription` field."""
  metaDescription: String
  """Checks for equality with the object’s `metaName` field."""
  metaName: String
  """Checks for equality with the object’s `metaUrl` field."""
  metaUrl: String
  """Checks for equality with the object’s `tags` field."""
  tags: String
}

"""A connection to a list of `CartPriceRule` values."""
type CartPriceRulesConnection {
  """A list of `CartPriceRule` objects."""
  nodes: [CartPriceRule]!
  """A list of edges which contains the `CartPriceRule` and cursor to aid in pagination."""
  edges: [CartPriceRulesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `CartPriceRule` you could get from the connection."""
  totalCount: Int!
}

type CartPriceRule implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  rule: String
  description: String
  active: Boolean
  coupon: String
  usesPerCustomer: String
  priority: String
  startDate: Date
  endDate: Date
  status: String
  website: String
  actionsApply: String
  actionsDiscountAmount: BigFloat
  actionsDiscardSubsequentRules: Boolean
  actionsMaxQtyDiscountIsAppliedTo: BigFloat
  actionsDiscountQtyStep: BigFloat
  actionsApplyShippingAmount: Boolean
}

"""The day, does not include a time."""
scalar Date

"""A `CartPriceRule` edge in the connection."""
type CartPriceRulesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `CartPriceRule` at the end of the edge."""
  node: CartPriceRule
}

"""Methods to use when ordering `CartPriceRule`."""
enum CartPriceRulesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  RULE_ASC
  RULE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  COUPON_ASC
  COUPON_DESC
  USES_PER_CUSTOMER_ASC
  USES_PER_CUSTOMER_DESC
  PRIORITY_ASC
  PRIORITY_DESC
  START_DATE_ASC
  START_DATE_DESC
  END_DATE_ASC
  END_DATE_DESC
  STATUS_ASC
  STATUS_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  ACTIONS_APPLY_ASC
  ACTIONS_APPLY_DESC
  ACTIONS_DISCOUNT_AMOUNT_ASC
  ACTIONS_DISCOUNT_AMOUNT_DESC
  ACTIONS_DISCARD_SUBSEQUENT_RULES_ASC
  ACTIONS_DISCARD_SUBSEQUENT_RULES_DESC
  ACTIONS_MAX_QTY_DISCOUNT_IS_APPLIED_TO_ASC
  ACTIONS_MAX_QTY_DISCOUNT_IS_APPLIED_TO_DESC
  ACTIONS_DISCOUNT_QTY_STEP_ASC
  ACTIONS_DISCOUNT_QTY_STEP_DESC
  ACTIONS_APPLY_SHIPPING_AMOUNT_ASC
  ACTIONS_APPLY_SHIPPING_AMOUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CartPriceRule` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CartPriceRuleCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `rule` field."""
  rule: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `active` field."""
  active: Boolean
  """Checks for equality with the object’s `coupon` field."""
  coupon: String
  """Checks for equality with the object’s `usesPerCustomer` field."""
  usesPerCustomer: String
  """Checks for equality with the object’s `priority` field."""
  priority: String
  """Checks for equality with the object’s `startDate` field."""
  startDate: Date
  """Checks for equality with the object’s `endDate` field."""
  endDate: Date
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `website` field."""
  website: String
  """Checks for equality with the object’s `actionsApply` field."""
  actionsApply: String
  """Checks for equality with the object’s `actionsDiscountAmount` field."""
  actionsDiscountAmount: BigFloat
  """Checks for equality with the object’s `actionsDiscardSubsequentRules` field."""
  actionsDiscardSubsequentRules: Boolean
  """Checks for equality with the object’s `actionsMaxQtyDiscountIsAppliedTo` field."""
  actionsMaxQtyDiscountIsAppliedTo: BigFloat
  """Checks for equality with the object’s `actionsDiscountQtyStep` field."""
  actionsDiscountQtyStep: BigFloat
  """Checks for equality with the object’s `actionsApplyShippingAmount` field."""
  actionsApplyShippingAmount: Boolean
}

"""A connection to a list of `Case` values."""
type CasesConnection {
  """A list of `Case` objects."""
  nodes: [Case]!
  """A list of edges which contains the `Case` and cursor to aid in pagination."""
  edges: [CasesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Case` you could get from the connection."""
  totalCount: Int!
}

type Case implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  caseNumber: Int
  state: String
  type: String
  subject: String
  description: String
  resolution: String
  priority: String
  status: String
  accountName: String
  assignedTo: String
  dateModified: Datetime
}

"""A `Case` edge in the connection."""
type CasesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Case` at the end of the edge."""
  node: Case
}

"""Methods to use when ordering `Case`."""
enum CasesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CASE_NUMBER_ASC
  CASE_NUMBER_DESC
  STATE_ASC
  STATE_DESC
  TYPE_ASC
  TYPE_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  RESOLUTION_ASC
  RESOLUTION_DESC
  PRIORITY_ASC
  PRIORITY_DESC
  STATUS_ASC
  STATUS_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  ASSIGNED_TO_ASC
  ASSIGNED_TO_DESC
  DATE_MODIFIED_ASC
  DATE_MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Case` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input CaseCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `caseNumber` field."""
  caseNumber: Int
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `type` field."""
  type: String
  """Checks for equality with the object’s `subject` field."""
  subject: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `resolution` field."""
  resolution: String
  """Checks for equality with the object’s `priority` field."""
  priority: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `accountName` field."""
  accountName: String
  """Checks for equality with the object’s `assignedTo` field."""
  assignedTo: String
  """Checks for equality with the object’s `dateModified` field."""
  dateModified: Datetime
}

"""A connection to a list of `CatalogPriceRule` values."""
type CatalogPriceRulesConnection {
  """A list of `CatalogPriceRule` objects."""
  nodes: [CatalogPriceRule]!
  """A list of edges which contains the `CatalogPriceRule` and cursor to aid in pagination."""
  edges: [CatalogPriceRulesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `CatalogPriceRule` you could get from the connection."""
  totalCount: Int!
}

type CatalogPriceRule implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  rule: String
  description: String
  active: Boolean
  customerGroups: String
  priority: String
  startDate: Date
  endDate: Date
  status: String
  website: String
  actionsApply: String
  actionsDiscountAmount: BigFloat
  actionsDiscardSubsequentRules: Boolean
}

"""A `CatalogPriceRule` edge in the connection."""
type CatalogPriceRulesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `CatalogPriceRule` at the end of the edge."""
  node: CatalogPriceRule
}

"""Methods to use when ordering `CatalogPriceRule`."""
enum CatalogPriceRulesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  RULE_ASC
  RULE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  CUSTOMER_GROUPS_ASC
  CUSTOMER_GROUPS_DESC
  PRIORITY_ASC
  PRIORITY_DESC
  START_DATE_ASC
  START_DATE_DESC
  END_DATE_ASC
  END_DATE_DESC
  STATUS_ASC
  STATUS_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  ACTIONS_APPLY_ASC
  ACTIONS_APPLY_DESC
  ACTIONS_DISCOUNT_AMOUNT_ASC
  ACTIONS_DISCOUNT_AMOUNT_DESC
  ACTIONS_DISCARD_SUBSEQUENT_RULES_ASC
  ACTIONS_DISCARD_SUBSEQUENT_RULES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CatalogPriceRule` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CatalogPriceRuleCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `rule` field."""
  rule: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `active` field."""
  active: Boolean
  """Checks for equality with the object’s `customerGroups` field."""
  customerGroups: String
  """Checks for equality with the object’s `priority` field."""
  priority: String
  """Checks for equality with the object’s `startDate` field."""
  startDate: Date
  """Checks for equality with the object’s `endDate` field."""
  endDate: Date
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `website` field."""
  website: String
  """Checks for equality with the object’s `actionsApply` field."""
  actionsApply: String
  """Checks for equality with the object’s `actionsDiscountAmount` field."""
  actionsDiscountAmount: BigFloat
  """Checks for equality with the object’s `actionsDiscardSubsequentRules` field."""
  actionsDiscardSubsequentRules: Boolean
}

"""A connection to a list of `Category` values."""
type CategoriesConnection {
  """A list of `Category` objects."""
  nodes: [Category]!
  """A list of edges which contains the `Category` and cursor to aid in pagination."""
  edges: [CategoriesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection."""
type CategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Category` at the end of the edge."""
  node: Category
}

"""A connection to a list of `Channel` values."""
type ChannelsConnection {
  """A list of `Channel` objects."""
  nodes: [Channel]!
  """A list of edges which contains the `Channel` and cursor to aid in pagination."""
  edges: [ChannelsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Channel` you could get from the connection."""
  totalCount: Int!
}

type Channel implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  code: String
  name: String
  currency: String
  defaultLang: String
  includeTax: String
  defaultZone: String
  defaultShipping: String
  clientId: String
  clientSecret: String
}

"""A `Channel` edge in the connection."""
type ChannelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Channel` at the end of the edge."""
  node: Channel
}

"""Methods to use when ordering `Channel`."""
enum ChannelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CODE_ASC
  CODE_DESC
  NAME_ASC
  NAME_DESC
  CURRENCY_ASC
  CURRENCY_DESC
  DEFAULT_LANG_ASC
  DEFAULT_LANG_DESC
  INCLUDE_TAX_ASC
  INCLUDE_TAX_DESC
  DEFAULT_ZONE_ASC
  DEFAULT_ZONE_DESC
  DEFAULT_SHIPPING_ASC
  DEFAULT_SHIPPING_DESC
  CLIENT_ID_ASC
  CLIENT_ID_DESC
  CLIENT_SECRET_ASC
  CLIENT_SECRET_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Channel` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input ChannelCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `code` field."""
  code: String
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `currency` field."""
  currency: String
  """Checks for equality with the object’s `defaultLang` field."""
  defaultLang: String
  """Checks for equality with the object’s `includeTax` field."""
  includeTax: String
  """Checks for equality with the object’s `defaultZone` field."""
  defaultZone: String
  """Checks for equality with the object’s `defaultShipping` field."""
  defaultShipping: String
  """Checks for equality with the object’s `clientId` field."""
  clientId: String
  """Checks for equality with the object’s `clientSecret` field."""
  clientSecret: String
}

"""A connection to a list of `Checklist` values."""
type ChecklistsConnection {
  """A list of `Checklist` objects."""
  nodes: [Checklist]!
  """A list of edges which contains the `Checklist` and cursor to aid in pagination."""
  edges: [ChecklistsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Checklist` you could get from the connection."""
  totalCount: Int!
}

"""A `Checklist` edge in the connection."""
type ChecklistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Checklist` at the end of the edge."""
  node: Checklist
}

"""A connection to a list of `City` values."""
type CitiesConnection {
  """A list of `City` objects."""
  nodes: [City]!
  """A list of edges which contains the `City` and cursor to aid in pagination."""
  edges: [CitiesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `City` you could get from the connection."""
  totalCount: Int!
}

type City implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  description: String
  state: String
  country: String
  postalCode: String
  image: String
}

"""A `City` edge in the connection."""
type CitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `City` at the end of the edge."""
  node: City
}

"""Methods to use when ordering `City`."""
enum CitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  STATE_ASC
  STATE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  POSTAL_CODE_ASC
  POSTAL_CODE_DESC
  IMAGE_ASC
  IMAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `City` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input CityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `postalCode` field."""
  postalCode: String
  """Checks for equality with the object’s `image` field."""
  image: String
}

"""A connection to a list of `Collection` values."""
type CollectionsConnection {
  """A list of `Collection` objects."""
  nodes: [Collection]!
  """A list of edges which contains the `Collection` and cursor to aid in pagination."""
  edges: [CollectionsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Collection` you could get from the connection."""
  totalCount: Int!
}

type Collection implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  description: String
  image: String
  product: String
  metaTitle: String
  metaKeywords: String
  metaDescription: String
}

"""A `Collection` edge in the connection."""
type CollectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Collection` at the end of the edge."""
  node: Collection
}

"""Methods to use when ordering `Collection`."""
enum CollectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  IMAGE_ASC
  IMAGE_DESC
  PRODUCT_ASC
  PRODUCT_DESC
  META_TITLE_ASC
  META_TITLE_DESC
  META_KEYWORDS_ASC
  META_KEYWORDS_DESC
  META_DESCRIPTION_ASC
  META_DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Collection` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CollectionCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `product` field."""
  product: String
  """Checks for equality with the object’s `metaTitle` field."""
  metaTitle: String
  """Checks for equality with the object’s `metaKeywords` field."""
  metaKeywords: String
  """Checks for equality with the object’s `metaDescription` field."""
  metaDescription: String
}

"""A connection to a list of `ContentType` values."""
type ContentTypesConnection {
  """A list of `ContentType` objects."""
  nodes: [ContentType]!
  """A list of edges which contains the `ContentType` and cursor to aid in pagination."""
  edges: [ContentTypesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `ContentType` you could get from the connection."""
  totalCount: Int!
}

type ContentType implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  text: String
  number: BigFloat
  json: JSON
  link: String
  email: String
  uid: UUID
  date: Date
  time: Time
  timestamp: Datetime
  boolean: Boolean
  richText: String
  password: String
  media: String
  databaseName: String
}

"""A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122)."""
scalar UUID

"""The exact time of day, does not include the date. May or may not have a timezone offset."""
scalar Time

"""A `ContentType` edge in the connection."""
type ContentTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `ContentType` at the end of the edge."""
  node: ContentType
}

"""Methods to use when ordering `ContentType`."""
enum ContentTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  TEXT_ASC
  TEXT_DESC
  NUMBER_ASC
  NUMBER_DESC
  JSON_ASC
  JSON_DESC
  LINK_ASC
  LINK_DESC
  EMAIL_ASC
  EMAIL_DESC
  UID_ASC
  UID_DESC
  DATE_ASC
  DATE_DESC
  TIME_ASC
  TIME_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  BOOLEAN_ASC
  BOOLEAN_DESC
  RICH_TEXT_ASC
  RICH_TEXT_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  MEDIA_ASC
  MEDIA_DESC
  DATABASE_NAME_ASC
  DATABASE_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ContentType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ContentTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `text` field."""
  text: String
  """Checks for equality with the object’s `number` field."""
  number: BigFloat
  """Checks for equality with the object’s `json` field."""
  json: JSON
  """Checks for equality with the object’s `link` field."""
  link: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `uid` field."""
  uid: UUID
  """Checks for equality with the object’s `date` field."""
  date: Date
  """Checks for equality with the object’s `time` field."""
  time: Time
  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime
  """Checks for equality with the object’s `boolean` field."""
  boolean: Boolean
  """Checks for equality with the object’s `richText` field."""
  richText: String
  """Checks for equality with the object’s `password` field."""
  password: String
  """Checks for equality with the object’s `media` field."""
  media: String
  """Checks for equality with the object’s `databaseName` field."""
  databaseName: String
}

"""A connection to a list of `Contract` values."""
type ContractsConnection {
  """A list of `Contract` objects."""
  nodes: [Contract]!
  """A list of edges which contains the `Contract` and cursor to aid in pagination."""
  edges: [ContractsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Contract` you could get from the connection."""
  totalCount: Int!
}

type Contract implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  contractTitle: String
  contractValue: String
  startDate: String
  endDate: String
  renewalReminder: String
  customerSignedDate: String
  companySignedDate: String
  status: String
  contractManager: String
  account: String
  contact: String
  description: String
  opportunity: String
  contractType: String
  currency: String
  lineItems: String
  total: String
  discount: String
  subtotal: String
  shipping: String
  shippingTax: String
  tax: String
  grandTotal: String
  createdAt: Datetime
}

"""A `Contract` edge in the connection."""
type ContractsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Contract` at the end of the edge."""
  node: Contract
}

"""Methods to use when ordering `Contract`."""
enum ContractsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CONTRACT_TITLE_ASC
  CONTRACT_TITLE_DESC
  CONTRACT_VALUE_ASC
  CONTRACT_VALUE_DESC
  START_DATE_ASC
  START_DATE_DESC
  END_DATE_ASC
  END_DATE_DESC
  RENEWAL_REMINDER_ASC
  RENEWAL_REMINDER_DESC
  CUSTOMER_SIGNED_DATE_ASC
  CUSTOMER_SIGNED_DATE_DESC
  COMPANY_SIGNED_DATE_ASC
  COMPANY_SIGNED_DATE_DESC
  STATUS_ASC
  STATUS_DESC
  CONTRACT_MANAGER_ASC
  CONTRACT_MANAGER_DESC
  ACCOUNT_ASC
  ACCOUNT_DESC
  CONTACT_ASC
  CONTACT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  OPPORTUNITY_ASC
  OPPORTUNITY_DESC
  CONTRACT_TYPE_ASC
  CONTRACT_TYPE_DESC
  CURRENCY_ASC
  CURRENCY_DESC
  LINE_ITEMS_ASC
  LINE_ITEMS_DESC
  TOTAL_ASC
  TOTAL_DESC
  DISCOUNT_ASC
  DISCOUNT_DESC
  SUBTOTAL_ASC
  SUBTOTAL_DESC
  SHIPPING_ASC
  SHIPPING_DESC
  SHIPPING_TAX_ASC
  SHIPPING_TAX_DESC
  TAX_ASC
  TAX_DESC
  GRAND_TOTAL_ASC
  GRAND_TOTAL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Contract` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ContractCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `contractTitle` field."""
  contractTitle: String
  """Checks for equality with the object’s `contractValue` field."""
  contractValue: String
  """Checks for equality with the object’s `startDate` field."""
  startDate: String
  """Checks for equality with the object’s `endDate` field."""
  endDate: String
  """Checks for equality with the object’s `renewalReminder` field."""
  renewalReminder: String
  """Checks for equality with the object’s `customerSignedDate` field."""
  customerSignedDate: String
  """Checks for equality with the object’s `companySignedDate` field."""
  companySignedDate: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `contractManager` field."""
  contractManager: String
  """Checks for equality with the object’s `account` field."""
  account: String
  """Checks for equality with the object’s `contact` field."""
  contact: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `opportunity` field."""
  opportunity: String
  """Checks for equality with the object’s `contractType` field."""
  contractType: String
  """Checks for equality with the object’s `currency` field."""
  currency: String
  """Checks for equality with the object’s `lineItems` field."""
  lineItems: String
  """Checks for equality with the object’s `total` field."""
  total: String
  """Checks for equality with the object’s `discount` field."""
  discount: String
  """Checks for equality with the object’s `subtotal` field."""
  subtotal: String
  """Checks for equality with the object’s `shipping` field."""
  shipping: String
  """Checks for equality with the object’s `shippingTax` field."""
  shippingTax: String
  """Checks for equality with the object’s `tax` field."""
  tax: String
  """Checks for equality with the object’s `grandTotal` field."""
  grandTotal: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A connection to a list of `CoreStore` values."""
type CoreStoresConnection {
  """A list of `CoreStore` objects."""
  nodes: [CoreStore]!
  """A list of edges which contains the `CoreStore` and cursor to aid in pagination."""
  edges: [CoreStoresEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `CoreStore` you could get from the connection."""
  totalCount: Int!
}

type CoreStore implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  key: String
  value: String
  type: String
  environment: String
  tag: String
}

"""A `CoreStore` edge in the connection."""
type CoreStoresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `CoreStore` at the end of the edge."""
  node: CoreStore
}

"""Methods to use when ordering `CoreStore`."""
enum CoreStoresOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  KEY_ASC
  KEY_DESC
  VALUE_ASC
  VALUE_DESC
  TYPE_ASC
  TYPE_DESC
  ENVIRONMENT_ASC
  ENVIRONMENT_DESC
  TAG_ASC
  TAG_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CoreStore` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CoreStoreCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `key` field."""
  key: String
  """Checks for equality with the object’s `value` field."""
  value: String
  """Checks for equality with the object’s `type` field."""
  type: String
  """Checks for equality with the object’s `environment` field."""
  environment: String
  """Checks for equality with the object’s `tag` field."""
  tag: String
}

"""A connection to a list of `Country` values."""
type CountriesConnection {
  """A list of `Country` objects."""
  nodes: [Country]!
  """A list of edges which contains the `Country` and cursor to aid in pagination."""
  edges: [CountriesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Country` you could get from the connection."""
  totalCount: Int!
}

"""A `Country` edge in the connection."""
type CountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Country` at the end of the edge."""
  node: Country
}

"""A connection to a list of `Currency` values."""
type CurrenciesConnection {
  """A list of `Currency` objects."""
  nodes: [Currency]!
  """A list of edges which contains the `Currency` and cursor to aid in pagination."""
  edges: [CurrenciesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Currency` you could get from the connection."""
  totalCount: Int!
}

type Currency implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  code: String
  name: String
  region: String
}

"""A `Currency` edge in the connection."""
type CurrenciesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Currency` at the end of the edge."""
  node: Currency
}

"""Methods to use when ordering `Currency`."""
enum CurrenciesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CODE_ASC
  CODE_DESC
  NAME_ASC
  NAME_DESC
  REGION_ASC
  REGION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Currency` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CurrencyCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `code` field."""
  code: String
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `region` field."""
  region: String
}

"""A connection to a list of `CurrencyRate` values."""
type CurrencyRatesConnection {
  """A list of `CurrencyRate` objects."""
  nodes: [CurrencyRate]!
  """A list of edges which contains the `CurrencyRate` and cursor to aid in pagination."""
  edges: [CurrencyRatesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `CurrencyRate` you could get from the connection."""
  totalCount: Int!
}

type CurrencyRate implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  importService: String!
  usd: Float
}

"""A `CurrencyRate` edge in the connection."""
type CurrencyRatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `CurrencyRate` at the end of the edge."""
  node: CurrencyRate
}

"""Methods to use when ordering `CurrencyRate`."""
enum CurrencyRatesOrderBy {
  NATURAL
  IMPORT_SERVICE_ASC
  IMPORT_SERVICE_DESC
  USD_ASC
  USD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CurrencyRate` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CurrencyRateCondition {
  """Checks for equality with the object’s `importService` field."""
  importService: String
  """Checks for equality with the object’s `usd` field."""
  usd: Float
}

"""A connection to a list of `CurrencySymbol` values."""
type CurrencySymbolsConnection {
  """A list of `CurrencySymbol` objects."""
  nodes: [CurrencySymbol]!
  """A list of edges which contains the `CurrencySymbol` and cursor to aid in pagination."""
  edges: [CurrencySymbolsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `CurrencySymbol` you could get from the connection."""
  totalCount: Int!
}

type CurrencySymbol implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  symbol: String!
  useStandard: Boolean
}

"""A `CurrencySymbol` edge in the connection."""
type CurrencySymbolsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `CurrencySymbol` at the end of the edge."""
  node: CurrencySymbol
}

"""Methods to use when ordering `CurrencySymbol`."""
enum CurrencySymbolsOrderBy {
  NATURAL
  SYMBOL_ASC
  SYMBOL_DESC
  USE_STANDARD_ASC
  USE_STANDARD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CurrencySymbol` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CurrencySymbolCondition {
  """Checks for equality with the object’s `symbol` field."""
  symbol: String
  """Checks for equality with the object’s `useStandard` field."""
  useStandard: Boolean
}

"""A connection to a list of `Customer` values."""
type CustomersConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!
  """A list of edges which contains the `Customer` and cursor to aid in pagination."""
  edges: [CustomersEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection."""
type CustomersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customer` at the end of the edge."""
  node: Customer
}

"""A connection to a list of `Customization` values."""
type CustomizationsConnection {
  """A list of `Customization` objects."""
  nodes: [Customization]!
  """A list of edges which contains the `Customization` and cursor to aid in pagination."""
  edges: [CustomizationsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Customization` you could get from the connection."""
  totalCount: Int!
}

type Customization implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  createdAt: Datetime
  siteName: String
  navLink: String
  notification: String
  banner: String
  footerLink: String
  announcement: String
  email: String
  siteUrl: String
  allowSignup: String
}

"""A `Customization` edge in the connection."""
type CustomizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Customization` at the end of the edge."""
  node: Customization
}

"""Methods to use when ordering `Customization`."""
enum CustomizationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  SITE_NAME_ASC
  SITE_NAME_DESC
  NAV_LINK_ASC
  NAV_LINK_DESC
  NOTIFICATION_ASC
  NOTIFICATION_DESC
  BANNER_ASC
  BANNER_DESC
  FOOTER_LINK_ASC
  FOOTER_LINK_DESC
  ANNOUNCEMENT_ASC
  ANNOUNCEMENT_DESC
  EMAIL_ASC
  EMAIL_DESC
  SITE_URL_ASC
  SITE_URL_DESC
  ALLOW_SIGNUP_ASC
  ALLOW_SIGNUP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Customization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CustomizationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `siteName` field."""
  siteName: String
  """Checks for equality with the object’s `navLink` field."""
  navLink: String
  """Checks for equality with the object’s `notification` field."""
  notification: String
  """Checks for equality with the object’s `banner` field."""
  banner: String
  """Checks for equality with the object’s `footerLink` field."""
  footerLink: String
  """Checks for equality with the object’s `announcement` field."""
  announcement: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `siteUrl` field."""
  siteUrl: String
  """Checks for equality with the object’s `allowSignup` field."""
  allowSignup: String
}

"""A connection to a list of `Dashboard` values."""
type DashboardsConnection {
  """A list of `Dashboard` objects."""
  nodes: [Dashboard]!
  """A list of edges which contains the `Dashboard` and cursor to aid in pagination."""
  edges: [DashboardsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Dashboard` you could get from the connection."""
  totalCount: Int!
}

type Dashboard implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  clientId: String
  clientSecret: String
  privacy: String
  category: String
  url: String
  media: String
  task: String
  reports: String
  tasks: String
  projects: String
  tickets: String
  customers: String
  checklists: String
  visits: String
  users: String
  products: String
  articles: String
  sales: String
}

"""A `Dashboard` edge in the connection."""
type DashboardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Dashboard` at the end of the edge."""
  node: Dashboard
}

"""Methods to use when ordering `Dashboard`."""
enum DashboardsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  CLIENT_ID_ASC
  CLIENT_ID_DESC
  CLIENT_SECRET_ASC
  CLIENT_SECRET_DESC
  PRIVACY_ASC
  PRIVACY_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  URL_ASC
  URL_DESC
  MEDIA_ASC
  MEDIA_DESC
  TASK_ASC
  TASK_DESC
  REPORTS_ASC
  REPORTS_DESC
  TASKS_ASC
  TASKS_DESC
  PROJECTS_ASC
  PROJECTS_DESC
  TICKETS_ASC
  TICKETS_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  CHECKLISTS_ASC
  CHECKLISTS_DESC
  VISITS_ASC
  VISITS_DESC
  USERS_ASC
  USERS_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  ARTICLES_ASC
  ARTICLES_DESC
  SALES_ASC
  SALES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Dashboard` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DashboardCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `clientId` field."""
  clientId: String
  """Checks for equality with the object’s `clientSecret` field."""
  clientSecret: String
  """Checks for equality with the object’s `privacy` field."""
  privacy: String
  """Checks for equality with the object’s `category` field."""
  category: String
  """Checks for equality with the object’s `url` field."""
  url: String
  """Checks for equality with the object’s `media` field."""
  media: String
  """Checks for equality with the object’s `task` field."""
  task: String
  """Checks for equality with the object’s `reports` field."""
  reports: String
  """Checks for equality with the object’s `tasks` field."""
  tasks: String
  """Checks for equality with the object’s `projects` field."""
  projects: String
  """Checks for equality with the object’s `tickets` field."""
  tickets: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `checklists` field."""
  checklists: String
  """Checks for equality with the object’s `visits` field."""
  visits: String
  """Checks for equality with the object’s `users` field."""
  users: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `articles` field."""
  articles: String
  """Checks for equality with the object’s `sales` field."""
  sales: String
}

"""A connection to a list of `EmailTemplate` values."""
type EmailTemplatesConnection {
  """A list of `EmailTemplate` objects."""
  nodes: [EmailTemplate]!
  """A list of edges which contains the `EmailTemplate` and cursor to aid in pagination."""
  edges: [EmailTemplatesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `EmailTemplate` you could get from the connection."""
  totalCount: Int!
}

type EmailTemplate implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  assignedTo: String
  type: String
  active: String
  insertVariable: String
  subject: String
  content: String
  header: String
  footer: String
  width: String
  height: String
  media: String
}

"""A `EmailTemplate` edge in the connection."""
type EmailTemplatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `EmailTemplate` at the end of the edge."""
  node: EmailTemplate
}

"""Methods to use when ordering `EmailTemplate`."""
enum EmailTemplatesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  ASSIGNED_TO_ASC
  ASSIGNED_TO_DESC
  TYPE_ASC
  TYPE_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  INSERT_VARIABLE_ASC
  INSERT_VARIABLE_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  CONTENT_ASC
  CONTENT_DESC
  HEADER_ASC
  HEADER_DESC
  FOOTER_ASC
  FOOTER_DESC
  WIDTH_ASC
  WIDTH_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  MEDIA_ASC
  MEDIA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EmailTemplate` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EmailTemplateCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `assignedTo` field."""
  assignedTo: String
  """Checks for equality with the object’s `type` field."""
  type: String
  """Checks for equality with the object’s `active` field."""
  active: String
  """Checks for equality with the object’s `insertVariable` field."""
  insertVariable: String
  """Checks for equality with the object’s `subject` field."""
  subject: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `header` field."""
  header: String
  """Checks for equality with the object’s `footer` field."""
  footer: String
  """Checks for equality with the object’s `width` field."""
  width: String
  """Checks for equality with the object’s `height` field."""
  height: String
  """Checks for equality with the object’s `media` field."""
  media: String
}

"""A connection to a list of `Event` values."""
type EventsConnection {
  """A list of `Event` objects."""
  nodes: [Event]!
  """A list of edges which contains the `Event` and cursor to aid in pagination."""
  edges: [EventsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Event` you could get from the connection."""
  totalCount: Int!
}

type Event implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  content: String
  tickets: String
  image: String
  start: String
  end: String
  category: String
  city: String
  state: String
  country: String
  postalcode: String
}

"""A `Event` edge in the connection."""
type EventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Event` at the end of the edge."""
  node: Event
}

"""Methods to use when ordering `Event`."""
enum EventsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  CONTENT_ASC
  CONTENT_DESC
  TICKETS_ASC
  TICKETS_DESC
  IMAGE_ASC
  IMAGE_DESC
  START_ASC
  START_DESC
  END_ASC
  END_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  CITY_ASC
  CITY_DESC
  STATE_ASC
  STATE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  POSTALCODE_ASC
  POSTALCODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input EventCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `tickets` field."""
  tickets: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `start` field."""
  start: String
  """Checks for equality with the object’s `end` field."""
  end: String
  """Checks for equality with the object’s `category` field."""
  category: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `postalcode` field."""
  postalcode: String
}

"""A connection to a list of `Fullfillment` values."""
type FullfillmentsConnection {
  """A list of `Fullfillment` objects."""
  nodes: [Fullfillment]!
  """A list of edges which contains the `Fullfillment` and cursor to aid in pagination."""
  edges: [FullfillmentsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Fullfillment` you could get from the connection."""
  totalCount: Int!
}

type Fullfillment implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  shippingZones: String
  company: String
  address: String
  addressTwo: String
  city: String
  state: String
  zipcode: String
  country: String
  countryArea: String
  phone: String
  pickup: String
  stock: String
}

"""A `Fullfillment` edge in the connection."""
type FullfillmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Fullfillment` at the end of the edge."""
  node: Fullfillment
}

"""Methods to use when ordering `Fullfillment`."""
enum FullfillmentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  SHIPPING_ZONES_ASC
  SHIPPING_ZONES_DESC
  COMPANY_ASC
  COMPANY_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  ADDRESS_TWO_ASC
  ADDRESS_TWO_DESC
  CITY_ASC
  CITY_DESC
  STATE_ASC
  STATE_DESC
  ZIPCODE_ASC
  ZIPCODE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  COUNTRY_AREA_ASC
  COUNTRY_AREA_DESC
  PHONE_ASC
  PHONE_DESC
  PICKUP_ASC
  PICKUP_DESC
  STOCK_ASC
  STOCK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Fullfillment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FullfillmentCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `shippingZones` field."""
  shippingZones: String
  """Checks for equality with the object’s `company` field."""
  company: String
  """Checks for equality with the object’s `address` field."""
  address: String
  """Checks for equality with the object’s `addressTwo` field."""
  addressTwo: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `zipcode` field."""
  zipcode: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `countryArea` field."""
  countryArea: String
  """Checks for equality with the object’s `phone` field."""
  phone: String
  """Checks for equality with the object’s `pickup` field."""
  pickup: String
  """Checks for equality with the object’s `stock` field."""
  stock: String
}

"""A connection to a list of `GeneralSetting` values."""
type GeneralSettingsConnection {
  """A list of `GeneralSetting` objects."""
  nodes: [GeneralSetting]!
  """A list of edges which contains the `GeneralSetting` and cursor to aid in pagination."""
  edges: [GeneralSettingsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `GeneralSetting` you could get from the connection."""
  totalCount: Int!
}

type GeneralSetting implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  title: String
  tagline: String
  url: String
  email: String
  accessRestrictions: String
  restrictionMode: String
  startupPage: String
  landingPage: String
  httpResponse: String
  storeEmail: String
  storeContact: String
  storeContactTwo: String
  customerSupport: String
}

"""A `GeneralSetting` edge in the connection."""
type GeneralSettingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `GeneralSetting` at the end of the edge."""
  node: GeneralSetting
}

"""Methods to use when ordering `GeneralSetting`."""
enum GeneralSettingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  TITLE_ASC
  TITLE_DESC
  TAGLINE_ASC
  TAGLINE_DESC
  URL_ASC
  URL_DESC
  EMAIL_ASC
  EMAIL_DESC
  ACCESS_RESTRICTIONS_ASC
  ACCESS_RESTRICTIONS_DESC
  RESTRICTION_MODE_ASC
  RESTRICTION_MODE_DESC
  STARTUP_PAGE_ASC
  STARTUP_PAGE_DESC
  LANDING_PAGE_ASC
  LANDING_PAGE_DESC
  HTTP_RESPONSE_ASC
  HTTP_RESPONSE_DESC
  STORE_EMAIL_ASC
  STORE_EMAIL_DESC
  STORE_CONTACT_ASC
  STORE_CONTACT_DESC
  STORE_CONTACT_TWO_ASC
  STORE_CONTACT_TWO_DESC
  CUSTOMER_SUPPORT_ASC
  CUSTOMER_SUPPORT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GeneralSetting` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GeneralSettingCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `title` field."""
  title: String
  """Checks for equality with the object’s `tagline` field."""
  tagline: String
  """Checks for equality with the object’s `url` field."""
  url: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `accessRestrictions` field."""
  accessRestrictions: String
  """Checks for equality with the object’s `restrictionMode` field."""
  restrictionMode: String
  """Checks for equality with the object’s `startupPage` field."""
  startupPage: String
  """Checks for equality with the object’s `landingPage` field."""
  landingPage: String
  """Checks for equality with the object’s `httpResponse` field."""
  httpResponse: String
  """Checks for equality with the object’s `storeEmail` field."""
  storeEmail: String
  """Checks for equality with the object’s `storeContact` field."""
  storeContact: String
  """Checks for equality with the object’s `storeContactTwo` field."""
  storeContactTwo: String
  """Checks for equality with the object’s `customerSupport` field."""
  customerSupport: String
}

"""A connection to a list of `GiftCertificate` values."""
type GiftCertificatesConnection {
  """A list of `GiftCertificate` objects."""
  nodes: [GiftCertificate]!
  """A list of edges which contains the `GiftCertificate` and cursor to aid in pagination."""
  edges: [GiftCertificatesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `GiftCertificate` you could get from the connection."""
  totalCount: Int!
}

type GiftCertificate implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  name: String!
  excerpt: String
  discount: String
  image: String
  published: Datetime
  specialOffers: String
  rewards: String
  coupons: String
  expiration: String
  categories: String
  articles: String
  products: String
  customers: String
  users: String
  type: String
}

"""A `GiftCertificate` edge in the connection."""
type GiftCertificatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `GiftCertificate` at the end of the edge."""
  node: GiftCertificate
}

"""Methods to use when ordering `GiftCertificate`."""
enum GiftCertificatesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EXCERPT_ASC
  EXCERPT_DESC
  DISCOUNT_ASC
  DISCOUNT_DESC
  IMAGE_ASC
  IMAGE_DESC
  PUBLISHED_ASC
  PUBLISHED_DESC
  SPECIAL_OFFERS_ASC
  SPECIAL_OFFERS_DESC
  REWARDS_ASC
  REWARDS_DESC
  COUPONS_ASC
  COUPONS_DESC
  EXPIRATION_ASC
  EXPIRATION_DESC
  CATEGORIES_ASC
  CATEGORIES_DESC
  ARTICLES_ASC
  ARTICLES_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  USERS_ASC
  USERS_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GiftCertificate` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GiftCertificateCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `excerpt` field."""
  excerpt: String
  """Checks for equality with the object’s `discount` field."""
  discount: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `published` field."""
  published: Datetime
  """Checks for equality with the object’s `specialOffers` field."""
  specialOffers: String
  """Checks for equality with the object’s `rewards` field."""
  rewards: String
  """Checks for equality with the object’s `coupons` field."""
  coupons: String
  """Checks for equality with the object’s `expiration` field."""
  expiration: String
  """Checks for equality with the object’s `categories` field."""
  categories: String
  """Checks for equality with the object’s `articles` field."""
  articles: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `users` field."""
  users: String
  """Checks for equality with the object’s `type` field."""
  type: String
}

"""A connection to a list of `Glossary` values."""
type GlossariesConnection {
  """A list of `Glossary` objects."""
  nodes: [Glossary]!
  """A list of edges which contains the `Glossary` and cursor to aid in pagination."""
  edges: [GlossariesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Glossary` you could get from the connection."""
  totalCount: Int!
}

type Glossary implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  content: String
  image: String
  published: Datetime
}

"""A `Glossary` edge in the connection."""
type GlossariesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Glossary` at the end of the edge."""
  node: Glossary
}

"""Methods to use when ordering `Glossary`."""
enum GlossariesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CONTENT_ASC
  CONTENT_DESC
  IMAGE_ASC
  IMAGE_DESC
  PUBLISHED_ASC
  PUBLISHED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Glossary` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GlossaryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `published` field."""
  published: Datetime
}

"""A connection to a list of `Importm` values."""
type ImportmsConnection {
  """A list of `Importm` objects."""
  nodes: [Importm]!
  """A list of edges which contains the `Importm` and cursor to aid in pagination."""
  edges: [ImportmsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Importm` you could get from the connection."""
  totalCount: Int!
}

type Importm implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  description: String
  file: String
  url: String
  image: String
}

"""A `Importm` edge in the connection."""
type ImportmsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Importm` at the end of the edge."""
  node: Importm
}

"""Methods to use when ordering `Importm`."""
enum ImportmsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FILE_ASC
  FILE_DESC
  URL_ASC
  URL_DESC
  IMAGE_ASC
  IMAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Importm` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input ImportmCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `file` field."""
  file: String
  """Checks for equality with the object’s `url` field."""
  url: String
  """Checks for equality with the object’s `image` field."""
  image: String
}

"""A connection to a list of `Integration` values."""
type IntegrationsConnection {
  """A list of `Integration` objects."""
  nodes: [Integration]!
  """A list of edges which contains the `Integration` and cursor to aid in pagination."""
  edges: [IntegrationsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Integration` you could get from the connection."""
  totalCount: Int!
}

type Integration implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  content: String
  media: String
  location: String
  category: String
}

"""A `Integration` edge in the connection."""
type IntegrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Integration` at the end of the edge."""
  node: Integration
}

"""Methods to use when ordering `Integration`."""
enum IntegrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  CONTENT_ASC
  CONTENT_DESC
  MEDIA_ASC
  MEDIA_DESC
  LOCATION_ASC
  LOCATION_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Integration` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input IntegrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `media` field."""
  media: String
  """Checks for equality with the object’s `location` field."""
  location: String
  """Checks for equality with the object’s `category` field."""
  category: String
}

"""A connection to a list of `Internalization` values."""
type InternalizationsConnection {
  """A list of `Internalization` objects."""
  nodes: [Internalization]!
  """A list of edges which contains the `Internalization` and cursor to aid in pagination."""
  edges: [InternalizationsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Internalization` you could get from the connection."""
  totalCount: Int!
}

type Internalization implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  region: String
  description: String
  default: String
  website: String
}

"""A `Internalization` edge in the connection."""
type InternalizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Internalization` at the end of the edge."""
  node: Internalization
}

"""Methods to use when ordering `Internalization`."""
enum InternalizationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  REGION_ASC
  REGION_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  DEFAULT_ASC
  DEFAULT_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Internalization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InternalizationCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `region` field."""
  region: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `default` field."""
  default: String
  """Checks for equality with the object’s `website` field."""
  website: String
}

"""A connection to a list of `Invitation` values."""
type InvitationsConnection {
  """A list of `Invitation` objects."""
  nodes: [Invitation]!
  """A list of edges which contains the `Invitation` and cursor to aid in pagination."""
  edges: [InvitationsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Invitation` you could get from the connection."""
  totalCount: Int!
}

type Invitation implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  invoiceDate: Datetime
  email: String
  billingAddress: String
  shippingAddress: String
  orderNumber: String
  grandTotalPurchased: String
  paymentMethod: String
  status: String
  media: String
  content: String
}

"""A `Invitation` edge in the connection."""
type InvitationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Invitation` at the end of the edge."""
  node: Invitation
}

"""Methods to use when ordering `Invitation`."""
enum InvitationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  INVOICE_DATE_ASC
  INVOICE_DATE_DESC
  EMAIL_ASC
  EMAIL_DESC
  BILLING_ADDRESS_ASC
  BILLING_ADDRESS_DESC
  SHIPPING_ADDRESS_ASC
  SHIPPING_ADDRESS_DESC
  ORDER_NUMBER_ASC
  ORDER_NUMBER_DESC
  GRAND_TOTAL_PURCHASED_ASC
  GRAND_TOTAL_PURCHASED_DESC
  PAYMENT_METHOD_ASC
  PAYMENT_METHOD_DESC
  STATUS_ASC
  STATUS_DESC
  MEDIA_ASC
  MEDIA_DESC
  CONTENT_ASC
  CONTENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Invitation` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input InvitationCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `invoiceDate` field."""
  invoiceDate: Datetime
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `billingAddress` field."""
  billingAddress: String
  """Checks for equality with the object’s `shippingAddress` field."""
  shippingAddress: String
  """Checks for equality with the object’s `orderNumber` field."""
  orderNumber: String
  """Checks for equality with the object’s `grandTotalPurchased` field."""
  grandTotalPurchased: String
  """Checks for equality with the object’s `paymentMethod` field."""
  paymentMethod: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `media` field."""
  media: String
  """Checks for equality with the object’s `content` field."""
  content: String
}

"""A connection to a list of `Invoice` values."""
type InvoicesConnection {
  """A list of `Invoice` objects."""
  nodes: [Invoice]!
  """A list of edges which contains the `Invoice` and cursor to aid in pagination."""
  edges: [InvoicesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Invoice` you could get from the connection."""
  totalCount: Int!
}

type Invoice implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  invoice: Int!
  orderNumber: BigInt!
  invoiceDate: Datetime
  billToName: String!
  billingAddress: String
  grandTotalBase: String
  grandTotalPurchased: String
  status: String
  shippingAddress: String
  customerName: String
  email: String
  customerGroup: String
  paymentMethod: String
  shippingInformation: String
  subtotal: String
  shippingAndHandling: String
  id: BigInt!
}

"""A `Invoice` edge in the connection."""
type InvoicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Invoice` at the end of the edge."""
  node: Invoice
}

"""Methods to use when ordering `Invoice`."""
enum InvoicesOrderBy {
  NATURAL
  INVOICE_ASC
  INVOICE_DESC
  ORDER_NUMBER_ASC
  ORDER_NUMBER_DESC
  INVOICE_DATE_ASC
  INVOICE_DATE_DESC
  BILL_TO_NAME_ASC
  BILL_TO_NAME_DESC
  BILLING_ADDRESS_ASC
  BILLING_ADDRESS_DESC
  GRAND_TOTAL_BASE_ASC
  GRAND_TOTAL_BASE_DESC
  GRAND_TOTAL_PURCHASED_ASC
  GRAND_TOTAL_PURCHASED_DESC
  STATUS_ASC
  STATUS_DESC
  SHIPPING_ADDRESS_ASC
  SHIPPING_ADDRESS_DESC
  CUSTOMER_NAME_ASC
  CUSTOMER_NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  CUSTOMER_GROUP_ASC
  CUSTOMER_GROUP_DESC
  PAYMENT_METHOD_ASC
  PAYMENT_METHOD_DESC
  SHIPPING_INFORMATION_ASC
  SHIPPING_INFORMATION_DESC
  SUBTOTAL_ASC
  SUBTOTAL_DESC
  SHIPPING_AND_HANDLING_ASC
  SHIPPING_AND_HANDLING_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Invoice` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input InvoiceCondition {
  """Checks for equality with the object’s `invoice` field."""
  invoice: Int
  """Checks for equality with the object’s `orderNumber` field."""
  orderNumber: BigInt
  """Checks for equality with the object’s `invoiceDate` field."""
  invoiceDate: Datetime
  """Checks for equality with the object’s `billToName` field."""
  billToName: String
  """Checks for equality with the object’s `billingAddress` field."""
  billingAddress: String
  """Checks for equality with the object’s `grandTotalBase` field."""
  grandTotalBase: String
  """Checks for equality with the object’s `grandTotalPurchased` field."""
  grandTotalPurchased: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `shippingAddress` field."""
  shippingAddress: String
  """Checks for equality with the object’s `customerName` field."""
  customerName: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `customerGroup` field."""
  customerGroup: String
  """Checks for equality with the object’s `paymentMethod` field."""
  paymentMethod: String
  """Checks for equality with the object’s `shippingInformation` field."""
  shippingInformation: String
  """Checks for equality with the object’s `subtotal` field."""
  subtotal: String
  """Checks for equality with the object’s `shippingAndHandling` field."""
  shippingAndHandling: String
  """Checks for equality with the object’s `id` field."""
  id: BigInt
}

"""A connection to a list of `Knowledgebase` values."""
type KnowledgebasesConnection {
  """A list of `Knowledgebase` objects."""
  nodes: [Knowledgebase]!
  """A list of edges which contains the `Knowledgebase` and cursor to aid in pagination."""
  edges: [KnowledgebasesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Knowledgebase` you could get from the connection."""
  totalCount: Int!
}

type Knowledgebase implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  status: String
  revision: String
  content: String
  resolution: String
  author: String
  approver: String
  dateModified: Datetime
}

"""A `Knowledgebase` edge in the connection."""
type KnowledgebasesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Knowledgebase` at the end of the edge."""
  node: Knowledgebase
}

"""Methods to use when ordering `Knowledgebase`."""
enum KnowledgebasesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  STATUS_ASC
  STATUS_DESC
  REVISION_ASC
  REVISION_DESC
  CONTENT_ASC
  CONTENT_DESC
  RESOLUTION_ASC
  RESOLUTION_DESC
  AUTHOR_ASC
  AUTHOR_DESC
  APPROVER_ASC
  APPROVER_DESC
  DATE_MODIFIED_ASC
  DATE_MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Knowledgebase` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input KnowledgebaseCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `revision` field."""
  revision: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `resolution` field."""
  resolution: String
  """Checks for equality with the object’s `author` field."""
  author: String
  """Checks for equality with the object’s `approver` field."""
  approver: String
  """Checks for equality with the object’s `dateModified` field."""
  dateModified: Datetime
}

"""A connection to a list of `Lead` values."""
type LeadsConnection {
  """A list of `Lead` objects."""
  nodes: [Lead]!
  """A list of edges which contains the `Lead` and cursor to aid in pagination."""
  edges: [LeadsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Lead` you could get from the connection."""
  totalCount: Int!
}

type Lead implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  prefix: String
  firstName: String
  lastName: String
  department: String
  accountName: String
  address: String
  postalcode: String
  city: String
  state: String
  country: String
  email: String
  description: String
  fax: String
  website: String
  mobile: String
  jobTitle: String
  altAddress: String
  altPostalcode: String
  altCity: String
  altState: String
  altCountry: String
  officePhone: String
  status: String
  statusDescription: String
  opportunityAmount: String
  campaign: String
  leadSource: String
  leadSourceDescription: String
  referredBy: String
  customerName: String
}

"""A `Lead` edge in the connection."""
type LeadsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Lead` at the end of the edge."""
  node: Lead
}

"""Methods to use when ordering `Lead`."""
enum LeadsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PREFIX_ASC
  PREFIX_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  DEPARTMENT_ASC
  DEPARTMENT_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  POSTALCODE_ASC
  POSTALCODE_DESC
  CITY_ASC
  CITY_DESC
  STATE_ASC
  STATE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  EMAIL_ASC
  EMAIL_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FAX_ASC
  FAX_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  MOBILE_ASC
  MOBILE_DESC
  JOB_TITLE_ASC
  JOB_TITLE_DESC
  ALT_ADDRESS_ASC
  ALT_ADDRESS_DESC
  ALT_POSTALCODE_ASC
  ALT_POSTALCODE_DESC
  ALT_CITY_ASC
  ALT_CITY_DESC
  ALT_STATE_ASC
  ALT_STATE_DESC
  ALT_COUNTRY_ASC
  ALT_COUNTRY_DESC
  OFFICE_PHONE_ASC
  OFFICE_PHONE_DESC
  STATUS_ASC
  STATUS_DESC
  STATUS_DESCRIPTION_ASC
  STATUS_DESCRIPTION_DESC
  OPPORTUNITY_AMOUNT_ASC
  OPPORTUNITY_AMOUNT_DESC
  CAMPAIGN_ASC
  CAMPAIGN_DESC
  LEAD_SOURCE_ASC
  LEAD_SOURCE_DESC
  LEAD_SOURCE_DESCRIPTION_ASC
  LEAD_SOURCE_DESCRIPTION_DESC
  REFERRED_BY_ASC
  REFERRED_BY_DESC
  CUSTOMER_NAME_ASC
  CUSTOMER_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Lead` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input LeadCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `prefix` field."""
  prefix: String
  """Checks for equality with the object’s `firstName` field."""
  firstName: String
  """Checks for equality with the object’s `lastName` field."""
  lastName: String
  """Checks for equality with the object’s `department` field."""
  department: String
  """Checks for equality with the object’s `accountName` field."""
  accountName: String
  """Checks for equality with the object’s `address` field."""
  address: String
  """Checks for equality with the object’s `postalcode` field."""
  postalcode: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `fax` field."""
  fax: String
  """Checks for equality with the object’s `website` field."""
  website: String
  """Checks for equality with the object’s `mobile` field."""
  mobile: String
  """Checks for equality with the object’s `jobTitle` field."""
  jobTitle: String
  """Checks for equality with the object’s `altAddress` field."""
  altAddress: String
  """Checks for equality with the object’s `altPostalcode` field."""
  altPostalcode: String
  """Checks for equality with the object’s `altCity` field."""
  altCity: String
  """Checks for equality with the object’s `altState` field."""
  altState: String
  """Checks for equality with the object’s `altCountry` field."""
  altCountry: String
  """Checks for equality with the object’s `officePhone` field."""
  officePhone: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `statusDescription` field."""
  statusDescription: String
  """Checks for equality with the object’s `opportunityAmount` field."""
  opportunityAmount: String
  """Checks for equality with the object’s `campaign` field."""
  campaign: String
  """Checks for equality with the object’s `leadSource` field."""
  leadSource: String
  """Checks for equality with the object’s `leadSourceDescription` field."""
  leadSourceDescription: String
  """Checks for equality with the object’s `referredBy` field."""
  referredBy: String
  """Checks for equality with the object’s `customerName` field."""
  customerName: String
}

"""A connection to a list of `Meeting` values."""
type MeetingsConnection {
  """A list of `Meeting` objects."""
  nodes: [Meeting]!
  """A list of edges which contains the `Meeting` and cursor to aid in pagination."""
  edges: [MeetingsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Meeting` you could get from the connection."""
  totalCount: Int!
}

type Meeting implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  subject: String
  startDate: String
  endDate: String
  duration: String
  status: String
  relatedTo: String
  reminders: String
  content: String
  assignedTo: String
  invitees: String
  scheduling: String
}

"""A `Meeting` edge in the connection."""
type MeetingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Meeting` at the end of the edge."""
  node: Meeting
}

"""Methods to use when ordering `Meeting`."""
enum MeetingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  START_DATE_ASC
  START_DATE_DESC
  END_DATE_ASC
  END_DATE_DESC
  DURATION_ASC
  DURATION_DESC
  STATUS_ASC
  STATUS_DESC
  RELATED_TO_ASC
  RELATED_TO_DESC
  REMINDERS_ASC
  REMINDERS_DESC
  CONTENT_ASC
  CONTENT_DESC
  ASSIGNED_TO_ASC
  ASSIGNED_TO_DESC
  INVITEES_ASC
  INVITEES_DESC
  SCHEDULING_ASC
  SCHEDULING_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Meeting` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input MeetingCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `subject` field."""
  subject: String
  """Checks for equality with the object’s `startDate` field."""
  startDate: String
  """Checks for equality with the object’s `endDate` field."""
  endDate: String
  """Checks for equality with the object’s `duration` field."""
  duration: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `relatedTo` field."""
  relatedTo: String
  """Checks for equality with the object’s `reminders` field."""
  reminders: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `assignedTo` field."""
  assignedTo: String
  """Checks for equality with the object’s `invitees` field."""
  invitees: String
  """Checks for equality with the object’s `scheduling` field."""
  scheduling: String
}

"""A connection to a list of `Ooto` values."""
type OotosConnection {
  """A list of `Ooto` objects."""
  nodes: [Ooto]!
  """A list of edges which contains the `Ooto` and cursor to aid in pagination."""
  edges: [OotosEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Ooto` you could get from the connection."""
  totalCount: Int!
}

type Ooto implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  login: String
  startDate: String
  endDate: String
  note: String
  usingTime: String
  location: String
}

"""A `Ooto` edge in the connection."""
type OotosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Ooto` at the end of the edge."""
  node: Ooto
}

"""Methods to use when ordering `Ooto`."""
enum OotosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  LOGIN_ASC
  LOGIN_DESC
  START_DATE_ASC
  START_DATE_DESC
  END_DATE_ASC
  END_DATE_DESC
  NOTE_ASC
  NOTE_DESC
  USING_TIME_ASC
  USING_TIME_DESC
  LOCATION_ASC
  LOCATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Ooto` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input OotoCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `login` field."""
  login: String
  """Checks for equality with the object’s `startDate` field."""
  startDate: String
  """Checks for equality with the object’s `endDate` field."""
  endDate: String
  """Checks for equality with the object’s `note` field."""
  note: String
  """Checks for equality with the object’s `usingTime` field."""
  usingTime: String
  """Checks for equality with the object’s `location` field."""
  location: String
}

"""A connection to a list of `Opportunity` values."""
type OpportunitiesConnection {
  """A list of `Opportunity` objects."""
  nodes: [Opportunity]!
  """A list of edges which contains the `Opportunity` and cursor to aid in pagination."""
  edges: [OpportunitiesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Opportunity` you could get from the connection."""
  totalCount: Int!
}

type Opportunity implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  amount: String
  salesStage: String
  currency: String
  probability: String
  nextStep: String
  description: String
  assignedTo: String
  leadSource: String
  campaign: String
  type: String
  accountName: String
  expectedCloseDate: String
}

"""A `Opportunity` edge in the connection."""
type OpportunitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Opportunity` at the end of the edge."""
  node: Opportunity
}

"""Methods to use when ordering `Opportunity`."""
enum OpportunitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  SALES_STAGE_ASC
  SALES_STAGE_DESC
  CURRENCY_ASC
  CURRENCY_DESC
  PROBABILITY_ASC
  PROBABILITY_DESC
  NEXT_STEP_ASC
  NEXT_STEP_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ASSIGNED_TO_ASC
  ASSIGNED_TO_DESC
  LEAD_SOURCE_ASC
  LEAD_SOURCE_DESC
  CAMPAIGN_ASC
  CAMPAIGN_DESC
  TYPE_ASC
  TYPE_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  EXPECTED_CLOSE_DATE_ASC
  EXPECTED_CLOSE_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Opportunity` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OpportunityCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `amount` field."""
  amount: String
  """Checks for equality with the object’s `salesStage` field."""
  salesStage: String
  """Checks for equality with the object’s `currency` field."""
  currency: String
  """Checks for equality with the object’s `probability` field."""
  probability: String
  """Checks for equality with the object’s `nextStep` field."""
  nextStep: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `assignedTo` field."""
  assignedTo: String
  """Checks for equality with the object’s `leadSource` field."""
  leadSource: String
  """Checks for equality with the object’s `campaign` field."""
  campaign: String
  """Checks for equality with the object’s `type` field."""
  type: String
  """Checks for equality with the object’s `accountName` field."""
  accountName: String
  """Checks for equality with the object’s `expectedCloseDate` field."""
  expectedCloseDate: String
}

"""A connection to a list of `Page` values."""
type PagesConnection {
  """A list of `Page` objects."""
  nodes: [Page]!
  """A list of edges which contains the `Page` and cursor to aid in pagination."""
  edges: [PagesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Page` you could get from the connection."""
  totalCount: Int!
}

type Page implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  enablePage: Boolean
  title: String!
  contentTitle: String
  content: String
  urlKey: String
  metaTitle: String
  metaKeywords: String
  metaDescription: String
}

"""A `Page` edge in the connection."""
type PagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Page` at the end of the edge."""
  node: Page
}

"""Methods to use when ordering `Page`."""
enum PagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ENABLE_PAGE_ASC
  ENABLE_PAGE_DESC
  TITLE_ASC
  TITLE_DESC
  CONTENT_TITLE_ASC
  CONTENT_TITLE_DESC
  CONTENT_ASC
  CONTENT_DESC
  URL_KEY_ASC
  URL_KEY_DESC
  META_TITLE_ASC
  META_TITLE_DESC
  META_KEYWORDS_ASC
  META_KEYWORDS_DESC
  META_DESCRIPTION_ASC
  META_DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Page` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input PageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `enablePage` field."""
  enablePage: Boolean
  """Checks for equality with the object’s `title` field."""
  title: String
  """Checks for equality with the object’s `contentTitle` field."""
  contentTitle: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `urlKey` field."""
  urlKey: String
  """Checks for equality with the object’s `metaTitle` field."""
  metaTitle: String
  """Checks for equality with the object’s `metaKeywords` field."""
  metaKeywords: String
  """Checks for equality with the object’s `metaDescription` field."""
  metaDescription: String
}

"""A connection to a list of `Partner` values."""
type PartnersConnection {
  """A list of `Partner` objects."""
  nodes: [Partner]!
  """A list of edges which contains the `Partner` and cursor to aid in pagination."""
  edges: [PartnersEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Partner` you could get from the connection."""
  totalCount: Int!
}

type Partner implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  address: String
  city: String
  state: String
  country: String
  isPublic: String
  businessType: String
}

"""A `Partner` edge in the connection."""
type PartnersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Partner` at the end of the edge."""
  node: Partner
}

"""Methods to use when ordering `Partner`."""
enum PartnersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  CITY_ASC
  CITY_DESC
  STATE_ASC
  STATE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  BUSINESS_TYPE_ASC
  BUSINESS_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Partner` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input PartnerCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `address` field."""
  address: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `isPublic` field."""
  isPublic: String
  """Checks for equality with the object’s `businessType` field."""
  businessType: String
}

"""A connection to a list of `Payment` values."""
type PaymentsConnection {
  """A list of `Payment` objects."""
  nodes: [Payment]!
  """A list of edges which contains the `Payment` and cursor to aid in pagination."""
  edges: [PaymentsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Payment` you could get from the connection."""
  totalCount: Int!
}

type Payment implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  clientId: String
  clientSecret: String
  hostUri: String
  redirectUrl: String
  redirectUrlApp: String
  icon: String
  name: String!
  active: String
  country: String
}

"""A `Payment` edge in the connection."""
type PaymentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Payment` at the end of the edge."""
  node: Payment
}

"""Methods to use when ordering `Payment`."""
enum PaymentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CLIENT_ID_ASC
  CLIENT_ID_DESC
  CLIENT_SECRET_ASC
  CLIENT_SECRET_DESC
  HOST_URI_ASC
  HOST_URI_DESC
  REDIRECT_URL_ASC
  REDIRECT_URL_DESC
  REDIRECT_URL_APP_ASC
  REDIRECT_URL_APP_DESC
  ICON_ASC
  ICON_DESC
  NAME_ASC
  NAME_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Payment` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input PaymentCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `clientId` field."""
  clientId: String
  """Checks for equality with the object’s `clientSecret` field."""
  clientSecret: String
  """Checks for equality with the object’s `hostUri` field."""
  hostUri: String
  """Checks for equality with the object’s `redirectUrl` field."""
  redirectUrl: String
  """Checks for equality with the object’s `redirectUrlApp` field."""
  redirectUrlApp: String
  """Checks for equality with the object’s `icon` field."""
  icon: String
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `active` field."""
  active: String
  """Checks for equality with the object’s `country` field."""
  country: String
}

"""A connection to a list of `PdfTemplate` values."""
type PdfTemplatesConnection {
  """A list of `PdfTemplate` objects."""
  nodes: [PdfTemplate]!
  """A list of edges which contains the `PdfTemplate` and cursor to aid in pagination."""
  edges: [PdfTemplatesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `PdfTemplate` you could get from the connection."""
  totalCount: Int!
}

type PdfTemplate implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  assignedTo: String
  type: String
  active: String
  pageSize: String
  orientation: String
  content: String
  header: String
  footer: String
  marginLeft: String
  marginRight: String
  marginTop: String
  marginBottom: String
  marginHeader: String
  marginFooter: String
}

"""A `PdfTemplate` edge in the connection."""
type PdfTemplatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `PdfTemplate` at the end of the edge."""
  node: PdfTemplate
}

"""Methods to use when ordering `PdfTemplate`."""
enum PdfTemplatesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  ASSIGNED_TO_ASC
  ASSIGNED_TO_DESC
  TYPE_ASC
  TYPE_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  PAGE_SIZE_ASC
  PAGE_SIZE_DESC
  ORIENTATION_ASC
  ORIENTATION_DESC
  CONTENT_ASC
  CONTENT_DESC
  HEADER_ASC
  HEADER_DESC
  FOOTER_ASC
  FOOTER_DESC
  MARGIN_LEFT_ASC
  MARGIN_LEFT_DESC
  MARGIN_RIGHT_ASC
  MARGIN_RIGHT_DESC
  MARGIN_TOP_ASC
  MARGIN_TOP_DESC
  MARGIN_BOTTOM_ASC
  MARGIN_BOTTOM_DESC
  MARGIN_HEADER_ASC
  MARGIN_HEADER_DESC
  MARGIN_FOOTER_ASC
  MARGIN_FOOTER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PdfTemplate` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PdfTemplateCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `assignedTo` field."""
  assignedTo: String
  """Checks for equality with the object’s `type` field."""
  type: String
  """Checks for equality with the object’s `active` field."""
  active: String
  """Checks for equality with the object’s `pageSize` field."""
  pageSize: String
  """Checks for equality with the object’s `orientation` field."""
  orientation: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `header` field."""
  header: String
  """Checks for equality with the object’s `footer` field."""
  footer: String
  """Checks for equality with the object’s `marginLeft` field."""
  marginLeft: String
  """Checks for equality with the object’s `marginRight` field."""
  marginRight: String
  """Checks for equality with the object’s `marginTop` field."""
  marginTop: String
  """Checks for equality with the object’s `marginBottom` field."""
  marginBottom: String
  """Checks for equality with the object’s `marginHeader` field."""
  marginHeader: String
  """Checks for equality with the object’s `marginFooter` field."""
  marginFooter: String
}

"""A connection to a list of `Permission` values."""
type PermissionsConnection {
  """A list of `Permission` objects."""
  nodes: [Permission]!
  """A list of edges which contains the `Permission` and cursor to aid in pagination."""
  edges: [PermissionsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Permission` you could get from the connection."""
  totalCount: Int!
}

type Permission implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  content: String
  role: String
  create: String
  read: String
  update: String
  delete: String
  users: String
}

"""A `Permission` edge in the connection."""
type PermissionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Permission` at the end of the edge."""
  node: Permission
}

"""Methods to use when ordering `Permission`."""
enum PermissionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  CONTENT_ASC
  CONTENT_DESC
  ROLE_ASC
  ROLE_DESC
  CREATE_ASC
  CREATE_DESC
  READ_ASC
  READ_DESC
  UPDATE_ASC
  UPDATE_DESC
  DELETE_ASC
  DELETE_DESC
  USERS_ASC
  USERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Permission` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PermissionCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `role` field."""
  role: String
  """Checks for equality with the object’s `create` field."""
  create: String
  """Checks for equality with the object’s `read` field."""
  read: String
  """Checks for equality with the object’s `update` field."""
  update: String
  """Checks for equality with the object’s `delete` field."""
  delete: String
  """Checks for equality with the object’s `users` field."""
  users: String
}

"""A connection to a list of `Plugin` values."""
type PluginsConnection {
  """A list of `Plugin` objects."""
  nodes: [Plugin]!
  """A list of edges which contains the `Plugin` and cursor to aid in pagination."""
  edges: [PluginsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Plugin` you could get from the connection."""
  totalCount: Int!
}

type Plugin implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  url: String
  githubLink: String
  description: String
  logo: String
  screenshots: String
  lastUpdated: Datetime
  publisherName: String
  agreeTerms: Boolean
  publisherEmail: String
}

"""A `Plugin` edge in the connection."""
type PluginsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Plugin` at the end of the edge."""
  node: Plugin
}

"""Methods to use when ordering `Plugin`."""
enum PluginsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  URL_ASC
  URL_DESC
  GITHUB_LINK_ASC
  GITHUB_LINK_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  LOGO_ASC
  LOGO_DESC
  SCREENSHOTS_ASC
  SCREENSHOTS_DESC
  LAST_UPDATED_ASC
  LAST_UPDATED_DESC
  PUBLISHER_NAME_ASC
  PUBLISHER_NAME_DESC
  AGREE_TERMS_ASC
  AGREE_TERMS_DESC
  PUBLISHER_EMAIL_ASC
  PUBLISHER_EMAIL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Plugin` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input PluginCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `url` field."""
  url: String
  """Checks for equality with the object’s `githubLink` field."""
  githubLink: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `logo` field."""
  logo: String
  """Checks for equality with the object’s `screenshots` field."""
  screenshots: String
  """Checks for equality with the object’s `lastUpdated` field."""
  lastUpdated: Datetime
  """Checks for equality with the object’s `publisherName` field."""
  publisherName: String
  """Checks for equality with the object’s `agreeTerms` field."""
  agreeTerms: Boolean
  """Checks for equality with the object’s `publisherEmail` field."""
  publisherEmail: String
}

"""A connection to a list of `Poll` values."""
type PollsConnection {
  """A list of `Poll` objects."""
  nodes: [Poll]!
  """A list of edges which contains the `Poll` and cursor to aid in pagination."""
  edges: [PollsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Poll` you could get from the connection."""
  totalCount: Int!
}

type Poll implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  excerpt: String
  description: String
  image: String
  published: Datetime
  question: String
  response: String
  categories: String
  articles: String
  products: String
  customers: String
  users: String
}

"""A `Poll` edge in the connection."""
type PollsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Poll` at the end of the edge."""
  node: Poll
}

"""Methods to use when ordering `Poll`."""
enum PollsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EXCERPT_ASC
  EXCERPT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  IMAGE_ASC
  IMAGE_DESC
  PUBLISHED_ASC
  PUBLISHED_DESC
  QUESTION_ASC
  QUESTION_DESC
  RESPONSE_ASC
  RESPONSE_DESC
  CATEGORIES_ASC
  CATEGORIES_DESC
  ARTICLES_ASC
  ARTICLES_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  USERS_ASC
  USERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Poll` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input PollCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `excerpt` field."""
  excerpt: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `published` field."""
  published: Datetime
  """Checks for equality with the object’s `question` field."""
  question: String
  """Checks for equality with the object’s `response` field."""
  response: String
  """Checks for equality with the object’s `categories` field."""
  categories: String
  """Checks for equality with the object’s `articles` field."""
  articles: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `users` field."""
  users: String
}

"""A connection to a list of `ProjectTemplate` values."""
type ProjectTemplatesConnection {
  """A list of `ProjectTemplate` objects."""
  nodes: [ProjectTemplate]!
  """A list of edges which contains the `ProjectTemplate` and cursor to aid in pagination."""
  edges: [ProjectTemplatesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `ProjectTemplate` you could get from the connection."""
  totalCount: Int!
}

type ProjectTemplate implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  name: String
  status: String
  considerWorkingDays: String
  priority: String
  projectManager: String
  resource: String
  content: String
}

"""A `ProjectTemplate` edge in the connection."""
type ProjectTemplatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `ProjectTemplate` at the end of the edge."""
  node: ProjectTemplate
}

"""Methods to use when ordering `ProjectTemplate`."""
enum ProjectTemplatesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  STATUS_ASC
  STATUS_DESC
  CONSIDER_WORKING_DAYS_ASC
  CONSIDER_WORKING_DAYS_DESC
  PRIORITY_ASC
  PRIORITY_DESC
  PROJECT_MANAGER_ASC
  PROJECT_MANAGER_DESC
  RESOURCE_ASC
  RESOURCE_DESC
  CONTENT_ASC
  CONTENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProjectTemplate` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectTemplateCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `considerWorkingDays` field."""
  considerWorkingDays: String
  """Checks for equality with the object’s `priority` field."""
  priority: String
  """Checks for equality with the object’s `projectManager` field."""
  projectManager: String
  """Checks for equality with the object’s `resource` field."""
  resource: String
  """Checks for equality with the object’s `content` field."""
  content: String
}

"""A connection to a list of `Provider` values."""
type ProvidersConnection {
  """A list of `Provider` objects."""
  nodes: [Provider]!
  """A list of edges which contains the `Provider` and cursor to aid in pagination."""
  edges: [ProvidersEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Provider` you could get from the connection."""
  totalCount: Int!
}

type Provider implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  clientId: String
  clientSecret: String
  hostUri: String
  redirectUrl: String
  redirectUrlApp: String
  icon: String
  name: String!
  active: String
}

"""A `Provider` edge in the connection."""
type ProvidersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Provider` at the end of the edge."""
  node: Provider
}

"""Methods to use when ordering `Provider`."""
enum ProvidersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CLIENT_ID_ASC
  CLIENT_ID_DESC
  CLIENT_SECRET_ASC
  CLIENT_SECRET_DESC
  HOST_URI_ASC
  HOST_URI_DESC
  REDIRECT_URL_ASC
  REDIRECT_URL_DESC
  REDIRECT_URL_APP_ASC
  REDIRECT_URL_APP_DESC
  ICON_ASC
  ICON_DESC
  NAME_ASC
  NAME_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Provider` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProviderCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `clientId` field."""
  clientId: String
  """Checks for equality with the object’s `clientSecret` field."""
  clientSecret: String
  """Checks for equality with the object’s `hostUri` field."""
  hostUri: String
  """Checks for equality with the object’s `redirectUrl` field."""
  redirectUrl: String
  """Checks for equality with the object’s `redirectUrlApp` field."""
  redirectUrlApp: String
  """Checks for equality with the object’s `icon` field."""
  icon: String
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `active` field."""
  active: String
}

"""A connection to a list of `Report` values."""
type ReportsConnection {
  """A list of `Report` objects."""
  nodes: [Report]!
  """A list of edges which contains the `Report` and cursor to aid in pagination."""
  edges: [ReportsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Report` you could get from the connection."""
  totalCount: Int!
}

type Report implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  customer: String
  email: String
  products: String
  quantity: BigFloat
  subtotal: String
  appliedCoupon: String
  created: Datetime
  updated: Datetime
  ipAddress: String
}

"""A `Report` edge in the connection."""
type ReportsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Report` at the end of the edge."""
  node: Report
}

"""Methods to use when ordering `Report`."""
enum ReportsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CUSTOMER_ASC
  CUSTOMER_DESC
  EMAIL_ASC
  EMAIL_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  SUBTOTAL_ASC
  SUBTOTAL_DESC
  APPLIED_COUPON_ASC
  APPLIED_COUPON_DESC
  CREATED_ASC
  CREATED_DESC
  UPDATED_ASC
  UPDATED_DESC
  IP_ADDRESS_ASC
  IP_ADDRESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Report` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input ReportCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `customer` field."""
  customer: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat
  """Checks for equality with the object’s `subtotal` field."""
  subtotal: String
  """Checks for equality with the object’s `appliedCoupon` field."""
  appliedCoupon: String
  """Checks for equality with the object’s `created` field."""
  created: Datetime
  """Checks for equality with the object’s `updated` field."""
  updated: Datetime
  """Checks for equality with the object’s `ipAddress` field."""
  ipAddress: String
}

"""A connection to a list of `Review` values."""
type ReviewsConnection {
  """A list of `Review` objects."""
  nodes: [Review]!
  """A list of edges which contains the `Review` and cursor to aid in pagination."""
  edges: [ReviewsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Review` you could get from the connection."""
  totalCount: Int!
}

type Review implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  firstName: String
  lastName: String
  content: String
  websites: String
  createdAt: Datetime
  shopId: Int!
  commentId: Int!
}

"""A `Review` edge in the connection."""
type ReviewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Review` at the end of the edge."""
  node: Review
}

"""Methods to use when ordering `Review`."""
enum ReviewsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  CONTENT_ASC
  CONTENT_DESC
  WEBSITES_ASC
  WEBSITES_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  SHOP_ID_ASC
  SHOP_ID_DESC
  COMMENT_ID_ASC
  COMMENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Review` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input ReviewCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `firstName` field."""
  firstName: String
  """Checks for equality with the object’s `lastName` field."""
  lastName: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `websites` field."""
  websites: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `shopId` field."""
  shopId: Int
  """Checks for equality with the object’s `commentId` field."""
  commentId: Int
}

"""A connection to a list of `Reward` values."""
type RewardsConnection {
  """A list of `Reward` objects."""
  nodes: [Reward]!
  """A list of edges which contains the `Reward` and cursor to aid in pagination."""
  edges: [RewardsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Reward` you could get from the connection."""
  totalCount: Int!
}

type Reward implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  slug: String
  level: String
  createdAt: Datetime
  coupons: String
  expiration: Date
  categories: String
  articles: String
  products: String
  customers: String
  users: String
}

"""A `Reward` edge in the connection."""
type RewardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Reward` at the end of the edge."""
  node: Reward
}

"""Methods to use when ordering `Reward`."""
enum RewardsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  SLUG_ASC
  SLUG_DESC
  LEVEL_ASC
  LEVEL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  COUPONS_ASC
  COUPONS_DESC
  EXPIRATION_ASC
  EXPIRATION_DESC
  CATEGORIES_ASC
  CATEGORIES_DESC
  ARTICLES_ASC
  ARTICLES_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  USERS_ASC
  USERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Reward` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input RewardCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `slug` field."""
  slug: String
  """Checks for equality with the object’s `level` field."""
  level: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `coupons` field."""
  coupons: String
  """Checks for equality with the object’s `expiration` field."""
  expiration: Date
  """Checks for equality with the object’s `categories` field."""
  categories: String
  """Checks for equality with the object’s `articles` field."""
  articles: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `users` field."""
  users: String
}

"""A connection to a list of `Segment` values."""
type SegmentsConnection {
  """A list of `Segment` objects."""
  nodes: [Segment]!
  """A list of edges which contains the `Segment` and cursor to aid in pagination."""
  edges: [SegmentsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Segment` you could get from the connection."""
  totalCount: Int!
}

type Segment implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  description: String
  website: String
  status: String
  applyTo: String
  customers: String
}

"""A `Segment` edge in the connection."""
type SegmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Segment` at the end of the edge."""
  node: Segment
}

"""Methods to use when ordering `Segment`."""
enum SegmentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  STATUS_ASC
  STATUS_DESC
  APPLY_TO_ASC
  APPLY_TO_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Segment` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input SegmentCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `website` field."""
  website: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `applyTo` field."""
  applyTo: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
}

"""A connection to a list of `Settingscustomer` values."""
type SettingscustomersConnection {
  """A list of `Settingscustomer` objects."""
  nodes: [Settingscustomer]!
  """A list of edges which contains the `Settingscustomer` and cursor to aid in pagination."""
  edges: [SettingscustomersEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Settingscustomer` you could get from the connection."""
  totalCount: Int!
}

type Settingscustomer implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  loginAsCustomer: String
  shareCustomerAccounts: String
  onlineMinutesInterval: String
  customerDataLifetime: String
  emailAfterRegistration: String
}

"""A `Settingscustomer` edge in the connection."""
type SettingscustomersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Settingscustomer` at the end of the edge."""
  node: Settingscustomer
}

"""Methods to use when ordering `Settingscustomer`."""
enum SettingscustomersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  LOGIN_AS_CUSTOMER_ASC
  LOGIN_AS_CUSTOMER_DESC
  SHARE_CUSTOMER_ACCOUNTS_ASC
  SHARE_CUSTOMER_ACCOUNTS_DESC
  ONLINE_MINUTES_INTERVAL_ASC
  ONLINE_MINUTES_INTERVAL_DESC
  CUSTOMER_DATA_LIFETIME_ASC
  CUSTOMER_DATA_LIFETIME_DESC
  EMAIL_AFTER_REGISTRATION_ASC
  EMAIL_AFTER_REGISTRATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Settingscustomer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SettingscustomerCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `loginAsCustomer` field."""
  loginAsCustomer: String
  """Checks for equality with the object’s `shareCustomerAccounts` field."""
  shareCustomerAccounts: String
  """Checks for equality with the object’s `onlineMinutesInterval` field."""
  onlineMinutesInterval: String
  """Checks for equality with the object’s `customerDataLifetime` field."""
  customerDataLifetime: String
  """Checks for equality with the object’s `emailAfterRegistration` field."""
  emailAfterRegistration: String
}

"""A connection to a list of `Settingsgeneral` values."""
type SettingsgeneralsConnection {
  """A list of `Settingsgeneral` objects."""
  nodes: [Settingsgeneral]!
  """A list of edges which contains the `Settingsgeneral` and cursor to aid in pagination."""
  edges: [SettingsgeneralsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Settingsgeneral` you could get from the connection."""
  totalCount: Int!
}

type Settingsgeneral implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  siteTitle: String
  siteTagline: String
  siteWebsite: String
  email: String
  awsS3: String
  googleDrive: String
}

"""A `Settingsgeneral` edge in the connection."""
type SettingsgeneralsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Settingsgeneral` at the end of the edge."""
  node: Settingsgeneral
}

"""Methods to use when ordering `Settingsgeneral`."""
enum SettingsgeneralsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  SITE_TITLE_ASC
  SITE_TITLE_DESC
  SITE_TAGLINE_ASC
  SITE_TAGLINE_DESC
  SITE_WEBSITE_ASC
  SITE_WEBSITE_DESC
  EMAIL_ASC
  EMAIL_DESC
  AWS_S3_ASC
  AWS_S3_DESC
  GOOGLE_DRIVE_ASC
  GOOGLE_DRIVE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Settingsgeneral` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SettingsgeneralCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `siteTitle` field."""
  siteTitle: String
  """Checks for equality with the object’s `siteTagline` field."""
  siteTagline: String
  """Checks for equality with the object’s `siteWebsite` field."""
  siteWebsite: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `awsS3` field."""
  awsS3: String
  """Checks for equality with the object’s `googleDrive` field."""
  googleDrive: String
}

"""A connection to a list of `Settingshop` values."""
type SettingshopsConnection {
  """A list of `Settingshop` objects."""
  nodes: [Settingshop]!
  """A list of edges which contains the `Settingshop` and cursor to aid in pagination."""
  edges: [SettingshopsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Settingshop` you could get from the connection."""
  totalCount: Int!
}

type Settingshop implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  enableProductAssignment: String
  productVideos: String
  sellerPayouts: String
  adminApproval: String
  enableReviewSystem: String
  customerRateVendor: String
  multishipping: String
  vendorTransactionId: String
  enableVendorProductAttribute: String
}

"""A `Settingshop` edge in the connection."""
type SettingshopsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Settingshop` at the end of the edge."""
  node: Settingshop
}

"""Methods to use when ordering `Settingshop`."""
enum SettingshopsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ENABLE_PRODUCT_ASSIGNMENT_ASC
  ENABLE_PRODUCT_ASSIGNMENT_DESC
  PRODUCT_VIDEOS_ASC
  PRODUCT_VIDEOS_DESC
  SELLER_PAYOUTS_ASC
  SELLER_PAYOUTS_DESC
  ADMIN_APPROVAL_ASC
  ADMIN_APPROVAL_DESC
  ENABLE_REVIEW_SYSTEM_ASC
  ENABLE_REVIEW_SYSTEM_DESC
  CUSTOMER_RATE_VENDOR_ASC
  CUSTOMER_RATE_VENDOR_DESC
  MULTISHIPPING_ASC
  MULTISHIPPING_DESC
  VENDOR_TRANSACTION_ID_ASC
  VENDOR_TRANSACTION_ID_DESC
  ENABLE_VENDOR_PRODUCT_ATTRIBUTE_ASC
  ENABLE_VENDOR_PRODUCT_ATTRIBUTE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Settingshop` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SettingshopCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `enableProductAssignment` field."""
  enableProductAssignment: String
  """Checks for equality with the object’s `productVideos` field."""
  productVideos: String
  """Checks for equality with the object’s `sellerPayouts` field."""
  sellerPayouts: String
  """Checks for equality with the object’s `adminApproval` field."""
  adminApproval: String
  """Checks for equality with the object’s `enableReviewSystem` field."""
  enableReviewSystem: String
  """Checks for equality with the object’s `customerRateVendor` field."""
  customerRateVendor: String
  """Checks for equality with the object’s `multishipping` field."""
  multishipping: String
  """Checks for equality with the object’s `vendorTransactionId` field."""
  vendorTransactionId: String
  """Checks for equality with the object’s `enableVendorProductAttribute` field."""
  enableVendorProductAttribute: String
}

"""A connection to a list of `Settingsmarketing` values."""
type SettingsmarketingsConnection {
  """A list of `Settingsmarketing` objects."""
  nodes: [Settingsmarketing]!
  """A list of edges which contains the `Settingsmarketing` and cursor to aid in pagination."""
  edges: [SettingsmarketingsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Settingsmarketing` you could get from the connection."""
  totalCount: Int!
}

type Settingsmarketing implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  mailPort: String
  recaptchaApi: String
  adsenseApi: String
  sitemapUrl: String
  customerDataLifetime: String
  mailServer: String
}

"""A `Settingsmarketing` edge in the connection."""
type SettingsmarketingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Settingsmarketing` at the end of the edge."""
  node: Settingsmarketing
}

"""Methods to use when ordering `Settingsmarketing`."""
enum SettingsmarketingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MAIL_PORT_ASC
  MAIL_PORT_DESC
  RECAPTCHA_API_ASC
  RECAPTCHA_API_DESC
  ADSENSE_API_ASC
  ADSENSE_API_DESC
  SITEMAP_URL_ASC
  SITEMAP_URL_DESC
  CUSTOMER_DATA_LIFETIME_ASC
  CUSTOMER_DATA_LIFETIME_DESC
  MAIL_SERVER_ASC
  MAIL_SERVER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Settingsmarketing` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SettingsmarketingCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `mailPort` field."""
  mailPort: String
  """Checks for equality with the object’s `recaptchaApi` field."""
  recaptchaApi: String
  """Checks for equality with the object’s `adsenseApi` field."""
  adsenseApi: String
  """Checks for equality with the object’s `sitemapUrl` field."""
  sitemapUrl: String
  """Checks for equality with the object’s `customerDataLifetime` field."""
  customerDataLifetime: String
  """Checks for equality with the object’s `mailServer` field."""
  mailServer: String
}

"""A connection to a list of `Settingssale` values."""
type SettingssalesConnection {
  """A list of `Settingssale` objects."""
  nodes: [Settingssale]!
  """A list of edges which contains the `Settingssale` and cursor to aid in pagination."""
  edges: [SettingssalesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Settingssale` you could get from the connection."""
  totalCount: Int!
}

type Settingssale implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  analyticsAccountType: String
  analyticsAccountNumber: String
  analyticsAnonymizeip: String
  analyticsContentExperiments: String
  adwordsConversionid: String
  adwordsConversionlanguage: String
  adwordsConversionformat: String
  adwordsConversioncolor: String
  adwordsConversionlabel: String
  adwordsConversionvalueType: String
  adwordsSendorder: String
  tagManagerAnonymizeip: String
  tagManagerContentexperiments: String
  tagManagerContainerid: String
}

"""A `Settingssale` edge in the connection."""
type SettingssalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Settingssale` at the end of the edge."""
  node: Settingssale
}

"""Methods to use when ordering `Settingssale`."""
enum SettingssalesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ANALYTICS_ACCOUNT_TYPE_ASC
  ANALYTICS_ACCOUNT_TYPE_DESC
  ANALYTICS_ACCOUNT_NUMBER_ASC
  ANALYTICS_ACCOUNT_NUMBER_DESC
  ANALYTICS_ANONYMIZEIP_ASC
  ANALYTICS_ANONYMIZEIP_DESC
  ANALYTICS_CONTENT_EXPERIMENTS_ASC
  ANALYTICS_CONTENT_EXPERIMENTS_DESC
  ADWORDS_CONVERSIONID_ASC
  ADWORDS_CONVERSIONID_DESC
  ADWORDS_CONVERSIONLANGUAGE_ASC
  ADWORDS_CONVERSIONLANGUAGE_DESC
  ADWORDS_CONVERSIONFORMAT_ASC
  ADWORDS_CONVERSIONFORMAT_DESC
  ADWORDS_CONVERSIONCOLOR_ASC
  ADWORDS_CONVERSIONCOLOR_DESC
  ADWORDS_CONVERSIONLABEL_ASC
  ADWORDS_CONVERSIONLABEL_DESC
  ADWORDS_CONVERSIONVALUE_TYPE_ASC
  ADWORDS_CONVERSIONVALUE_TYPE_DESC
  ADWORDS_SENDORDER_ASC
  ADWORDS_SENDORDER_DESC
  TAG_MANAGER_ANONYMIZEIP_ASC
  TAG_MANAGER_ANONYMIZEIP_DESC
  TAG_MANAGER_CONTENTEXPERIMENTS_ASC
  TAG_MANAGER_CONTENTEXPERIMENTS_DESC
  TAG_MANAGER_CONTAINERID_ASC
  TAG_MANAGER_CONTAINERID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Settingssale` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SettingssaleCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `analyticsAccountType` field."""
  analyticsAccountType: String
  """Checks for equality with the object’s `analyticsAccountNumber` field."""
  analyticsAccountNumber: String
  """Checks for equality with the object’s `analyticsAnonymizeip` field."""
  analyticsAnonymizeip: String
  """Checks for equality with the object’s `analyticsContentExperiments` field."""
  analyticsContentExperiments: String
  """Checks for equality with the object’s `adwordsConversionid` field."""
  adwordsConversionid: String
  """Checks for equality with the object’s `adwordsConversionlanguage` field."""
  adwordsConversionlanguage: String
  """Checks for equality with the object’s `adwordsConversionformat` field."""
  adwordsConversionformat: String
  """Checks for equality with the object’s `adwordsConversioncolor` field."""
  adwordsConversioncolor: String
  """Checks for equality with the object’s `adwordsConversionlabel` field."""
  adwordsConversionlabel: String
  """Checks for equality with the object’s `adwordsConversionvalueType` field."""
  adwordsConversionvalueType: String
  """Checks for equality with the object’s `adwordsSendorder` field."""
  adwordsSendorder: String
  """Checks for equality with the object’s `tagManagerAnonymizeip` field."""
  tagManagerAnonymizeip: String
  """Checks for equality with the object’s `tagManagerContentexperiments` field."""
  tagManagerContentexperiments: String
  """Checks for equality with the object’s `tagManagerContainerid` field."""
  tagManagerContainerid: String
}

"""A connection to a list of `Shipment` values."""
type ShipmentsConnection {
  """A list of `Shipment` objects."""
  nodes: [Shipment]!
  """A list of edges which contains the `Shipment` and cursor to aid in pagination."""
  edges: [ShipmentsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Shipment` you could get from the connection."""
  totalCount: Int!
}

type Shipment implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  product: String
  speedGrade: String
  shipDate: Datetime
  carrierName: String!
  transitTime: String
  trackingUrl: String
  image: String
  id: BigInt!
  clientId: String
  clientSecret: String
  country: String
  website: String
}

"""A `Shipment` edge in the connection."""
type ShipmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Shipment` at the end of the edge."""
  node: Shipment
}

"""Methods to use when ordering `Shipment`."""
enum ShipmentsOrderBy {
  NATURAL
  PRODUCT_ASC
  PRODUCT_DESC
  SPEED_GRADE_ASC
  SPEED_GRADE_DESC
  SHIP_DATE_ASC
  SHIP_DATE_DESC
  CARRIER_NAME_ASC
  CARRIER_NAME_DESC
  TRANSIT_TIME_ASC
  TRANSIT_TIME_DESC
  TRACKING_URL_ASC
  TRACKING_URL_DESC
  IMAGE_ASC
  IMAGE_DESC
  ID_ASC
  ID_DESC
  CLIENT_ID_ASC
  CLIENT_ID_DESC
  CLIENT_SECRET_ASC
  CLIENT_SECRET_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Shipment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ShipmentCondition {
  """Checks for equality with the object’s `product` field."""
  product: String
  """Checks for equality with the object’s `speedGrade` field."""
  speedGrade: String
  """Checks for equality with the object’s `shipDate` field."""
  shipDate: Datetime
  """Checks for equality with the object’s `carrierName` field."""
  carrierName: String
  """Checks for equality with the object’s `transitTime` field."""
  transitTime: String
  """Checks for equality with the object’s `trackingUrl` field."""
  trackingUrl: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `clientId` field."""
  clientId: String
  """Checks for equality with the object’s `clientSecret` field."""
  clientSecret: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `website` field."""
  website: String
}

"""A connection to a list of `ShopSetting` values."""
type ShopSettingsConnection {
  """A list of `ShopSetting` objects."""
  nodes: [ShopSetting]!
  """A list of edges which contains the `ShopSetting` and cursor to aid in pagination."""
  edges: [ShopSettingsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `ShopSetting` you could get from the connection."""
  totalCount: Int!
}

type ShopSetting implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  storeName: String
  storePhone: String
  storeHours: String
  country: String
  region: String
  zipcode: String
  city: String
  address: String
  addressTwo: String
  vatNumber: String
  allowState: String
  stateRequiredFor: String
  allowCountries: String
  defaultCountry: String
  optionalZip: String
  europeanUnionCountries: String
  topDestinations: String
  baseCurrency: String
  defaultCurrency: String
  allowedCurrency: String
}

"""A `ShopSetting` edge in the connection."""
type ShopSettingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `ShopSetting` at the end of the edge."""
  node: ShopSetting
}

"""Methods to use when ordering `ShopSetting`."""
enum ShopSettingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  STORE_NAME_ASC
  STORE_NAME_DESC
  STORE_PHONE_ASC
  STORE_PHONE_DESC
  STORE_HOURS_ASC
  STORE_HOURS_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  REGION_ASC
  REGION_DESC
  ZIPCODE_ASC
  ZIPCODE_DESC
  CITY_ASC
  CITY_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  ADDRESS_TWO_ASC
  ADDRESS_TWO_DESC
  VAT_NUMBER_ASC
  VAT_NUMBER_DESC
  ALLOW_STATE_ASC
  ALLOW_STATE_DESC
  STATE_REQUIRED_FOR_ASC
  STATE_REQUIRED_FOR_DESC
  ALLOW_COUNTRIES_ASC
  ALLOW_COUNTRIES_DESC
  DEFAULT_COUNTRY_ASC
  DEFAULT_COUNTRY_DESC
  OPTIONAL_ZIP_ASC
  OPTIONAL_ZIP_DESC
  EUROPEAN_UNION_COUNTRIES_ASC
  EUROPEAN_UNION_COUNTRIES_DESC
  TOP_DESTINATIONS_ASC
  TOP_DESTINATIONS_DESC
  BASE_CURRENCY_ASC
  BASE_CURRENCY_DESC
  DEFAULT_CURRENCY_ASC
  DEFAULT_CURRENCY_DESC
  ALLOWED_CURRENCY_ASC
  ALLOWED_CURRENCY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ShopSetting` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ShopSettingCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `storeName` field."""
  storeName: String
  """Checks for equality with the object’s `storePhone` field."""
  storePhone: String
  """Checks for equality with the object’s `storeHours` field."""
  storeHours: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `region` field."""
  region: String
  """Checks for equality with the object’s `zipcode` field."""
  zipcode: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `address` field."""
  address: String
  """Checks for equality with the object’s `addressTwo` field."""
  addressTwo: String
  """Checks for equality with the object’s `vatNumber` field."""
  vatNumber: String
  """Checks for equality with the object’s `allowState` field."""
  allowState: String
  """Checks for equality with the object’s `stateRequiredFor` field."""
  stateRequiredFor: String
  """Checks for equality with the object’s `allowCountries` field."""
  allowCountries: String
  """Checks for equality with the object’s `defaultCountry` field."""
  defaultCountry: String
  """Checks for equality with the object’s `optionalZip` field."""
  optionalZip: String
  """Checks for equality with the object’s `europeanUnionCountries` field."""
  europeanUnionCountries: String
  """Checks for equality with the object’s `topDestinations` field."""
  topDestinations: String
  """Checks for equality with the object’s `baseCurrency` field."""
  baseCurrency: String
  """Checks for equality with the object’s `defaultCurrency` field."""
  defaultCurrency: String
  """Checks for equality with the object’s `allowedCurrency` field."""
  allowedCurrency: String
}

"""A connection to a list of `Shop` values."""
type ShopsConnection {
  """A list of `Shop` objects."""
  nodes: [Shop]!
  """A list of edges which contains the `Shop` and cursor to aid in pagination."""
  edges: [ShopsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Shop` you could get from the connection."""
  totalCount: Int!
}

"""A `Shop` edge in the connection."""
type ShopsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Shop` at the end of the edge."""
  node: Shop
}

"""A connection to a list of `Source` values."""
type SourcesConnection {
  """A list of `Source` objects."""
  nodes: [Source]!
  """A list of edges which contains the `Source` and cursor to aid in pagination."""
  edges: [SourcesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Source` you could get from the connection."""
  totalCount: Int!
}

type Source implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  code: Int!
  enabled: Boolean
  description: String
  latitude: String
  longitude: String
  pickupLocation: Boolean
  contactName: String
  email: String
  phone: BigFloat
  fax: BigFloat
  country: String
  state: String
  city: String
  street: String
  postcode: BigFloat
}

"""A `Source` edge in the connection."""
type SourcesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Source` at the end of the edge."""
  node: Source
}

"""Methods to use when ordering `Source`."""
enum SourcesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CODE_ASC
  CODE_DESC
  ENABLED_ASC
  ENABLED_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  PICKUP_LOCATION_ASC
  PICKUP_LOCATION_DESC
  CONTACT_NAME_ASC
  CONTACT_NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  PHONE_ASC
  PHONE_DESC
  FAX_ASC
  FAX_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  STATE_ASC
  STATE_DESC
  CITY_ASC
  CITY_DESC
  STREET_ASC
  STREET_DESC
  POSTCODE_ASC
  POSTCODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Source` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input SourceCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `code` field."""
  code: Int
  """Checks for equality with the object’s `enabled` field."""
  enabled: Boolean
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `latitude` field."""
  latitude: String
  """Checks for equality with the object’s `longitude` field."""
  longitude: String
  """Checks for equality with the object’s `pickupLocation` field."""
  pickupLocation: Boolean
  """Checks for equality with the object’s `contactName` field."""
  contactName: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `phone` field."""
  phone: BigFloat
  """Checks for equality with the object’s `fax` field."""
  fax: BigFloat
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `street` field."""
  street: String
  """Checks for equality with the object’s `postcode` field."""
  postcode: BigFloat
}

"""A connection to a list of `SpecialDiscount` values."""
type SpecialDiscountsConnection {
  """A list of `SpecialDiscount` objects."""
  nodes: [SpecialDiscount]!
  """A list of edges which contains the `SpecialDiscount` and cursor to aid in pagination."""
  edges: [SpecialDiscountsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `SpecialDiscount` you could get from the connection."""
  totalCount: Int!
}

type SpecialDiscount implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  excerpt: String
  discount: Float
  image: String
  published: Datetime
  rewards: String
  coupons: String
  expiration: Date
  categories: String
  articles: String
  products: String
  customers: String
  users: String
}

"""A `SpecialDiscount` edge in the connection."""
type SpecialDiscountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `SpecialDiscount` at the end of the edge."""
  node: SpecialDiscount
}

"""Methods to use when ordering `SpecialDiscount`."""
enum SpecialDiscountsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EXCERPT_ASC
  EXCERPT_DESC
  DISCOUNT_ASC
  DISCOUNT_DESC
  IMAGE_ASC
  IMAGE_DESC
  PUBLISHED_ASC
  PUBLISHED_DESC
  REWARDS_ASC
  REWARDS_DESC
  COUPONS_ASC
  COUPONS_DESC
  EXPIRATION_ASC
  EXPIRATION_DESC
  CATEGORIES_ASC
  CATEGORIES_DESC
  ARTICLES_ASC
  ARTICLES_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  USERS_ASC
  USERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SpecialDiscount` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SpecialDiscountCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `excerpt` field."""
  excerpt: String
  """Checks for equality with the object’s `discount` field."""
  discount: Float
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `published` field."""
  published: Datetime
  """Checks for equality with the object’s `rewards` field."""
  rewards: String
  """Checks for equality with the object’s `coupons` field."""
  coupons: String
  """Checks for equality with the object’s `expiration` field."""
  expiration: Date
  """Checks for equality with the object’s `categories` field."""
  categories: String
  """Checks for equality with the object’s `articles` field."""
  articles: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `users` field."""
  users: String
}

"""A connection to a list of `State` values."""
type StatesConnection {
  """A list of `State` objects."""
  nodes: [State]!
  """A list of edges which contains the `State` and cursor to aid in pagination."""
  edges: [StatesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `State` you could get from the connection."""
  totalCount: Int!
}

"""A `State` edge in the connection."""
type StatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `State` at the end of the edge."""
  node: State
}

"""A connection to a list of `Statistic` values."""
type StatisticsConnection {
  """A list of `Statistic` objects."""
  nodes: [Statistic]!
  """A list of edges which contains the `Statistic` and cursor to aid in pagination."""
  edges: [StatisticsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Statistic` you could get from the connection."""
  totalCount: Int!
}

type Statistic implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  excerpt: String
  description: String
  image: String
  published: Datetime
  specialOffers: String
  reports: String
  rewards: String
  coupons: String
  expiration: Date
  categories: String
  articles: String
  products: String
  customers: String
  users: String
}

"""A `Statistic` edge in the connection."""
type StatisticsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Statistic` at the end of the edge."""
  node: Statistic
}

"""Methods to use when ordering `Statistic`."""
enum StatisticsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EXCERPT_ASC
  EXCERPT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  IMAGE_ASC
  IMAGE_DESC
  PUBLISHED_ASC
  PUBLISHED_DESC
  SPECIAL_OFFERS_ASC
  SPECIAL_OFFERS_DESC
  REPORTS_ASC
  REPORTS_DESC
  REWARDS_ASC
  REWARDS_DESC
  COUPONS_ASC
  COUPONS_DESC
  EXPIRATION_ASC
  EXPIRATION_DESC
  CATEGORIES_ASC
  CATEGORIES_DESC
  ARTICLES_ASC
  ARTICLES_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  USERS_ASC
  USERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Statistic` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StatisticCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `excerpt` field."""
  excerpt: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `published` field."""
  published: Datetime
  """Checks for equality with the object’s `specialOffers` field."""
  specialOffers: String
  """Checks for equality with the object’s `reports` field."""
  reports: String
  """Checks for equality with the object’s `rewards` field."""
  rewards: String
  """Checks for equality with the object’s `coupons` field."""
  coupons: String
  """Checks for equality with the object’s `expiration` field."""
  expiration: Date
  """Checks for equality with the object’s `categories` field."""
  categories: String
  """Checks for equality with the object’s `articles` field."""
  articles: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `users` field."""
  users: String
}

"""A connection to a list of `Stock` values."""
type StocksConnection {
  """A list of `Stock` objects."""
  nodes: [Stock]!
  """A list of edges which contains the `Stock` and cursor to aid in pagination."""
  edges: [StocksEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Stock` you could get from the connection."""
  totalCount: Int!
}

type Stock implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  enabled: Boolean
  description: String
  website: String
  sources: String
}

"""A `Stock` edge in the connection."""
type StocksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Stock` at the end of the edge."""
  node: Stock
}

"""Methods to use when ordering `Stock`."""
enum StocksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ENABLED_ASC
  ENABLED_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  SOURCES_ASC
  SOURCES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Stock` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input StockCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `enabled` field."""
  enabled: Boolean
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `website` field."""
  website: String
  """Checks for equality with the object’s `sources` field."""
  sources: String
}

"""A connection to a list of `Survey` values."""
type SurveysConnection {
  """A list of `Survey` objects."""
  nodes: [Survey]!
  """A list of edges which contains the `Survey` and cursor to aid in pagination."""
  edges: [SurveysEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Survey` you could get from the connection."""
  totalCount: Int!
}

type Survey implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  assignedTo: String
  status: String
  description: String
  question: String
  answer: String
  submitText: String
  satisfiedText: String
  neitherText: String
  dissatisfiedText: String
}

"""A `Survey` edge in the connection."""
type SurveysEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Survey` at the end of the edge."""
  node: Survey
}

"""Methods to use when ordering `Survey`."""
enum SurveysOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  ASSIGNED_TO_ASC
  ASSIGNED_TO_DESC
  STATUS_ASC
  STATUS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  QUESTION_ASC
  QUESTION_DESC
  ANSWER_ASC
  ANSWER_DESC
  SUBMIT_TEXT_ASC
  SUBMIT_TEXT_DESC
  SATISFIED_TEXT_ASC
  SATISFIED_TEXT_DESC
  NEITHER_TEXT_ASC
  NEITHER_TEXT_DESC
  DISSATISFIED_TEXT_ASC
  DISSATISFIED_TEXT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Survey` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input SurveyCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `assignedTo` field."""
  assignedTo: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `question` field."""
  question: String
  """Checks for equality with the object’s `answer` field."""
  answer: String
  """Checks for equality with the object’s `submitText` field."""
  submitText: String
  """Checks for equality with the object’s `satisfiedText` field."""
  satisfiedText: String
  """Checks for equality with the object’s `neitherText` field."""
  neitherText: String
  """Checks for equality with the object’s `dissatisfiedText` field."""
  dissatisfiedText: String
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """A list of `Tag` objects."""
  nodes: [Tag]!
  """A list of edges which contains the `Tag` and cursor to aid in pagination."""
  edges: [TagsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

type Tag implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  excerpt: String
  categories: String
  articles: String
  products: String
  customers: String
  users: String
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Tag` at the end of the edge."""
  node: Tag
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EXCERPT_ASC
  EXCERPT_DESC
  CATEGORIES_ASC
  CATEGORIES_DESC
  ARTICLES_ASC
  ARTICLES_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  CUSTOMERS_ASC
  CUSTOMERS_DESC
  USERS_ASC
  USERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input TagCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `excerpt` field."""
  excerpt: String
  """Checks for equality with the object’s `categories` field."""
  categories: String
  """Checks for equality with the object’s `articles` field."""
  articles: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `customers` field."""
  customers: String
  """Checks for equality with the object’s `users` field."""
  users: String
}

"""A connection to a list of `Target` values."""
type TargetsConnection {
  """A list of `Target` objects."""
  nodes: [Target]!
  """A list of edges which contains the `Target` and cursor to aid in pagination."""
  edges: [TargetsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Target` you could get from the connection."""
  totalCount: Int!
}

type Target implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  prefix: String
  firstName: String
  lastName: String
  department: String
  accountName: String
  address: String
  postalcode: String
  city: String
  state: String
  country: String
  email: String
  description: String
  fax: String
  website: String
  mobile: String
  jobTitle: String
  altAddress: String
  altPostalcode: String
  altCity: String
  altState: String
  altCountry: String
  officePhone: String
  customerName: String
  emailOptOut: String
  donotcall: String
}

"""A `Target` edge in the connection."""
type TargetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Target` at the end of the edge."""
  node: Target
}

"""Methods to use when ordering `Target`."""
enum TargetsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PREFIX_ASC
  PREFIX_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  DEPARTMENT_ASC
  DEPARTMENT_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  POSTALCODE_ASC
  POSTALCODE_DESC
  CITY_ASC
  CITY_DESC
  STATE_ASC
  STATE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  EMAIL_ASC
  EMAIL_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FAX_ASC
  FAX_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  MOBILE_ASC
  MOBILE_DESC
  JOB_TITLE_ASC
  JOB_TITLE_DESC
  ALT_ADDRESS_ASC
  ALT_ADDRESS_DESC
  ALT_POSTALCODE_ASC
  ALT_POSTALCODE_DESC
  ALT_CITY_ASC
  ALT_CITY_DESC
  ALT_STATE_ASC
  ALT_STATE_DESC
  ALT_COUNTRY_ASC
  ALT_COUNTRY_DESC
  OFFICE_PHONE_ASC
  OFFICE_PHONE_DESC
  CUSTOMER_NAME_ASC
  CUSTOMER_NAME_DESC
  EMAIL_OPT_OUT_ASC
  EMAIL_OPT_OUT_DESC
  DONOTCALL_ASC
  DONOTCALL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Target` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input TargetCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `prefix` field."""
  prefix: String
  """Checks for equality with the object’s `firstName` field."""
  firstName: String
  """Checks for equality with the object’s `lastName` field."""
  lastName: String
  """Checks for equality with the object’s `department` field."""
  department: String
  """Checks for equality with the object’s `accountName` field."""
  accountName: String
  """Checks for equality with the object’s `address` field."""
  address: String
  """Checks for equality with the object’s `postalcode` field."""
  postalcode: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `fax` field."""
  fax: String
  """Checks for equality with the object’s `website` field."""
  website: String
  """Checks for equality with the object’s `mobile` field."""
  mobile: String
  """Checks for equality with the object’s `jobTitle` field."""
  jobTitle: String
  """Checks for equality with the object’s `altAddress` field."""
  altAddress: String
  """Checks for equality with the object’s `altPostalcode` field."""
  altPostalcode: String
  """Checks for equality with the object’s `altCity` field."""
  altCity: String
  """Checks for equality with the object’s `altState` field."""
  altState: String
  """Checks for equality with the object’s `altCountry` field."""
  altCountry: String
  """Checks for equality with the object’s `officePhone` field."""
  officePhone: String
  """Checks for equality with the object’s `customerName` field."""
  customerName: String
  """Checks for equality with the object’s `emailOptOut` field."""
  emailOptOut: String
  """Checks for equality with the object’s `donotcall` field."""
  donotcall: String
}

"""A connection to a list of `Task` values."""
type TasksConnection {
  """A list of `Task` objects."""
  nodes: [Task]!
  """A list of edges which contains the `Task` and cursor to aid in pagination."""
  edges: [TasksEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection."""
type TasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Task` at the end of the edge."""
  node: Task
}

"""A connection to a list of `TaxCategory` values."""
type TaxCategoriesConnection {
  """A list of `TaxCategory` objects."""
  nodes: [TaxCategory]!
  """A list of edges which contains the `TaxCategory` and cursor to aid in pagination."""
  edges: [TaxCategoriesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `TaxCategory` you could get from the connection."""
  totalCount: Int!
}

type TaxCategory implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  default: String
}

"""A `TaxCategory` edge in the connection."""
type TaxCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `TaxCategory` at the end of the edge."""
  node: TaxCategory
}

"""Methods to use when ordering `TaxCategory`."""
enum TaxCategoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  DEFAULT_ASC
  DEFAULT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TaxCategory` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TaxCategoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `default` field."""
  default: String
}

"""A connection to a list of `Theme` values."""
type ThemesConnection {
  """A list of `Theme` objects."""
  nodes: [Theme]!
  """A list of edges which contains the `Theme` and cursor to aid in pagination."""
  edges: [ThemesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Theme` you could get from the connection."""
  totalCount: Int!
}

type Theme implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  title: String
  parentTheme: String
  themePath: String
  action: String
  websiteId: BigInt!
  """Reads a single `Website` that is related to this `Theme`."""
  websiteByWebsiteId: Website
}

type Website implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  url: String
  shop: String
  store: String
  """Reads and enables pagination through a set of `Theme`."""
  themesByWebsiteId(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Theme`."""
    orderBy: [ThemesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ThemeCondition
  ): ThemesConnection!
  """Reads and enables pagination through a set of `Theme`."""
  themesByWebsiteIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Theme`."""
    orderBy: [ThemesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ThemeCondition
  ): [Theme!]!
}

"""Methods to use when ordering `Theme`."""
enum ThemesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  PARENT_THEME_ASC
  PARENT_THEME_DESC
  THEME_PATH_ASC
  THEME_PATH_DESC
  ACTION_ASC
  ACTION_DESC
  WEBSITE_ID_ASC
  WEBSITE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Theme` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input ThemeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `title` field."""
  title: String
  """Checks for equality with the object’s `parentTheme` field."""
  parentTheme: String
  """Checks for equality with the object’s `themePath` field."""
  themePath: String
  """Checks for equality with the object’s `action` field."""
  action: String
  """Checks for equality with the object’s `websiteId` field."""
  websiteId: BigInt
}

"""A `Theme` edge in the connection."""
type ThemesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Theme` at the end of the edge."""
  node: Theme
}

"""A connection to a list of `Ticketing` values."""
type TicketingsConnection {
  """A list of `Ticketing` objects."""
  nodes: [Ticketing]!
  """A list of edges which contains the `Ticketing` and cursor to aid in pagination."""
  edges: [TicketingsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Ticketing` you could get from the connection."""
  totalCount: Int!
}

"""A `Ticketing` edge in the connection."""
type TicketingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Ticketing` at the end of the edge."""
  node: Ticketing
}

"""A connection to a list of `UploadFile` values."""
type UploadFilesConnection {
  """A list of `UploadFile` objects."""
  nodes: [UploadFile]!
  """A list of edges which contains the `UploadFile` and cursor to aid in pagination."""
  edges: [UploadFilesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `UploadFile` you could get from the connection."""
  totalCount: Int!
}

type UploadFile implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: BigFloat!
  url: String!
  previewUrl: String
  provider: String!
  providerMetadata: JSON
  createdBy: Int
  updatedBy: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""A `UploadFile` edge in the connection."""
type UploadFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `UploadFile` at the end of the edge."""
  node: UploadFile
}

"""Methods to use when ordering `UploadFile`."""
enum UploadFilesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ALTERNATIVE_TEXT_ASC
  ALTERNATIVE_TEXT_DESC
  CAPTION_ASC
  CAPTION_DESC
  WIDTH_ASC
  WIDTH_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  FORMATS_ASC
  FORMATS_DESC
  HASH_ASC
  HASH_DESC
  EXT_ASC
  EXT_DESC
  MIME_ASC
  MIME_DESC
  SIZE_ASC
  SIZE_DESC
  URL_ASC
  URL_DESC
  PREVIEW_URL_ASC
  PREVIEW_URL_DESC
  PROVIDER_ASC
  PROVIDER_DESC
  PROVIDER_METADATA_ASC
  PROVIDER_METADATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UploadFile` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UploadFileCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `alternativeText` field."""
  alternativeText: String
  """Checks for equality with the object’s `caption` field."""
  caption: String
  """Checks for equality with the object’s `width` field."""
  width: Int
  """Checks for equality with the object’s `height` field."""
  height: Int
  """Checks for equality with the object’s `formats` field."""
  formats: JSON
  """Checks for equality with the object’s `hash` field."""
  hash: String
  """Checks for equality with the object’s `ext` field."""
  ext: String
  """Checks for equality with the object’s `mime` field."""
  mime: String
  """Checks for equality with the object’s `size` field."""
  size: BigFloat
  """Checks for equality with the object’s `url` field."""
  url: String
  """Checks for equality with the object’s `previewUrl` field."""
  previewUrl: String
  """Checks for equality with the object’s `provider` field."""
  provider: String
  """Checks for equality with the object’s `providerMetadata` field."""
  providerMetadata: JSON
  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int
  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `UploadFileMorph` values."""
type UploadFileMorphsConnection {
  """A list of `UploadFileMorph` objects."""
  nodes: [UploadFileMorph]!
  """A list of edges which contains the `UploadFileMorph` and cursor to aid in pagination."""
  edges: [UploadFileMorphsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `UploadFileMorph` you could get from the connection."""
  totalCount: Int!
}

type UploadFileMorph implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  uploadFileId: Int
  relatedId: Int
  relatedType: String
  field: String
  order: Int
}

"""A `UploadFileMorph` edge in the connection."""
type UploadFileMorphsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `UploadFileMorph` at the end of the edge."""
  node: UploadFileMorph
}

"""Methods to use when ordering `UploadFileMorph`."""
enum UploadFileMorphsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UPLOAD_FILE_ID_ASC
  UPLOAD_FILE_ID_DESC
  RELATED_ID_ASC
  RELATED_ID_DESC
  RELATED_TYPE_ASC
  RELATED_TYPE_DESC
  FIELD_ASC
  FIELD_DESC
  ORDER_ASC
  ORDER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UploadFileMorph` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UploadFileMorphCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `uploadFileId` field."""
  uploadFileId: Int
  """Checks for equality with the object’s `relatedId` field."""
  relatedId: Int
  """Checks for equality with the object’s `relatedType` field."""
  relatedType: String
  """Checks for equality with the object’s `field` field."""
  field: String
  """Checks for equality with the object’s `order` field."""
  order: Int
}

"""A connection to a list of `UrlRewrite` values."""
type UrlRewritesConnection {
  """A list of `UrlRewrite` objects."""
  nodes: [UrlRewrite]!
  """A list of edges which contains the `UrlRewrite` and cursor to aid in pagination."""
  edges: [UrlRewritesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `UrlRewrite` you could get from the connection."""
  totalCount: Int!
}

type UrlRewrite implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: Int!
  requestPath: String
  description: String
  redirectType: Boolean
  targetPath: String
  store: String
}

"""A `UrlRewrite` edge in the connection."""
type UrlRewritesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `UrlRewrite` at the end of the edge."""
  node: UrlRewrite
}

"""Methods to use when ordering `UrlRewrite`."""
enum UrlRewritesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REQUEST_PATH_ASC
  REQUEST_PATH_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  REDIRECT_TYPE_ASC
  REDIRECT_TYPE_DESC
  TARGET_PATH_ASC
  TARGET_PATH_DESC
  STORE_ASC
  STORE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UrlRewrite` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UrlRewriteCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `requestPath` field."""
  requestPath: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `redirectType` field."""
  redirectType: Boolean
  """Checks for equality with the object’s `targetPath` field."""
  targetPath: String
  """Checks for equality with the object’s `store` field."""
  store: String
}

"""A connection to a list of `Visit` values."""
type VisitsConnection {
  """A list of `Visit` objects."""
  nodes: [Visit]!
  """A list of edges which contains the `Visit` and cursor to aid in pagination."""
  edges: [VisitsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Visit` you could get from the connection."""
  totalCount: Int!
}

type Visit implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  location: String
  username: String
  reason: String
  content: String
  emergency: String
  startDate: String
  endDate: String
  task: String
  meeting: String
}

"""A `Visit` edge in the connection."""
type VisitsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Visit` at the end of the edge."""
  node: Visit
}

"""Methods to use when ordering `Visit`."""
enum VisitsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  LOCATION_ASC
  LOCATION_DESC
  USERNAME_ASC
  USERNAME_DESC
  REASON_ASC
  REASON_DESC
  CONTENT_ASC
  CONTENT_DESC
  EMERGENCY_ASC
  EMERGENCY_DESC
  START_DATE_ASC
  START_DATE_DESC
  END_DATE_ASC
  END_DATE_DESC
  TASK_ASC
  TASK_DESC
  MEETING_ASC
  MEETING_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Visit` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input VisitCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `location` field."""
  location: String
  """Checks for equality with the object’s `username` field."""
  username: String
  """Checks for equality with the object’s `reason` field."""
  reason: String
  """Checks for equality with the object’s `content` field."""
  content: String
  """Checks for equality with the object’s `emergency` field."""
  emergency: String
  """Checks for equality with the object’s `startDate` field."""
  startDate: String
  """Checks for equality with the object’s `endDate` field."""
  endDate: String
  """Checks for equality with the object’s `task` field."""
  task: String
  """Checks for equality with the object’s `meeting` field."""
  meeting: String
}

"""A connection to a list of `Warehouse` values."""
type WarehousesConnection {
  """A list of `Warehouse` objects."""
  nodes: [Warehouse]!
  """A list of edges which contains the `Warehouse` and cursor to aid in pagination."""
  edges: [WarehousesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Warehouse` you could get from the connection."""
  totalCount: Int!
}

type Warehouse implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  description: String
  city: String
  state: String
  country: String
  postal: String
  status: String
  image: String
  products: String
  category: String
  isPublic: String
}

"""A `Warehouse` edge in the connection."""
type WarehousesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Warehouse` at the end of the edge."""
  node: Warehouse
}

"""Methods to use when ordering `Warehouse`."""
enum WarehousesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CITY_ASC
  CITY_DESC
  STATE_ASC
  STATE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  POSTAL_ASC
  POSTAL_DESC
  STATUS_ASC
  STATUS_DESC
  IMAGE_ASC
  IMAGE_DESC
  PRODUCTS_ASC
  PRODUCTS_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Warehouse` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WarehouseCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `postal` field."""
  postal: String
  """Checks for equality with the object’s `status` field."""
  status: String
  """Checks for equality with the object’s `image` field."""
  image: String
  """Checks for equality with the object’s `products` field."""
  products: String
  """Checks for equality with the object’s `category` field."""
  category: String
  """Checks for equality with the object’s `isPublic` field."""
  isPublic: String
}

"""A connection to a list of `Webhook` values."""
type WebhooksConnection {
  """A list of `Webhook` objects."""
  nodes: [Webhook]!
  """A list of edges which contains the `Webhook` and cursor to aid in pagination."""
  edges: [WebhooksEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Webhook` you could get from the connection."""
  totalCount: Int!
}

type Webhook implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String!
  url: String!
  headers: String
  create: String
  retrieve: String
  update: String
  delete: String
  publish: String
  unpublish: String
}

"""A `Webhook` edge in the connection."""
type WebhooksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Webhook` at the end of the edge."""
  node: Webhook
}

"""Methods to use when ordering `Webhook`."""
enum WebhooksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  URL_ASC
  URL_DESC
  HEADERS_ASC
  HEADERS_DESC
  CREATE_ASC
  CREATE_DESC
  RETRIEVE_ASC
  RETRIEVE_DESC
  UPDATE_ASC
  UPDATE_DESC
  DELETE_ASC
  DELETE_DESC
  PUBLISH_ASC
  PUBLISH_DESC
  UNPUBLISH_ASC
  UNPUBLISH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Webhook` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input WebhookCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `url` field."""
  url: String
  """Checks for equality with the object’s `headers` field."""
  headers: String
  """Checks for equality with the object’s `create` field."""
  create: String
  """Checks for equality with the object’s `retrieve` field."""
  retrieve: String
  """Checks for equality with the object’s `update` field."""
  update: String
  """Checks for equality with the object’s `delete` field."""
  delete: String
  """Checks for equality with the object’s `publish` field."""
  publish: String
  """Checks for equality with the object’s `unpublish` field."""
  unpublish: String
}

"""A connection to a list of `Website` values."""
type WebsitesConnection {
  """A list of `Website` objects."""
  nodes: [Website]!
  """A list of edges which contains the `Website` and cursor to aid in pagination."""
  edges: [WebsitesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Website` you could get from the connection."""
  totalCount: Int!
}

"""A `Website` edge in the connection."""
type WebsitesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Website` at the end of the edge."""
  node: Website
}

"""Methods to use when ordering `Website`."""
enum WebsitesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  URL_ASC
  URL_DESC
  SHOP_ASC
  SHOP_DESC
  STORE_ASC
  STORE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Website` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input WebsiteCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `url` field."""
  url: String
  """Checks for equality with the object’s `shop` field."""
  shop: String
  """Checks for equality with the object’s `store` field."""
  store: String
}

"""A connection to a list of `Wishlist` values."""
type WishlistsConnection {
  """A list of `Wishlist` objects."""
  nodes: [Wishlist]!
  """A list of edges which contains the `Wishlist` and cursor to aid in pagination."""
  edges: [WishlistsEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Wishlist` you could get from the connection."""
  totalCount: Int!
}

"""A `Wishlist` edge in the connection."""
type WishlistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Wishlist` at the end of the edge."""
  node: Wishlist
}

"""A connection to a list of `Zone` values."""
type ZonesConnection {
  """A list of `Zone` objects."""
  nodes: [Zone]!
  """A list of edges which contains the `Zone` and cursor to aid in pagination."""
  edges: [ZonesEdge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Zone` you could get from the connection."""
  totalCount: Int!
}

type Zone implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  name: String
  updatedAt: Datetime
  scope: String
  type: String
  country: String
  code: String
}

"""A `Zone` edge in the connection."""
type ZonesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Zone` at the end of the edge."""
  node: Zone
}

"""Methods to use when ordering `Zone`."""
enum ZonesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  SCOPE_ASC
  SCOPE_DESC
  TYPE_ASC
  TYPE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  CODE_ASC
  CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A condition to be used against `Zone` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input ZoneCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `name` field."""
  name: String
  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
  """Checks for equality with the object’s `scope` field."""
  scope: String
  """Checks for equality with the object’s `type` field."""
  type: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `code` field."""
  code: String
}

type _Role implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  objectId: String!
  createdAt: Datetime
  updatedAt: Datetime
  name: String
  _rperm: [String]
  _wperm: [String]
}

type _User implements Node @key(fields: "nodeId") {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  objectId: String!
  createdAt: Datetime
  updatedAt: Datetime
  username: String
  email: String
  emailVerified: Boolean
  authData: JSON
  _rperm: [String]
  _wperm: [String]
  _hashedPassword: String
  _emailVerifyTokenExpiresAt: Datetime
  _emailVerifyToken: String
  _accountLockoutExpiresAt: Datetime
  _failedLoginCount: Float
  _perishableToken: String
  _perishableTokenExpiresAt: Datetime
  _passwordChangedAt: Datetime
  _passwordHistory: JSON
}

"""A union of all federated types (those that use the @key directive)."""
union _Entity = _Audience | _GlobalConfig | _GraphQlConfig | _Idempotency | _JobSchedule | _JobStatus | _JoinRolesRole | _JoinUsersRole | _PushStatus | Role | _Schema | User | Email | Customer | Comment | Mediamanager | Brand | Product | Coupon | CreditMemo | Order | Quote | Transaction | CustomerPayment | ProductAttribute | ProductAttributeSet | Rating | TaxRate | TaxRule | Return | ProductType | Occassion | Wishlist | Manufacturer | Workspace | Task | Project | Ticketing | Shop | Category | Agreement | Training | Country | State | Checklist | NewsletterSubscriber | CustomerGroup | Message | _PrismaMigration | Account | Analytic | Apitoken | Article | CartPriceRule | Case | CatalogPriceRule | Channel | City | Collection | ContentType | Contract | CoreStore | Currency | CurrencyRate | CurrencySymbol | Customization | Dashboard | EmailTemplate | Event | Fullfillment | GeneralSetting | GiftCertificate | Glossary | Importm | Integration | Internalization | Invitation | Invoice | Knowledgebase | Lead | Meeting | Ooto | Opportunity | Page | Partner | Payment | PdfTemplate | Permission | Plugin | Poll | ProjectTemplate | Provider | Report | Review | Reward | Segment | Settingscustomer | Settingsgeneral | Settingshop | Settingsmarketing | Settingssale | Shipment | ShopSetting | Source | SpecialDiscount | Statistic | Stock | Survey | Tag | Target | TaxCategory | Theme | Website | UploadFile | UploadFileMorph | UrlRewrite | Visit | Warehouse | Webhook | Zone | _Role | _User

scalar _Any

"""Describes our federated service."""
type _Service {
  """
  The GraphQL Schema Language definiton of our endpoint including the
  Apollo Federation directives (but not their definitions or the special
  Apollo Federation fields).
  """
  sdl: String @deprecated(reason: "Only Apollo Federation should use this")
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their
description, they are added for each field in the `Query` type. When you
subscribe to a live query field, the selection set will be evaluated and sent to
the client, and then most things\* that would cause the output of the selection
set to change will trigger the selection set to be re-evaluated and the results
to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified
server-side event occurs. This makes them a lot more efficient than Live
Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """Reads and enables pagination through a set of `_Audience`. (live)"""
  allAudiences(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_Audience`."""
    orderBy: [_AudiencesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _AudienceCondition
  ): _AudiencesConnection
  """Reads a set of `_Audience`. (live)"""
  allAudiencesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_Audience`."""
    orderBy: [_AudiencesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _AudienceCondition
  ): [_Audience!]
  """Reads and enables pagination through a set of `_GlobalConfig`. (live)"""
  allGlobalConfigs(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_GlobalConfig`."""
    orderBy: [_GlobalConfigsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _GlobalConfigCondition
  ): _GlobalConfigsConnection
  """Reads a set of `_GlobalConfig`. (live)"""
  allGlobalConfigsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_GlobalConfig`."""
    orderBy: [_GlobalConfigsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _GlobalConfigCondition
  ): [_GlobalConfig!]
  """Reads and enables pagination through a set of `_GraphQlConfig`. (live)"""
  allGraphQlConfigs(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_GraphQlConfig`."""
    orderBy: [_GraphQlConfigsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _GraphQlConfigCondition
  ): _GraphQlConfigsConnection
  """Reads a set of `_GraphQlConfig`. (live)"""
  allGraphQlConfigsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_GraphQlConfig`."""
    orderBy: [_GraphQlConfigsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _GraphQlConfigCondition
  ): [_GraphQlConfig!]
  """Reads and enables pagination through a set of `_Hook`. (live)"""
  allHooks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_Hook`."""
    orderBy: [_HooksOrderBy!] = [NATURAL]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _HookCondition
  ): _HooksConnection
  """Reads a set of `_Hook`. (live)"""
  allHooksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_Hook`."""
    orderBy: [_HooksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _HookCondition
  ): [_Hook!]
  """Reads and enables pagination through a set of `_Idempotency`. (live)"""
  allIdempotencies(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_Idempotency`."""
    orderBy: [_IdempotenciesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _IdempotencyCondition
  ): _IdempotenciesConnection
  """Reads a set of `_Idempotency`. (live)"""
  allIdempotenciesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_Idempotency`."""
    orderBy: [_IdempotenciesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _IdempotencyCondition
  ): [_Idempotency!]
  """Reads and enables pagination through a set of `_JobSchedule`. (live)"""
  allJobSchedules(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_JobSchedule`."""
    orderBy: [_JobSchedulesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JobScheduleCondition
  ): _JobSchedulesConnection
  """Reads a set of `_JobSchedule`. (live)"""
  allJobSchedulesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_JobSchedule`."""
    orderBy: [_JobSchedulesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JobScheduleCondition
  ): [_JobSchedule!]
  """Reads and enables pagination through a set of `_JobStatus`. (live)"""
  allJobStatuses(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_JobStatus`."""
    orderBy: [_JobStatusesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JobStatusCondition
  ): _JobStatusesConnection
  """Reads a set of `_JobStatus`. (live)"""
  allJobStatusesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_JobStatus`."""
    orderBy: [_JobStatusesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JobStatusCondition
  ): [_JobStatus!]
  """Reads and enables pagination through a set of `_JoinRolesRole`. (live)"""
  allJoinRolesRoles(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_JoinRolesRole`."""
    orderBy: [_JoinRolesRolesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JoinRolesRoleCondition
  ): _JoinRolesRolesConnection
  """Reads a set of `_JoinRolesRole`. (live)"""
  allJoinRolesRolesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_JoinRolesRole`."""
    orderBy: [_JoinRolesRolesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JoinRolesRoleCondition
  ): [_JoinRolesRole!]
  """Reads and enables pagination through a set of `_JoinUsersRole`. (live)"""
  allJoinUsersRoles(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_JoinUsersRole`."""
    orderBy: [_JoinUsersRolesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JoinUsersRoleCondition
  ): _JoinUsersRolesConnection
  """Reads a set of `_JoinUsersRole`. (live)"""
  allJoinUsersRolesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_JoinUsersRole`."""
    orderBy: [_JoinUsersRolesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _JoinUsersRoleCondition
  ): [_JoinUsersRole!]
  """Reads and enables pagination through a set of `_PushStatus`. (live)"""
  allPushStatuses(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_PushStatus`."""
    orderBy: [_PushStatusesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _PushStatusCondition
  ): _PushStatusesConnection
  """Reads a set of `_PushStatus`. (live)"""
  allPushStatusesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_PushStatus`."""
    orderBy: [_PushStatusesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _PushStatusCondition
  ): [_PushStatus!]
  """Reads and enables pagination through a set of `Role`. (live)"""
  allRoles(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Role`."""
    orderBy: [RolesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RoleCondition
  ): RolesConnection
  """Reads a set of `Role`. (live)"""
  allRolesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Role`."""
    orderBy: [RolesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RoleCondition
  ): [Role!]
  """Reads and enables pagination through a set of `_Schema`. (live)"""
  allSchemas(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_Schema`."""
    orderBy: [_SchemasOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _SchemaCondition
  ): _SchemasConnection
  """Reads a set of `_Schema`. (live)"""
  allSchemasList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_Schema`."""
    orderBy: [_SchemasOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _SchemaCondition
  ): [_Schema!]
  """Reads and enables pagination through a set of `User`. (live)"""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): UsersConnection
  """Reads a set of `User`. (live)"""
  allUsersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
  ): [User!]
  """Reads and enables pagination through a set of `_PrismaMigration`. (live)"""
  allPrismaMigrations(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _PrismaMigrationCondition
  ): _PrismaMigrationsConnection
  """Reads a set of `_PrismaMigration`. (live)"""
  allPrismaMigrationsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _PrismaMigrationCondition
  ): [_PrismaMigration!]
  """Reads and enables pagination through a set of `Account`. (live)"""
  allAccounts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AccountCondition
  ): AccountsConnection
  """Reads a set of `Account`. (live)"""
  allAccountsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AccountCondition
  ): [Account!]
  """Reads and enables pagination through a set of `Agreement`. (live)"""
  allAgreements(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): AgreementsConnection
  """Reads a set of `Agreement`. (live)"""
  allAgreementsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Agreement`."""
    orderBy: [AgreementsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AgreementCondition
  ): [Agreement!]
  """Reads and enables pagination through a set of `Analytic`. (live)"""
  allAnalytics(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Analytic`."""
    orderBy: [AnalyticsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AnalyticCondition
  ): AnalyticsConnection
  """Reads a set of `Analytic`. (live)"""
  allAnalyticsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Analytic`."""
    orderBy: [AnalyticsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AnalyticCondition
  ): [Analytic!]
  """Reads and enables pagination through a set of `Apitoken`. (live)"""
  allApitokens(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Apitoken`."""
    orderBy: [ApitokensOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ApitokenCondition
  ): ApitokensConnection
  """Reads a set of `Apitoken`. (live)"""
  allApitokensList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Apitoken`."""
    orderBy: [ApitokensOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ApitokenCondition
  ): [Apitoken!]
  """Reads and enables pagination through a set of `Article`. (live)"""
  allArticles(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ArticleCondition
  ): ArticlesConnection
  """Reads a set of `Article`. (live)"""
  allArticlesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ArticleCondition
  ): [Article!]
  """Reads and enables pagination through a set of `Brand`. (live)"""
  allBrands(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): BrandsConnection
  """Reads a set of `Brand`. (live)"""
  allBrandsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: BrandCondition
  ): [Brand!]
  """Reads and enables pagination through a set of `CartPriceRule`. (live)"""
  allCartPriceRules(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CartPriceRule`."""
    orderBy: [CartPriceRulesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CartPriceRuleCondition
  ): CartPriceRulesConnection
  """Reads a set of `CartPriceRule`. (live)"""
  allCartPriceRulesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CartPriceRule`."""
    orderBy: [CartPriceRulesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CartPriceRuleCondition
  ): [CartPriceRule!]
  """Reads and enables pagination through a set of `Case`. (live)"""
  allCases(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Case`."""
    orderBy: [CasesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CaseCondition
  ): CasesConnection
  """Reads a set of `Case`. (live)"""
  allCasesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Case`."""
    orderBy: [CasesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CaseCondition
  ): [Case!]
  """Reads and enables pagination through a set of `CatalogPriceRule`. (live)"""
  allCatalogPriceRules(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CatalogPriceRule`."""
    orderBy: [CatalogPriceRulesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CatalogPriceRuleCondition
  ): CatalogPriceRulesConnection
  """Reads a set of `CatalogPriceRule`. (live)"""
  allCatalogPriceRulesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CatalogPriceRule`."""
    orderBy: [CatalogPriceRulesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CatalogPriceRuleCondition
  ): [CatalogPriceRule!]
  """Reads and enables pagination through a set of `Category`. (live)"""
  allCategories(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): CategoriesConnection
  """Reads a set of `Category`. (live)"""
  allCategoriesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CategoryCondition
  ): [Category!]
  """Reads and enables pagination through a set of `Channel`. (live)"""
  allChannels(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Channel`."""
    orderBy: [ChannelsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChannelCondition
  ): ChannelsConnection
  """Reads a set of `Channel`. (live)"""
  allChannelsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Channel`."""
    orderBy: [ChannelsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChannelCondition
  ): [Channel!]
  """Reads and enables pagination through a set of `Checklist`. (live)"""
  allChecklists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): ChecklistsConnection
  """Reads a set of `Checklist`. (live)"""
  allChecklistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Checklist`."""
    orderBy: [ChecklistsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ChecklistCondition
  ): [Checklist!]
  """Reads and enables pagination through a set of `City`. (live)"""
  allCities(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `City`."""
    orderBy: [CitiesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CityCondition
  ): CitiesConnection
  """Reads a set of `City`. (live)"""
  allCitiesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `City`."""
    orderBy: [CitiesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CityCondition
  ): [City!]
  """Reads and enables pagination through a set of `Collection`. (live)"""
  allCollections(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CollectionCondition
  ): CollectionsConnection
  """Reads a set of `Collection`. (live)"""
  allCollectionsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CollectionCondition
  ): [Collection!]
  """Reads and enables pagination through a set of `Comment`. (live)"""
  allComments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): CommentsConnection
  """Reads a set of `Comment`. (live)"""
  allCommentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CommentCondition
  ): [Comment!]
  """Reads and enables pagination through a set of `ContentType`. (live)"""
  allContentTypes(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ContentType`."""
    orderBy: [ContentTypesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ContentTypeCondition
  ): ContentTypesConnection
  """Reads a set of `ContentType`. (live)"""
  allContentTypesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ContentType`."""
    orderBy: [ContentTypesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ContentTypeCondition
  ): [ContentType!]
  """Reads and enables pagination through a set of `Contract`. (live)"""
  allContracts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Contract`."""
    orderBy: [ContractsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ContractCondition
  ): ContractsConnection
  """Reads a set of `Contract`. (live)"""
  allContractsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Contract`."""
    orderBy: [ContractsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ContractCondition
  ): [Contract!]
  """Reads and enables pagination through a set of `CoreStore`. (live)"""
  allCoreStores(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CoreStore`."""
    orderBy: [CoreStoresOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CoreStoreCondition
  ): CoreStoresConnection
  """Reads a set of `CoreStore`. (live)"""
  allCoreStoresList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CoreStore`."""
    orderBy: [CoreStoresOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CoreStoreCondition
  ): [CoreStore!]
  """Reads and enables pagination through a set of `Country`. (live)"""
  allCountries(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): CountriesConnection
  """Reads a set of `Country`. (live)"""
  allCountriesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CountryCondition
  ): [Country!]
  """Reads and enables pagination through a set of `Coupon`. (live)"""
  allCoupons(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Coupon`."""
    orderBy: [CouponsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CouponCondition
  ): CouponsConnection
  """Reads a set of `Coupon`. (live)"""
  allCouponsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Coupon`."""
    orderBy: [CouponsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CouponCondition
  ): [Coupon!]
  """Reads and enables pagination through a set of `CreditMemo`. (live)"""
  allCreditMemos(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): CreditMemosConnection
  """Reads a set of `CreditMemo`. (live)"""
  allCreditMemosList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CreditMemo`."""
    orderBy: [CreditMemosOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CreditMemoCondition
  ): [CreditMemo!]
  """Reads and enables pagination through a set of `Currency`. (live)"""
  allCurrencies(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Currency`."""
    orderBy: [CurrenciesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencyCondition
  ): CurrenciesConnection
  """Reads a set of `Currency`. (live)"""
  allCurrenciesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Currency`."""
    orderBy: [CurrenciesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencyCondition
  ): [Currency!]
  """Reads and enables pagination through a set of `CurrencyRate`. (live)"""
  allCurrencyRates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CurrencyRate`."""
    orderBy: [CurrencyRatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencyRateCondition
  ): CurrencyRatesConnection
  """Reads a set of `CurrencyRate`. (live)"""
  allCurrencyRatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CurrencyRate`."""
    orderBy: [CurrencyRatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencyRateCondition
  ): [CurrencyRate!]
  """Reads and enables pagination through a set of `CurrencySymbol`. (live)"""
  allCurrencySymbols(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CurrencySymbol`."""
    orderBy: [CurrencySymbolsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencySymbolCondition
  ): CurrencySymbolsConnection
  """Reads a set of `CurrencySymbol`. (live)"""
  allCurrencySymbolsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CurrencySymbol`."""
    orderBy: [CurrencySymbolsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CurrencySymbolCondition
  ): [CurrencySymbol!]
  """Reads and enables pagination through a set of `CustomerGroup`. (live)"""
  allCustomerGroups(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CustomerGroup`."""
    orderBy: [CustomerGroupsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerGroupCondition
  ): CustomerGroupsConnection
  """Reads a set of `CustomerGroup`. (live)"""
  allCustomerGroupsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CustomerGroup`."""
    orderBy: [CustomerGroupsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerGroupCondition
  ): [CustomerGroup!]
  """Reads and enables pagination through a set of `CustomerPayment`. (live)"""
  allCustomerPayments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `CustomerPayment`."""
    orderBy: [CustomerPaymentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerPaymentCondition
  ): CustomerPaymentsConnection
  """Reads a set of `CustomerPayment`. (live)"""
  allCustomerPaymentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `CustomerPayment`."""
    orderBy: [CustomerPaymentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerPaymentCondition
  ): [CustomerPayment!]
  """Reads and enables pagination through a set of `Customer`. (live)"""
  allCustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): CustomersConnection
  """Reads a set of `Customer`. (live)"""
  allCustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomerCondition
  ): [Customer!]
  """Reads and enables pagination through a set of `Customization`. (live)"""
  allCustomizations(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Customization`."""
    orderBy: [CustomizationsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomizationCondition
  ): CustomizationsConnection
  """Reads a set of `Customization`. (live)"""
  allCustomizationsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Customization`."""
    orderBy: [CustomizationsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: CustomizationCondition
  ): [Customization!]
  """Reads and enables pagination through a set of `Dashboard`. (live)"""
  allDashboards(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Dashboard`."""
    orderBy: [DashboardsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: DashboardCondition
  ): DashboardsConnection
  """Reads a set of `Dashboard`. (live)"""
  allDashboardsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Dashboard`."""
    orderBy: [DashboardsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: DashboardCondition
  ): [Dashboard!]
  """Reads and enables pagination through a set of `EmailTemplate`. (live)"""
  allEmailTemplates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `EmailTemplate`."""
    orderBy: [EmailTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailTemplateCondition
  ): EmailTemplatesConnection
  """Reads a set of `EmailTemplate`. (live)"""
  allEmailTemplatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `EmailTemplate`."""
    orderBy: [EmailTemplatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailTemplateCondition
  ): [EmailTemplate!]
  """Reads and enables pagination through a set of `Email`. (live)"""
  allEmails(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): EmailsConnection
  """Reads a set of `Email`. (live)"""
  allEmailsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Email`."""
    orderBy: [EmailsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EmailCondition
  ): [Email!]
  """Reads and enables pagination through a set of `Event`. (live)"""
  allEvents(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EventCondition
  ): EventsConnection
  """Reads a set of `Event`. (live)"""
  allEventsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: EventCondition
  ): [Event!]
  """Reads and enables pagination through a set of `Fullfillment`. (live)"""
  allFullfillments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Fullfillment`."""
    orderBy: [FullfillmentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: FullfillmentCondition
  ): FullfillmentsConnection
  """Reads a set of `Fullfillment`. (live)"""
  allFullfillmentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Fullfillment`."""
    orderBy: [FullfillmentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: FullfillmentCondition
  ): [Fullfillment!]
  """Reads and enables pagination through a set of `GeneralSetting`. (live)"""
  allGeneralSettings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `GeneralSetting`."""
    orderBy: [GeneralSettingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GeneralSettingCondition
  ): GeneralSettingsConnection
  """Reads a set of `GeneralSetting`. (live)"""
  allGeneralSettingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `GeneralSetting`."""
    orderBy: [GeneralSettingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GeneralSettingCondition
  ): [GeneralSetting!]
  """Reads and enables pagination through a set of `GiftCertificate`. (live)"""
  allGiftCertificates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `GiftCertificate`."""
    orderBy: [GiftCertificatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GiftCertificateCondition
  ): GiftCertificatesConnection
  """Reads a set of `GiftCertificate`. (live)"""
  allGiftCertificatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `GiftCertificate`."""
    orderBy: [GiftCertificatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GiftCertificateCondition
  ): [GiftCertificate!]
  """Reads and enables pagination through a set of `Glossary`. (live)"""
  allGlossaries(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Glossary`."""
    orderBy: [GlossariesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GlossaryCondition
  ): GlossariesConnection
  """Reads a set of `Glossary`. (live)"""
  allGlossariesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Glossary`."""
    orderBy: [GlossariesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: GlossaryCondition
  ): [Glossary!]
  """Reads and enables pagination through a set of `Importm`. (live)"""
  allImportms(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Importm`."""
    orderBy: [ImportmsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ImportmCondition
  ): ImportmsConnection
  """Reads a set of `Importm`. (live)"""
  allImportmsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Importm`."""
    orderBy: [ImportmsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ImportmCondition
  ): [Importm!]
  """Reads and enables pagination through a set of `Integration`. (live)"""
  allIntegrations(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Integration`."""
    orderBy: [IntegrationsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: IntegrationCondition
  ): IntegrationsConnection
  """Reads a set of `Integration`. (live)"""
  allIntegrationsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Integration`."""
    orderBy: [IntegrationsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: IntegrationCondition
  ): [Integration!]
  """Reads and enables pagination through a set of `Internalization`. (live)"""
  allInternalizations(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Internalization`."""
    orderBy: [InternalizationsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InternalizationCondition
  ): InternalizationsConnection
  """Reads a set of `Internalization`. (live)"""
  allInternalizationsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Internalization`."""
    orderBy: [InternalizationsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InternalizationCondition
  ): [Internalization!]
  """Reads and enables pagination through a set of `Invitation`. (live)"""
  allInvitations(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Invitation`."""
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InvitationCondition
  ): InvitationsConnection
  """Reads a set of `Invitation`. (live)"""
  allInvitationsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Invitation`."""
    orderBy: [InvitationsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InvitationCondition
  ): [Invitation!]
  """Reads and enables pagination through a set of `Invoice`. (live)"""
  allInvoices(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InvoiceCondition
  ): InvoicesConnection
  """Reads a set of `Invoice`. (live)"""
  allInvoicesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: InvoiceCondition
  ): [Invoice!]
  """Reads and enables pagination through a set of `Knowledgebase`. (live)"""
  allKnowledgebases(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Knowledgebase`."""
    orderBy: [KnowledgebasesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: KnowledgebaseCondition
  ): KnowledgebasesConnection
  """Reads a set of `Knowledgebase`. (live)"""
  allKnowledgebasesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Knowledgebase`."""
    orderBy: [KnowledgebasesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: KnowledgebaseCondition
  ): [Knowledgebase!]
  """Reads and enables pagination through a set of `Lead`. (live)"""
  allLeads(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Lead`."""
    orderBy: [LeadsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: LeadCondition
  ): LeadsConnection
  """Reads a set of `Lead`. (live)"""
  allLeadsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Lead`."""
    orderBy: [LeadsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: LeadCondition
  ): [Lead!]
  """Reads and enables pagination through a set of `Manufacturer`. (live)"""
  allManufacturers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Manufacturer`."""
    orderBy: [ManufacturersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ManufacturerCondition
  ): ManufacturersConnection
  """Reads a set of `Manufacturer`. (live)"""
  allManufacturersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Manufacturer`."""
    orderBy: [ManufacturersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ManufacturerCondition
  ): [Manufacturer!]
  """Reads and enables pagination through a set of `Mediamanager`. (live)"""
  allMediamanagers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): MediamanagersConnection
  """Reads a set of `Mediamanager`. (live)"""
  allMediamanagersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Mediamanager`."""
    orderBy: [MediamanagersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MediamanagerCondition
  ): [Mediamanager!]
  """Reads and enables pagination through a set of `Meeting`. (live)"""
  allMeetings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Meeting`."""
    orderBy: [MeetingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MeetingCondition
  ): MeetingsConnection
  """Reads a set of `Meeting`. (live)"""
  allMeetingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Meeting`."""
    orderBy: [MeetingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MeetingCondition
  ): [Meeting!]
  """Reads and enables pagination through a set of `Message`. (live)"""
  allMessages(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): MessagesConnection
  """Reads a set of `Message`. (live)"""
  allMessagesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: MessageCondition
  ): [Message!]
  """Reads and enables pagination through a set of `NewsletterSubscriber`. (live)"""
  allNewsletterSubscribers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `NewsletterSubscriber`."""
    orderBy: [NewsletterSubscribersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: NewsletterSubscriberCondition
  ): NewsletterSubscribersConnection
  """Reads a set of `NewsletterSubscriber`. (live)"""
  allNewsletterSubscribersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `NewsletterSubscriber`."""
    orderBy: [NewsletterSubscribersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: NewsletterSubscriberCondition
  ): [NewsletterSubscriber!]
  """Reads and enables pagination through a set of `Occassion`. (live)"""
  allOccassions(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): OccassionsConnection
  """Reads a set of `Occassion`. (live)"""
  allOccassionsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Occassion`."""
    orderBy: [OccassionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OccassionCondition
  ): [Occassion!]
  """Reads and enables pagination through a set of `Ooto`. (live)"""
  allOotos(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Ooto`."""
    orderBy: [OotosOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OotoCondition
  ): OotosConnection
  """Reads a set of `Ooto`. (live)"""
  allOotosList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Ooto`."""
    orderBy: [OotosOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OotoCondition
  ): [Ooto!]
  """Reads and enables pagination through a set of `Opportunity`. (live)"""
  allOpportunities(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OpportunityCondition
  ): OpportunitiesConnection
  """Reads a set of `Opportunity`. (live)"""
  allOpportunitiesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OpportunityCondition
  ): [Opportunity!]
  """Reads and enables pagination through a set of `Order`. (live)"""
  allOrders(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): OrdersConnection
  """Reads a set of `Order`. (live)"""
  allOrdersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OrderCondition
  ): [Order!]
  """Reads and enables pagination through a set of `Page`. (live)"""
  allPages(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PageCondition
  ): PagesConnection
  """Reads a set of `Page`. (live)"""
  allPagesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PageCondition
  ): [Page!]
  """Reads and enables pagination through a set of `Partner`. (live)"""
  allPartners(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Partner`."""
    orderBy: [PartnersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PartnerCondition
  ): PartnersConnection
  """Reads a set of `Partner`. (live)"""
  allPartnersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Partner`."""
    orderBy: [PartnersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PartnerCondition
  ): [Partner!]
  """Reads and enables pagination through a set of `Payment`. (live)"""
  allPayments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PaymentCondition
  ): PaymentsConnection
  """Reads a set of `Payment`. (live)"""
  allPaymentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PaymentCondition
  ): [Payment!]
  """Reads and enables pagination through a set of `PdfTemplate`. (live)"""
  allPdfTemplates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `PdfTemplate`."""
    orderBy: [PdfTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PdfTemplateCondition
  ): PdfTemplatesConnection
  """Reads a set of `PdfTemplate`. (live)"""
  allPdfTemplatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `PdfTemplate`."""
    orderBy: [PdfTemplatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PdfTemplateCondition
  ): [PdfTemplate!]
  """Reads and enables pagination through a set of `Permission`. (live)"""
  allPermissions(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PermissionCondition
  ): PermissionsConnection
  """Reads a set of `Permission`. (live)"""
  allPermissionsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PermissionCondition
  ): [Permission!]
  """Reads and enables pagination through a set of `Plugin`. (live)"""
  allPlugins(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Plugin`."""
    orderBy: [PluginsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PluginCondition
  ): PluginsConnection
  """Reads a set of `Plugin`. (live)"""
  allPluginsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Plugin`."""
    orderBy: [PluginsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PluginCondition
  ): [Plugin!]
  """Reads and enables pagination through a set of `Poll`. (live)"""
  allPolls(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Poll`."""
    orderBy: [PollsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PollCondition
  ): PollsConnection
  """Reads a set of `Poll`. (live)"""
  allPollsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Poll`."""
    orderBy: [PollsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: PollCondition
  ): [Poll!]
  """Reads and enables pagination through a set of `ProductAttribute`. (live)"""
  allProductAttributes(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ProductAttribute`."""
    orderBy: [ProductAttributesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeCondition
  ): ProductAttributesConnection
  """Reads a set of `ProductAttribute`. (live)"""
  allProductAttributesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ProductAttribute`."""
    orderBy: [ProductAttributesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeCondition
  ): [ProductAttribute!]
  """Reads and enables pagination through a set of `ProductAttributeSet`. (live)"""
  allProductAttributeSets(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ProductAttributeSet`."""
    orderBy: [ProductAttributeSetsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeSetCondition
  ): ProductAttributeSetsConnection
  """Reads a set of `ProductAttributeSet`. (live)"""
  allProductAttributeSetsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ProductAttributeSet`."""
    orderBy: [ProductAttributeSetsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductAttributeSetCondition
  ): [ProductAttributeSet!]
  """Reads and enables pagination through a set of `ProductType`. (live)"""
  allProductTypes(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ProductType`."""
    orderBy: [ProductTypesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductTypeCondition
  ): ProductTypesConnection
  """Reads a set of `ProductType`. (live)"""
  allProductTypesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ProductType`."""
    orderBy: [ProductTypesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductTypeCondition
  ): [ProductType!]
  """Reads and enables pagination through a set of `Product`. (live)"""
  allProducts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): ProductsConnection
  """Reads a set of `Product`. (live)"""
  allProductsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProductCondition
  ): [Product!]
  """Reads and enables pagination through a set of `ProjectTemplate`. (live)"""
  allProjectTemplates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ProjectTemplate`."""
    orderBy: [ProjectTemplatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectTemplateCondition
  ): ProjectTemplatesConnection
  """Reads a set of `ProjectTemplate`. (live)"""
  allProjectTemplatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ProjectTemplate`."""
    orderBy: [ProjectTemplatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectTemplateCondition
  ): [ProjectTemplate!]
  """Reads and enables pagination through a set of `Project`. (live)"""
  allProjects(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): ProjectsConnection
  """Reads a set of `Project`. (live)"""
  allProjectsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProjectCondition
  ): [Project!]
  """Reads and enables pagination through a set of `Provider`. (live)"""
  allProviders(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Provider`."""
    orderBy: [ProvidersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProviderCondition
  ): ProvidersConnection
  """Reads a set of `Provider`. (live)"""
  allProvidersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Provider`."""
    orderBy: [ProvidersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ProviderCondition
  ): [Provider!]
  """Reads and enables pagination through a set of `Quote`. (live)"""
  allQuotes(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): QuotesConnection
  """Reads a set of `Quote`. (live)"""
  allQuotesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Quote`."""
    orderBy: [QuotesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: QuoteCondition
  ): [Quote!]
  """Reads and enables pagination through a set of `Rating`. (live)"""
  allRatings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Rating`."""
    orderBy: [RatingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RatingCondition
  ): RatingsConnection
  """Reads a set of `Rating`. (live)"""
  allRatingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Rating`."""
    orderBy: [RatingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RatingCondition
  ): [Rating!]
  """Reads and enables pagination through a set of `Report`. (live)"""
  allReports(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReportCondition
  ): ReportsConnection
  """Reads a set of `Report`. (live)"""
  allReportsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReportCondition
  ): [Report!]
  """Reads and enables pagination through a set of `Return`. (live)"""
  allReturns(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): ReturnsConnection
  """Reads a set of `Return`. (live)"""
  allReturnsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Return`."""
    orderBy: [ReturnsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReturnCondition
  ): [Return!]
  """Reads and enables pagination through a set of `Review`. (live)"""
  allReviews(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReviewCondition
  ): ReviewsConnection
  """Reads a set of `Review`. (live)"""
  allReviewsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ReviewCondition
  ): [Review!]
  """Reads and enables pagination through a set of `Reward`. (live)"""
  allRewards(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Reward`."""
    orderBy: [RewardsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RewardCondition
  ): RewardsConnection
  """Reads a set of `Reward`. (live)"""
  allRewardsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Reward`."""
    orderBy: [RewardsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: RewardCondition
  ): [Reward!]
  """Reads and enables pagination through a set of `Segment`. (live)"""
  allSegments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Segment`."""
    orderBy: [SegmentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SegmentCondition
  ): SegmentsConnection
  """Reads a set of `Segment`. (live)"""
  allSegmentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Segment`."""
    orderBy: [SegmentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SegmentCondition
  ): [Segment!]
  """Reads and enables pagination through a set of `Settingscustomer`. (live)"""
  allSettingscustomers(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Settingscustomer`."""
    orderBy: [SettingscustomersOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingscustomerCondition
  ): SettingscustomersConnection
  """Reads a set of `Settingscustomer`. (live)"""
  allSettingscustomersList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Settingscustomer`."""
    orderBy: [SettingscustomersOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingscustomerCondition
  ): [Settingscustomer!]
  """Reads and enables pagination through a set of `Settingsgeneral`. (live)"""
  allSettingsgenerals(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Settingsgeneral`."""
    orderBy: [SettingsgeneralsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingsgeneralCondition
  ): SettingsgeneralsConnection
  """Reads a set of `Settingsgeneral`. (live)"""
  allSettingsgeneralsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Settingsgeneral`."""
    orderBy: [SettingsgeneralsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingsgeneralCondition
  ): [Settingsgeneral!]
  """Reads and enables pagination through a set of `Settingshop`. (live)"""
  allSettingshops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Settingshop`."""
    orderBy: [SettingshopsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingshopCondition
  ): SettingshopsConnection
  """Reads a set of `Settingshop`. (live)"""
  allSettingshopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Settingshop`."""
    orderBy: [SettingshopsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingshopCondition
  ): [Settingshop!]
  """Reads and enables pagination through a set of `Settingsmarketing`. (live)"""
  allSettingsmarketings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Settingsmarketing`."""
    orderBy: [SettingsmarketingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingsmarketingCondition
  ): SettingsmarketingsConnection
  """Reads a set of `Settingsmarketing`. (live)"""
  allSettingsmarketingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Settingsmarketing`."""
    orderBy: [SettingsmarketingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingsmarketingCondition
  ): [Settingsmarketing!]
  """Reads and enables pagination through a set of `Settingssale`. (live)"""
  allSettingssales(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Settingssale`."""
    orderBy: [SettingssalesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingssaleCondition
  ): SettingssalesConnection
  """Reads a set of `Settingssale`. (live)"""
  allSettingssalesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Settingssale`."""
    orderBy: [SettingssalesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SettingssaleCondition
  ): [Settingssale!]
  """Reads and enables pagination through a set of `Shipment`. (live)"""
  allShipments(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Shipment`."""
    orderBy: [ShipmentsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShipmentCondition
  ): ShipmentsConnection
  """Reads a set of `Shipment`. (live)"""
  allShipmentsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Shipment`."""
    orderBy: [ShipmentsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShipmentCondition
  ): [Shipment!]
  """Reads and enables pagination through a set of `ShopSetting`. (live)"""
  allShopSettings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `ShopSetting`."""
    orderBy: [ShopSettingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopSettingCondition
  ): ShopSettingsConnection
  """Reads a set of `ShopSetting`. (live)"""
  allShopSettingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `ShopSetting`."""
    orderBy: [ShopSettingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopSettingCondition
  ): [ShopSetting!]
  """Reads and enables pagination through a set of `Shop`. (live)"""
  allShops(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): ShopsConnection
  """Reads a set of `Shop`. (live)"""
  allShopsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Shop`."""
    orderBy: [ShopsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ShopCondition
  ): [Shop!]
  """Reads and enables pagination through a set of `Source`. (live)"""
  allSources(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Source`."""
    orderBy: [SourcesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SourceCondition
  ): SourcesConnection
  """Reads a set of `Source`. (live)"""
  allSourcesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Source`."""
    orderBy: [SourcesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SourceCondition
  ): [Source!]
  """Reads and enables pagination through a set of `SpecialDiscount`. (live)"""
  allSpecialDiscounts(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `SpecialDiscount`."""
    orderBy: [SpecialDiscountsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SpecialDiscountCondition
  ): SpecialDiscountsConnection
  """Reads a set of `SpecialDiscount`. (live)"""
  allSpecialDiscountsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `SpecialDiscount`."""
    orderBy: [SpecialDiscountsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SpecialDiscountCondition
  ): [SpecialDiscount!]
  """Reads and enables pagination through a set of `State`. (live)"""
  allStates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): StatesConnection
  """Reads a set of `State`. (live)"""
  allStatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `State`."""
    orderBy: [StatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StateCondition
  ): [State!]
  """Reads and enables pagination through a set of `Statistic`. (live)"""
  allStatistics(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Statistic`."""
    orderBy: [StatisticsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StatisticCondition
  ): StatisticsConnection
  """Reads a set of `Statistic`. (live)"""
  allStatisticsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Statistic`."""
    orderBy: [StatisticsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StatisticCondition
  ): [Statistic!]
  """Reads and enables pagination through a set of `Stock`. (live)"""
  allStocks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Stock`."""
    orderBy: [StocksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StockCondition
  ): StocksConnection
  """Reads a set of `Stock`. (live)"""
  allStocksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Stock`."""
    orderBy: [StocksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: StockCondition
  ): [Stock!]
  """Reads and enables pagination through a set of `Survey`. (live)"""
  allSurveys(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Survey`."""
    orderBy: [SurveysOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SurveyCondition
  ): SurveysConnection
  """Reads a set of `Survey`. (live)"""
  allSurveysList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Survey`."""
    orderBy: [SurveysOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: SurveyCondition
  ): [Survey!]
  """Reads and enables pagination through a set of `Tag`. (live)"""
  allTags(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TagCondition
  ): TagsConnection
  """Reads a set of `Tag`. (live)"""
  allTagsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TagCondition
  ): [Tag!]
  """Reads and enables pagination through a set of `Target`. (live)"""
  allTargets(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Target`."""
    orderBy: [TargetsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TargetCondition
  ): TargetsConnection
  """Reads a set of `Target`. (live)"""
  allTargetsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Target`."""
    orderBy: [TargetsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TargetCondition
  ): [Target!]
  """Reads and enables pagination through a set of `Task`. (live)"""
  allTasks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): TasksConnection
  """Reads a set of `Task`. (live)"""
  allTasksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaskCondition
  ): [Task!]
  """Reads and enables pagination through a set of `TaxCategory`. (live)"""
  allTaxCategories(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `TaxCategory`."""
    orderBy: [TaxCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxCategoryCondition
  ): TaxCategoriesConnection
  """Reads a set of `TaxCategory`. (live)"""
  allTaxCategoriesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `TaxCategory`."""
    orderBy: [TaxCategoriesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxCategoryCondition
  ): [TaxCategory!]
  """Reads and enables pagination through a set of `TaxRate`. (live)"""
  allTaxRates(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `TaxRate`."""
    orderBy: [TaxRatesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRateCondition
  ): TaxRatesConnection
  """Reads a set of `TaxRate`. (live)"""
  allTaxRatesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `TaxRate`."""
    orderBy: [TaxRatesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRateCondition
  ): [TaxRate!]
  """Reads and enables pagination through a set of `TaxRule`. (live)"""
  allTaxRules(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `TaxRule`."""
    orderBy: [TaxRulesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRuleCondition
  ): TaxRulesConnection
  """Reads a set of `TaxRule`. (live)"""
  allTaxRulesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `TaxRule`."""
    orderBy: [TaxRulesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TaxRuleCondition
  ): [TaxRule!]
  """Reads and enables pagination through a set of `Theme`. (live)"""
  allThemes(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Theme`."""
    orderBy: [ThemesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ThemeCondition
  ): ThemesConnection
  """Reads a set of `Theme`. (live)"""
  allThemesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Theme`."""
    orderBy: [ThemesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ThemeCondition
  ): [Theme!]
  """Reads and enables pagination through a set of `Ticketing`. (live)"""
  allTicketings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Ticketing`."""
    orderBy: [TicketingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TicketingCondition
  ): TicketingsConnection
  """Reads a set of `Ticketing`. (live)"""
  allTicketingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Ticketing`."""
    orderBy: [TicketingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TicketingCondition
  ): [Ticketing!]
  """Reads and enables pagination through a set of `Training`. (live)"""
  allTrainings(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): TrainingsConnection
  """Reads a set of `Training`. (live)"""
  allTrainingsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Training`."""
    orderBy: [TrainingsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TrainingCondition
  ): [Training!]
  """Reads and enables pagination through a set of `Transaction`. (live)"""
  allTransactions(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): TransactionsConnection
  """Reads a set of `Transaction`. (live)"""
  allTransactionsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: TransactionCondition
  ): [Transaction!]
  """Reads and enables pagination through a set of `UploadFile`. (live)"""
  allUploadFiles(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `UploadFile`."""
    orderBy: [UploadFilesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UploadFileCondition
  ): UploadFilesConnection
  """Reads a set of `UploadFile`. (live)"""
  allUploadFilesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `UploadFile`."""
    orderBy: [UploadFilesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UploadFileCondition
  ): [UploadFile!]
  """Reads and enables pagination through a set of `UploadFileMorph`. (live)"""
  allUploadFileMorphs(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `UploadFileMorph`."""
    orderBy: [UploadFileMorphsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UploadFileMorphCondition
  ): UploadFileMorphsConnection
  """Reads a set of `UploadFileMorph`. (live)"""
  allUploadFileMorphsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `UploadFileMorph`."""
    orderBy: [UploadFileMorphsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UploadFileMorphCondition
  ): [UploadFileMorph!]
  """Reads and enables pagination through a set of `UrlRewrite`. (live)"""
  allUrlRewrites(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `UrlRewrite`."""
    orderBy: [UrlRewritesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UrlRewriteCondition
  ): UrlRewritesConnection
  """Reads a set of `UrlRewrite`. (live)"""
  allUrlRewritesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `UrlRewrite`."""
    orderBy: [UrlRewritesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UrlRewriteCondition
  ): [UrlRewrite!]
  """Reads and enables pagination through a set of `Visit`. (live)"""
  allVisits(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Visit`."""
    orderBy: [VisitsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: VisitCondition
  ): VisitsConnection
  """Reads a set of `Visit`. (live)"""
  allVisitsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Visit`."""
    orderBy: [VisitsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: VisitCondition
  ): [Visit!]
  """Reads and enables pagination through a set of `Warehouse`. (live)"""
  allWarehouses(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Warehouse`."""
    orderBy: [WarehousesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WarehouseCondition
  ): WarehousesConnection
  """Reads a set of `Warehouse`. (live)"""
  allWarehousesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Warehouse`."""
    orderBy: [WarehousesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WarehouseCondition
  ): [Warehouse!]
  """Reads and enables pagination through a set of `Webhook`. (live)"""
  allWebhooks(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Webhook`."""
    orderBy: [WebhooksOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WebhookCondition
  ): WebhooksConnection
  """Reads a set of `Webhook`. (live)"""
  allWebhooksList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Webhook`."""
    orderBy: [WebhooksOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WebhookCondition
  ): [Webhook!]
  """Reads and enables pagination through a set of `Website`. (live)"""
  allWebsites(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Website`."""
    orderBy: [WebsitesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WebsiteCondition
  ): WebsitesConnection
  """Reads a set of `Website`. (live)"""
  allWebsitesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Website`."""
    orderBy: [WebsitesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WebsiteCondition
  ): [Website!]
  """Reads and enables pagination through a set of `Wishlist`. (live)"""
  allWishlists(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Wishlist`."""
    orderBy: [WishlistsOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WishlistCondition
  ): WishlistsConnection
  """Reads a set of `Wishlist`. (live)"""
  allWishlistsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Wishlist`."""
    orderBy: [WishlistsOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WishlistCondition
  ): [Wishlist!]
  """Reads and enables pagination through a set of `Workspace`. (live)"""
  allWorkspaces(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): WorkspacesConnection
  """Reads a set of `Workspace`. (live)"""
  allWorkspacesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Workspace`."""
    orderBy: [WorkspacesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: WorkspaceCondition
  ): [Workspace!]
  """Reads and enables pagination through a set of `Zone`. (live)"""
  allZones(
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """The method to use when ordering `Zone`."""
    orderBy: [ZonesOrderBy!] = [PRIMARY_KEY_ASC]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ZoneCondition
  ): ZonesConnection
  """Reads a set of `Zone`. (live)"""
  allZonesList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Zone`."""
    orderBy: [ZonesOrderBy!]
    """A condition to be used in determining which values should be returned by the collection."""
    condition: ZoneCondition
  ): [Zone!]
  """ (live)"""
  _audienceByObjectId(objectId: String!): _Audience
  """ (live)"""
  _globalConfigByObjectId(objectId: String!): _GlobalConfig
  """ (live)"""
  _graphQlConfigByObjectId(objectId: String!): _GraphQlConfig
  """ (live)"""
  _idempotencyByObjectId(objectId: String!): _Idempotency
  """ (live)"""
  _jobScheduleByObjectId(objectId: String!): _JobSchedule
  """ (live)"""
  _jobStatusByObjectId(objectId: String!): _JobStatus
  """ (live)"""
  _joinRolesRoleByRelatedIdAndOwningId(relatedId: String!, owningId: String!): _JoinRolesRole
  """ (live)"""
  _joinUsersRoleByRelatedIdAndOwningId(relatedId: String!, owningId: String!): _JoinUsersRole
  """ (live)"""
  _pushStatusByObjectId(objectId: String!): _PushStatus
  """ (live)"""
  _roleByObjectId(objectId: String!): _Role
  """ (live)"""
  _schemaByClassName(className: String!): _Schema
  """ (live)"""
  _userByObjectId(objectId: String!): _User
  """ (live)"""
  _prismaMigrationById(id: String!): _PrismaMigration
  """ (live)"""
  accountById(id: BigInt!): Account
  """ (live)"""
  agreementById(id: Int!): Agreement
  """ (live)"""
  analyticById(id: BigInt!): Analytic
  """ (live)"""
  apitokenById(id: BigInt!): Apitoken
  """ (live)"""
  articleById(id: Int!): Article
  """ (live)"""
  brandById(id: BigInt!): Brand
  """ (live)"""
  cartPriceRuleById(id: Int!): CartPriceRule
  """ (live)"""
  caseById(id: BigInt!): Case
  """ (live)"""
  catalogPriceRuleById(id: Int!): CatalogPriceRule
  """ (live)"""
  categoryById(id: Int!): Category
  """ (live)"""
  channelById(id: BigInt!): Channel
  """ (live)"""
  checklistById(id: BigInt!): Checklist
  """ (live)"""
  cityById(id: Int!): City
  """ (live)"""
  collectionById(id: BigInt!): Collection
  """ (live)"""
  commentById(id: Int!): Comment
  """ (live)"""
  contentTypeById(id: BigInt!): ContentType
  """ (live)"""
  contractById(id: BigInt!): Contract
  """ (live)"""
  coreStoreById(id: Int!): CoreStore
  """ (live)"""
  countryById(id: Int!): Country
  """ (live)"""
  couponById(id: BigInt!): Coupon
  """ (live)"""
  creditMemoByCreditMemoAndId(creditMemo: String!, id: BigInt!): CreditMemo
  """ (live)"""
  currencyById(id: BigInt!): Currency
  """ (live)"""
  currencyRateByImportService(importService: String!): CurrencyRate
  """ (live)"""
  currencySymbolBySymbol(symbol: String!): CurrencySymbol
  """ (live)"""
  customerGroupById(id: BigInt!): CustomerGroup
  """ (live)"""
  customerPaymentById(id: BigInt!): CustomerPayment
  """ (live)"""
  customerById(id: Int!): Customer
  """ (live)"""
  customizationById(id: Int!): Customization
  """ (live)"""
  dashboardById(id: BigInt!): Dashboard
  """ (live)"""
  emailTemplateById(id: BigInt!): EmailTemplate
  """ (live)"""
  emailById(id: Int!): Email
  """ (live)"""
  eventById(id: BigInt!): Event
  """ (live)"""
  fullfillmentById(id: BigInt!): Fullfillment
  """ (live)"""
  generalSettingById(id: BigInt!): GeneralSetting
  """ (live)"""
  giftCertificateById(id: BigInt!): GiftCertificate
  """ (live)"""
  glossaryById(id: Int!): Glossary
  """ (live)"""
  importmById(id: BigInt!): Importm
  """ (live)"""
  integrationById(id: BigInt!): Integration
  """ (live)"""
  internalizationById(id: BigInt!): Internalization
  """ (live)"""
  invitationById(id: BigInt!): Invitation
  """ (live)"""
  invoiceById(id: BigInt!): Invoice
  """ (live)"""
  knowledgebaseById(id: BigInt!): Knowledgebase
  """ (live)"""
  leadById(id: BigInt!): Lead
  """ (live)"""
  manufacturerById(id: BigInt!): Manufacturer
  """ (live)"""
  mediamanagerById(id: Int!): Mediamanager
  """ (live)"""
  meetingById(id: BigInt!): Meeting
  """ (live)"""
  messageById(id: Int!): Message
  """ (live)"""
  newsletterSubscriberById(id: Int!): NewsletterSubscriber
  """ (live)"""
  occassionById(id: BigInt!): Occassion
  """ (live)"""
  ootoById(id: BigInt!): Ooto
  """ (live)"""
  opportunityById(id: BigInt!): Opportunity
  """ (live)"""
  orderById(id: Int!): Order
  """ (live)"""
  pageById(id: Int!): Page
  """ (live)"""
  partnerById(id: BigInt!): Partner
  """ (live)"""
  paymentById(id: BigInt!): Payment
  """ (live)"""
  pdfTemplateById(id: BigInt!): PdfTemplate
  """ (live)"""
  permissionById(id: BigInt!): Permission
  """ (live)"""
  pluginById(id: BigInt!): Plugin
  """ (live)"""
  pollById(id: Int!): Poll
  """ (live)"""
  productAttributeById(id: Int!): ProductAttribute
  """ (live)"""
  productAttributeSetById(id: Int!): ProductAttributeSet
  """ (live)"""
  productTypeById(id: Int!): ProductType
  """ (live)"""
  productById(id: BigInt!): Product
  """ (live)"""
  projectTemplateById(id: BigInt!): ProjectTemplate
  """ (live)"""
  projectById(id: BigInt!): Project
  """ (live)"""
  providerById(id: BigInt!): Provider
  """ (live)"""
  quoteById(id: Int!): Quote
  """ (live)"""
  ratingById(id: Int!): Rating
  """ (live)"""
  reportById(id: Int!): Report
  """ (live)"""
  returnById(id: BigInt!): Return
  """ (live)"""
  reviewById(id: Int!): Review
  """ (live)"""
  rewardById(id: Int!): Reward
  """ (live)"""
  roleById(id: Int!): Role
  """ (live)"""
  segmentById(id: BigInt!): Segment
  """ (live)"""
  settingscustomerById(id: BigInt!): Settingscustomer
  """ (live)"""
  settingsgeneralById(id: BigInt!): Settingsgeneral
  """ (live)"""
  settingshopById(id: BigInt!): Settingshop
  """ (live)"""
  settingsmarketingById(id: BigInt!): Settingsmarketing
  """ (live)"""
  settingssaleById(id: BigInt!): Settingssale
  """ (live)"""
  shipmentById(id: BigInt!): Shipment
  """ (live)"""
  shopSettingById(id: BigInt!): ShopSetting
  """ (live)"""
  shopById(id: Int!): Shop
  """ (live)"""
  sourceById(id: Int!): Source
  """ (live)"""
  specialDiscountById(id: Int!): SpecialDiscount
  """ (live)"""
  stateById(id: Int!): State
  """ (live)"""
  statisticById(id: Int!): Statistic
  """ (live)"""
  stockById(id: Int!): Stock
  """ (live)"""
  surveyById(id: BigInt!): Survey
  """ (live)"""
  tagById(id: Int!): Tag
  """ (live)"""
  targetById(id: BigInt!): Target
  """ (live)"""
  taskById(id: BigInt!): Task
  """ (live)"""
  taxCategoryById(id: BigInt!): TaxCategory
  """ (live)"""
  taxRateById(id: Int!): TaxRate
  """ (live)"""
  taxRuleById(id: Int!): TaxRule
  """ (live)"""
  themeById(id: Int!): Theme
  """ (live)"""
  ticketingById(id: BigInt!): Ticketing
  """ (live)"""
  trainingById(id: BigInt!): Training
  """ (live)"""
  transactionById(id: Int!): Transaction
  """ (live)"""
  uploadFileById(id: Int!): UploadFile
  """ (live)"""
  uploadFileMorphById(id: Int!): UploadFileMorph
  """ (live)"""
  urlRewriteById(id: Int!): UrlRewrite
  """ (live)"""
  userById(id: Int!): User
  """ (live)"""
  visitById(id: BigInt!): Visit
  """ (live)"""
  warehouseById(id: BigInt!): Warehouse
  """ (live)"""
  webhookById(id: BigInt!): Webhook
  """ (live)"""
  websiteById(id: BigInt!): Website
  """ (live)"""
  wishlistById(id: BigInt!): Wishlist
  """ (live)"""
  workspaceById(id: BigInt!): Workspace
  """ (live)"""
  zoneById(id: BigInt!): Zone
  """ (live)"""
  arrayAdd(array: JSON!, values: JSON!): JSON
  """ (live)"""
  arrayAddUnique(array: JSON!, values: JSON!): JSON
  """ (live)"""
  arrayContains(array: JSON!, values: JSON!): Boolean
  """ (live)"""
  arrayContainsAll(array: JSON!, values: JSON!): Boolean
  """ (live)"""
  arrayContainsAllRegex(array: JSON!, values: JSON!): Boolean
  """ (live)"""
  arrayRemove(array: JSON!, values: JSON!): JSON
  """ (live)"""
  jsonObjectSetKey(json: JSON!, keyToSet: String!, valueToSet: String!): JSON
  """Reads a single `_Audience` using its globally unique `ID`. (live)"""
  _audience(
    """The globally unique `ID` to be used in selecting a single `_Audience`."""
    nodeId: ID!
  ): _Audience
  """Reads a single `_GlobalConfig` using its globally unique `ID`. (live)"""
  _globalConfig(
    """The globally unique `ID` to be used in selecting a single `_GlobalConfig`."""
    nodeId: ID!
  ): _GlobalConfig
  """Reads a single `_GraphQlConfig` using its globally unique `ID`. (live)"""
  _graphQlConfig(
    """The globally unique `ID` to be used in selecting a single `_GraphQlConfig`."""
    nodeId: ID!
  ): _GraphQlConfig
  """Reads a single `_Idempotency` using its globally unique `ID`. (live)"""
  _idempotency(
    """The globally unique `ID` to be used in selecting a single `_Idempotency`."""
    nodeId: ID!
  ): _Idempotency
  """Reads a single `_JobSchedule` using its globally unique `ID`. (live)"""
  _jobSchedule(
    """The globally unique `ID` to be used in selecting a single `_JobSchedule`."""
    nodeId: ID!
  ): _JobSchedule
  """Reads a single `_JobStatus` using its globally unique `ID`. (live)"""
  _jobStatus(
    """The globally unique `ID` to be used in selecting a single `_JobStatus`."""
    nodeId: ID!
  ): _JobStatus
  """Reads a single `_JoinRolesRole` using its globally unique `ID`. (live)"""
  _joinRolesRole(
    """The globally unique `ID` to be used in selecting a single `_JoinRolesRole`."""
    nodeId: ID!
  ): _JoinRolesRole
  """Reads a single `_JoinUsersRole` using its globally unique `ID`. (live)"""
  _joinUsersRole(
    """The globally unique `ID` to be used in selecting a single `_JoinUsersRole`."""
    nodeId: ID!
  ): _JoinUsersRole
  """Reads a single `_PushStatus` using its globally unique `ID`. (live)"""
  _pushStatus(
    """The globally unique `ID` to be used in selecting a single `_PushStatus`."""
    nodeId: ID!
  ): _PushStatus
  """Reads a single `_Role` using its globally unique `ID`. (live)"""
  _role(
    """The globally unique `ID` to be used in selecting a single `_Role`."""
    nodeId: ID!
  ): _Role
  """Reads a single `_Schema` using its globally unique `ID`. (live)"""
  _schema(
    """The globally unique `ID` to be used in selecting a single `_Schema`."""
    nodeId: ID!
  ): _Schema
  """Reads a single `_User` using its globally unique `ID`. (live)"""
  _user(
    """The globally unique `ID` to be used in selecting a single `_User`."""
    nodeId: ID!
  ): _User
  """Reads a single `_PrismaMigration` using its globally unique `ID`. (live)"""
  _prismaMigration(
    """The globally unique `ID` to be used in selecting a single `_PrismaMigration`."""
    nodeId: ID!
  ): _PrismaMigration
  """Reads a single `Account` using its globally unique `ID`. (live)"""
  account(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    nodeId: ID!
  ): Account
  """Reads a single `Agreement` using its globally unique `ID`. (live)"""
  agreement(
    """The globally unique `ID` to be used in selecting a single `Agreement`."""
    nodeId: ID!
  ): Agreement
  """Reads a single `Analytic` using its globally unique `ID`. (live)"""
  analytic(
    """The globally unique `ID` to be used in selecting a single `Analytic`."""
    nodeId: ID!
  ): Analytic
  """Reads a single `Apitoken` using its globally unique `ID`. (live)"""
  apitoken(
    """The globally unique `ID` to be used in selecting a single `Apitoken`."""
    nodeId: ID!
  ): Apitoken
  """Reads a single `Article` using its globally unique `ID`. (live)"""
  article(
    """The globally unique `ID` to be used in selecting a single `Article`."""
    nodeId: ID!
  ): Article
  """Reads a single `Brand` using its globally unique `ID`. (live)"""
  brand(
    """The globally unique `ID` to be used in selecting a single `Brand`."""
    nodeId: ID!
  ): Brand
  """Reads a single `CartPriceRule` using its globally unique `ID`. (live)"""
  cartPriceRule(
    """The globally unique `ID` to be used in selecting a single `CartPriceRule`."""
    nodeId: ID!
  ): CartPriceRule
  """Reads a single `Case` using its globally unique `ID`. (live)"""
  case(
    """The globally unique `ID` to be used in selecting a single `Case`."""
    nodeId: ID!
  ): Case
  """Reads a single `CatalogPriceRule` using its globally unique `ID`. (live)"""
  catalogPriceRule(
    """The globally unique `ID` to be used in selecting a single `CatalogPriceRule`."""
    nodeId: ID!
  ): CatalogPriceRule
  """Reads a single `Category` using its globally unique `ID`. (live)"""
  category(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    nodeId: ID!
  ): Category
  """Reads a single `Channel` using its globally unique `ID`. (live)"""
  channel(
    """The globally unique `ID` to be used in selecting a single `Channel`."""
    nodeId: ID!
  ): Channel
  """Reads a single `Checklist` using its globally unique `ID`. (live)"""
  checklist(
    """The globally unique `ID` to be used in selecting a single `Checklist`."""
    nodeId: ID!
  ): Checklist
  """Reads a single `City` using its globally unique `ID`. (live)"""
  city(
    """The globally unique `ID` to be used in selecting a single `City`."""
    nodeId: ID!
  ): City
  """Reads a single `Collection` using its globally unique `ID`. (live)"""
  collection(
    """The globally unique `ID` to be used in selecting a single `Collection`."""
    nodeId: ID!
  ): Collection
  """Reads a single `Comment` using its globally unique `ID`. (live)"""
  comment(
    """The globally unique `ID` to be used in selecting a single `Comment`."""
    nodeId: ID!
  ): Comment
  """Reads a single `ContentType` using its globally unique `ID`. (live)"""
  contentType(
    """The globally unique `ID` to be used in selecting a single `ContentType`."""
    nodeId: ID!
  ): ContentType
  """Reads a single `Contract` using its globally unique `ID`. (live)"""
  contract(
    """The globally unique `ID` to be used in selecting a single `Contract`."""
    nodeId: ID!
  ): Contract
  """Reads a single `CoreStore` using its globally unique `ID`. (live)"""
  coreStore(
    """The globally unique `ID` to be used in selecting a single `CoreStore`."""
    nodeId: ID!
  ): CoreStore
  """Reads a single `Country` using its globally unique `ID`. (live)"""
  country(
    """The globally unique `ID` to be used in selecting a single `Country`."""
    nodeId: ID!
  ): Country
  """Reads a single `Coupon` using its globally unique `ID`. (live)"""
  coupon(
    """The globally unique `ID` to be used in selecting a single `Coupon`."""
    nodeId: ID!
  ): Coupon
  """Reads a single `CreditMemo` using its globally unique `ID`. (live)"""
  creditMemo(
    """The globally unique `ID` to be used in selecting a single `CreditMemo`."""
    nodeId: ID!
  ): CreditMemo
  """Reads a single `Currency` using its globally unique `ID`. (live)"""
  currency(
    """The globally unique `ID` to be used in selecting a single `Currency`."""
    nodeId: ID!
  ): Currency
  """Reads a single `CurrencyRate` using its globally unique `ID`. (live)"""
  currencyRate(
    """The globally unique `ID` to be used in selecting a single `CurrencyRate`."""
    nodeId: ID!
  ): CurrencyRate
  """Reads a single `CurrencySymbol` using its globally unique `ID`. (live)"""
  currencySymbol(
    """The globally unique `ID` to be used in selecting a single `CurrencySymbol`."""
    nodeId: ID!
  ): CurrencySymbol
  """Reads a single `CustomerGroup` using its globally unique `ID`. (live)"""
  customerGroup(
    """The globally unique `ID` to be used in selecting a single `CustomerGroup`."""
    nodeId: ID!
  ): CustomerGroup
  """Reads a single `CustomerPayment` using its globally unique `ID`. (live)"""
  customerPayment(
    """The globally unique `ID` to be used in selecting a single `CustomerPayment`."""
    nodeId: ID!
  ): CustomerPayment
  """Reads a single `Customer` using its globally unique `ID`. (live)"""
  customer(
    """The globally unique `ID` to be used in selecting a single `Customer`."""
    nodeId: ID!
  ): Customer
  """Reads a single `Customization` using its globally unique `ID`. (live)"""
  customization(
    """The globally unique `ID` to be used in selecting a single `Customization`."""
    nodeId: ID!
  ): Customization
  """Reads a single `Dashboard` using its globally unique `ID`. (live)"""
  dashboard(
    """The globally unique `ID` to be used in selecting a single `Dashboard`."""
    nodeId: ID!
  ): Dashboard
  """Reads a single `EmailTemplate` using its globally unique `ID`. (live)"""
  emailTemplate(
    """The globally unique `ID` to be used in selecting a single `EmailTemplate`."""
    nodeId: ID!
  ): EmailTemplate
  """Reads a single `Email` using its globally unique `ID`. (live)"""
  email(
    """The globally unique `ID` to be used in selecting a single `Email`."""
    nodeId: ID!
  ): Email
  """Reads a single `Event` using its globally unique `ID`. (live)"""
  event(
    """The globally unique `ID` to be used in selecting a single `Event`."""
    nodeId: ID!
  ): Event
  """Reads a single `Fullfillment` using its globally unique `ID`. (live)"""
  fullfillment(
    """The globally unique `ID` to be used in selecting a single `Fullfillment`."""
    nodeId: ID!
  ): Fullfillment
  """Reads a single `GeneralSetting` using its globally unique `ID`. (live)"""
  generalSetting(
    """The globally unique `ID` to be used in selecting a single `GeneralSetting`."""
    nodeId: ID!
  ): GeneralSetting
  """Reads a single `GiftCertificate` using its globally unique `ID`. (live)"""
  giftCertificate(
    """The globally unique `ID` to be used in selecting a single `GiftCertificate`."""
    nodeId: ID!
  ): GiftCertificate
  """Reads a single `Glossary` using its globally unique `ID`. (live)"""
  glossary(
    """The globally unique `ID` to be used in selecting a single `Glossary`."""
    nodeId: ID!
  ): Glossary
  """Reads a single `Importm` using its globally unique `ID`. (live)"""
  importm(
    """The globally unique `ID` to be used in selecting a single `Importm`."""
    nodeId: ID!
  ): Importm
  """Reads a single `Integration` using its globally unique `ID`. (live)"""
  integration(
    """The globally unique `ID` to be used in selecting a single `Integration`."""
    nodeId: ID!
  ): Integration
  """Reads a single `Internalization` using its globally unique `ID`. (live)"""
  internalization(
    """The globally unique `ID` to be used in selecting a single `Internalization`."""
    nodeId: ID!
  ): Internalization
  """Reads a single `Invitation` using its globally unique `ID`. (live)"""
  invitation(
    """The globally unique `ID` to be used in selecting a single `Invitation`."""
    nodeId: ID!
  ): Invitation
  """Reads a single `Invoice` using its globally unique `ID`. (live)"""
  invoice(
    """The globally unique `ID` to be used in selecting a single `Invoice`."""
    nodeId: ID!
  ): Invoice
  """Reads a single `Knowledgebase` using its globally unique `ID`. (live)"""
  knowledgebase(
    """The globally unique `ID` to be used in selecting a single `Knowledgebase`."""
    nodeId: ID!
  ): Knowledgebase
  """Reads a single `Lead` using its globally unique `ID`. (live)"""
  lead(
    """The globally unique `ID` to be used in selecting a single `Lead`."""
    nodeId: ID!
  ): Lead
  """Reads a single `Manufacturer` using its globally unique `ID`. (live)"""
  manufacturer(
    """The globally unique `ID` to be used in selecting a single `Manufacturer`."""
    nodeId: ID!
  ): Manufacturer
  """Reads a single `Mediamanager` using its globally unique `ID`. (live)"""
  mediamanager(
    """The globally unique `ID` to be used in selecting a single `Mediamanager`."""
    nodeId: ID!
  ): Mediamanager
  """Reads a single `Meeting` using its globally unique `ID`. (live)"""
  meeting(
    """The globally unique `ID` to be used in selecting a single `Meeting`."""
    nodeId: ID!
  ): Meeting
  """Reads a single `Message` using its globally unique `ID`. (live)"""
  message(
    """The globally unique `ID` to be used in selecting a single `Message`."""
    nodeId: ID!
  ): Message
  """Reads a single `NewsletterSubscriber` using its globally unique `ID`. (live)"""
  newsletterSubscriber(
    """The globally unique `ID` to be used in selecting a single `NewsletterSubscriber`."""
    nodeId: ID!
  ): NewsletterSubscriber
  """Reads a single `Occassion` using its globally unique `ID`. (live)"""
  occassion(
    """The globally unique `ID` to be used in selecting a single `Occassion`."""
    nodeId: ID!
  ): Occassion
  """Reads a single `Ooto` using its globally unique `ID`. (live)"""
  ooto(
    """The globally unique `ID` to be used in selecting a single `Ooto`."""
    nodeId: ID!
  ): Ooto
  """Reads a single `Opportunity` using its globally unique `ID`. (live)"""
  opportunity(
    """The globally unique `ID` to be used in selecting a single `Opportunity`."""
    nodeId: ID!
  ): Opportunity
  """Reads a single `Order` using its globally unique `ID`. (live)"""
  order(
    """The globally unique `ID` to be used in selecting a single `Order`."""
    nodeId: ID!
  ): Order
  """Reads a single `Page` using its globally unique `ID`. (live)"""
  page(
    """The globally unique `ID` to be used in selecting a single `Page`."""
    nodeId: ID!
  ): Page
  """Reads a single `Partner` using its globally unique `ID`. (live)"""
  partner(
    """The globally unique `ID` to be used in selecting a single `Partner`."""
    nodeId: ID!
  ): Partner
  """Reads a single `Payment` using its globally unique `ID`. (live)"""
  payment(
    """The globally unique `ID` to be used in selecting a single `Payment`."""
    nodeId: ID!
  ): Payment
  """Reads a single `PdfTemplate` using its globally unique `ID`. (live)"""
  pdfTemplate(
    """The globally unique `ID` to be used in selecting a single `PdfTemplate`."""
    nodeId: ID!
  ): PdfTemplate
  """Reads a single `Permission` using its globally unique `ID`. (live)"""
  permission(
    """The globally unique `ID` to be used in selecting a single `Permission`."""
    nodeId: ID!
  ): Permission
  """Reads a single `Plugin` using its globally unique `ID`. (live)"""
  plugin(
    """The globally unique `ID` to be used in selecting a single `Plugin`."""
    nodeId: ID!
  ): Plugin
  """Reads a single `Poll` using its globally unique `ID`. (live)"""
  poll(
    """The globally unique `ID` to be used in selecting a single `Poll`."""
    nodeId: ID!
  ): Poll
  """Reads a single `ProductAttribute` using its globally unique `ID`. (live)"""
  productAttribute(
    """The globally unique `ID` to be used in selecting a single `ProductAttribute`."""
    nodeId: ID!
  ): ProductAttribute
  """Reads a single `ProductAttributeSet` using its globally unique `ID`. (live)"""
  productAttributeSet(
    """The globally unique `ID` to be used in selecting a single `ProductAttributeSet`."""
    nodeId: ID!
  ): ProductAttributeSet
  """Reads a single `ProductType` using its globally unique `ID`. (live)"""
  productType(
    """The globally unique `ID` to be used in selecting a single `ProductType`."""
    nodeId: ID!
  ): ProductType
  """Reads a single `Product` using its globally unique `ID`. (live)"""
  product(
    """The globally unique `ID` to be used in selecting a single `Product`."""
    nodeId: ID!
  ): Product
  """Reads a single `ProjectTemplate` using its globally unique `ID`. (live)"""
  projectTemplate(
    """The globally unique `ID` to be used in selecting a single `ProjectTemplate`."""
    nodeId: ID!
  ): ProjectTemplate
  """Reads a single `Project` using its globally unique `ID`. (live)"""
  project(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    nodeId: ID!
  ): Project
  """Reads a single `Provider` using its globally unique `ID`. (live)"""
  provider(
    """The globally unique `ID` to be used in selecting a single `Provider`."""
    nodeId: ID!
  ): Provider
  """Reads a single `Quote` using its globally unique `ID`. (live)"""
  quote(
    """The globally unique `ID` to be used in selecting a single `Quote`."""
    nodeId: ID!
  ): Quote
  """Reads a single `Rating` using its globally unique `ID`. (live)"""
  rating(
    """The globally unique `ID` to be used in selecting a single `Rating`."""
    nodeId: ID!
  ): Rating
  """Reads a single `Report` using its globally unique `ID`. (live)"""
  report(
    """The globally unique `ID` to be used in selecting a single `Report`."""
    nodeId: ID!
  ): Report
  """Reads a single `Return` using its globally unique `ID`. (live)"""
  return(
    """The globally unique `ID` to be used in selecting a single `Return`."""
    nodeId: ID!
  ): Return
  """Reads a single `Review` using its globally unique `ID`. (live)"""
  review(
    """The globally unique `ID` to be used in selecting a single `Review`."""
    nodeId: ID!
  ): Review
  """Reads a single `Reward` using its globally unique `ID`. (live)"""
  reward(
    """The globally unique `ID` to be used in selecting a single `Reward`."""
    nodeId: ID!
  ): Reward
  """Reads a single `Role` using its globally unique `ID`. (live)"""
  role(
    """The globally unique `ID` to be used in selecting a single `Role`."""
    nodeId: ID!
  ): Role
  """Reads a single `Segment` using its globally unique `ID`. (live)"""
  segment(
    """The globally unique `ID` to be used in selecting a single `Segment`."""
    nodeId: ID!
  ): Segment
  """Reads a single `Settingscustomer` using its globally unique `ID`. (live)"""
  settingscustomer(
    """The globally unique `ID` to be used in selecting a single `Settingscustomer`."""
    nodeId: ID!
  ): Settingscustomer
  """Reads a single `Settingsgeneral` using its globally unique `ID`. (live)"""
  settingsgeneral(
    """The globally unique `ID` to be used in selecting a single `Settingsgeneral`."""
    nodeId: ID!
  ): Settingsgeneral
  """Reads a single `Settingshop` using its globally unique `ID`. (live)"""
  settingshop(
    """The globally unique `ID` to be used in selecting a single `Settingshop`."""
    nodeId: ID!
  ): Settingshop
  """Reads a single `Settingsmarketing` using its globally unique `ID`. (live)"""
  settingsmarketing(
    """The globally unique `ID` to be used in selecting a single `Settingsmarketing`."""
    nodeId: ID!
  ): Settingsmarketing
  """Reads a single `Settingssale` using its globally unique `ID`. (live)"""
  settingssale(
    """The globally unique `ID` to be used in selecting a single `Settingssale`."""
    nodeId: ID!
  ): Settingssale
  """Reads a single `Shipment` using its globally unique `ID`. (live)"""
  shipment(
    """The globally unique `ID` to be used in selecting a single `Shipment`."""
    nodeId: ID!
  ): Shipment
  """Reads a single `ShopSetting` using its globally unique `ID`. (live)"""
  shopSetting(
    """The globally unique `ID` to be used in selecting a single `ShopSetting`."""
    nodeId: ID!
  ): ShopSetting
  """Reads a single `Shop` using its globally unique `ID`. (live)"""
  shop(
    """The globally unique `ID` to be used in selecting a single `Shop`."""
    nodeId: ID!
  ): Shop
  """Reads a single `Source` using its globally unique `ID`. (live)"""
  source(
    """The globally unique `ID` to be used in selecting a single `Source`."""
    nodeId: ID!
  ): Source
  """Reads a single `SpecialDiscount` using its globally unique `ID`. (live)"""
  specialDiscount(
    """The globally unique `ID` to be used in selecting a single `SpecialDiscount`."""
    nodeId: ID!
  ): SpecialDiscount
  """Reads a single `State` using its globally unique `ID`. (live)"""
  state(
    """The globally unique `ID` to be used in selecting a single `State`."""
    nodeId: ID!
  ): State
  """Reads a single `Statistic` using its globally unique `ID`. (live)"""
  statistic(
    """The globally unique `ID` to be used in selecting a single `Statistic`."""
    nodeId: ID!
  ): Statistic
  """Reads a single `Stock` using its globally unique `ID`. (live)"""
  stock(
    """The globally unique `ID` to be used in selecting a single `Stock`."""
    nodeId: ID!
  ): Stock
  """Reads a single `Survey` using its globally unique `ID`. (live)"""
  survey(
    """The globally unique `ID` to be used in selecting a single `Survey`."""
    nodeId: ID!
  ): Survey
  """Reads a single `Tag` using its globally unique `ID`. (live)"""
  tag(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    nodeId: ID!
  ): Tag
  """Reads a single `Target` using its globally unique `ID`. (live)"""
  target(
    """The globally unique `ID` to be used in selecting a single `Target`."""
    nodeId: ID!
  ): Target
  """Reads a single `Task` using its globally unique `ID`. (live)"""
  task(
    """The globally unique `ID` to be used in selecting a single `Task`."""
    nodeId: ID!
  ): Task
  """Reads a single `TaxCategory` using its globally unique `ID`. (live)"""
  taxCategory(
    """The globally unique `ID` to be used in selecting a single `TaxCategory`."""
    nodeId: ID!
  ): TaxCategory
  """Reads a single `TaxRate` using its globally unique `ID`. (live)"""
  taxRate(
    """The globally unique `ID` to be used in selecting a single `TaxRate`."""
    nodeId: ID!
  ): TaxRate
  """Reads a single `TaxRule` using its globally unique `ID`. (live)"""
  taxRule(
    """The globally unique `ID` to be used in selecting a single `TaxRule`."""
    nodeId: ID!
  ): TaxRule
  """Reads a single `Theme` using its globally unique `ID`. (live)"""
  theme(
    """The globally unique `ID` to be used in selecting a single `Theme`."""
    nodeId: ID!
  ): Theme
  """Reads a single `Ticketing` using its globally unique `ID`. (live)"""
  ticketing(
    """The globally unique `ID` to be used in selecting a single `Ticketing`."""
    nodeId: ID!
  ): Ticketing
  """Reads a single `Training` using its globally unique `ID`. (live)"""
  training(
    """The globally unique `ID` to be used in selecting a single `Training`."""
    nodeId: ID!
  ): Training
  """Reads a single `Transaction` using its globally unique `ID`. (live)"""
  transaction(
    """The globally unique `ID` to be used in selecting a single `Transaction`."""
    nodeId: ID!
  ): Transaction
  """Reads a single `UploadFile` using its globally unique `ID`. (live)"""
  uploadFile(
    """The globally unique `ID` to be used in selecting a single `UploadFile`."""
    nodeId: ID!
  ): UploadFile
  """Reads a single `UploadFileMorph` using its globally unique `ID`. (live)"""
  uploadFileMorph(
    """The globally unique `ID` to be used in selecting a single `UploadFileMorph`."""
    nodeId: ID!
  ): UploadFileMorph
  """Reads a single `UrlRewrite` using its globally unique `ID`. (live)"""
  urlRewrite(
    """The globally unique `ID` to be used in selecting a single `UrlRewrite`."""
    nodeId: ID!
  ): UrlRewrite
  """Reads a single `User` using its globally unique `ID`. (live)"""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  """Reads a single `Visit` using its globally unique `ID`. (live)"""
  visit(
    """The globally unique `ID` to be used in selecting a single `Visit`."""
    nodeId: ID!
  ): Visit
  """Reads a single `Warehouse` using its globally unique `ID`. (live)"""
  warehouse(
    """The globally unique `ID` to be used in selecting a single `Warehouse`."""
    nodeId: ID!
  ): Warehouse
  """Reads a single `Webhook` using its globally unique `ID`. (live)"""
  webhook(
    """The globally unique `ID` to be used in selecting a single `Webhook`."""
    nodeId: ID!
  ): Webhook
  """Reads a single `Website` using its globally unique `ID`. (live)"""
  website(
    """The globally unique `ID` to be used in selecting a single `Website`."""
    nodeId: ID!
  ): Website
  """Reads a single `Wishlist` using its globally unique `ID`. (live)"""
  wishlist(
    """The globally unique `ID` to be used in selecting a single `Wishlist`."""
    nodeId: ID!
  ): Wishlist
  """Reads a single `Workspace` using its globally unique `ID`. (live)"""
  workspace(
    """The globally unique `ID` to be used in selecting a single `Workspace`."""
    nodeId: ID!
  ): Workspace
  """Reads a single `Zone` using its globally unique `ID`. (live)"""
  zone(
    """The globally unique `ID` to be used in selecting a single `Zone`."""
    nodeId: ID!
  ): Zone
  """
  Fetches a list of entities using their representations; used for Apollo
  Federation. (live)
  """
  _entities(representations: [_Any!]!): [_Entity]! @deprecated(reason: "Only Apollo Federation should use this")
  """
  Entrypoint for Apollo Federation to determine more information about
  this service. (live)
  """
  _service: _Service! @deprecated(reason: "Only Apollo Federation should use this")
}

"""
Used to represent a set of fields. Grammatically, a field set is a
selection set minus the braces.
"""
scalar _FieldSet
