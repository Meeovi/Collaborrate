import { GraphQLResolveInfo } from "graphql";
import { AggregateShopsArgs } from "./args/AggregateShopsArgs";
import { CreateManyShopsArgs } from "./args/CreateManyShopsArgs";
import { CreateShopsArgs } from "./args/CreateShopsArgs";
import { DeleteManyShopsArgs } from "./args/DeleteManyShopsArgs";
import { DeleteShopsArgs } from "./args/DeleteShopsArgs";
import { FindFirstShopsArgs } from "./args/FindFirstShopsArgs";
import { FindManyShopsArgs } from "./args/FindManyShopsArgs";
import { FindUniqueShopsArgs } from "./args/FindUniqueShopsArgs";
import { GroupByShopsArgs } from "./args/GroupByShopsArgs";
import { UpdateManyShopsArgs } from "./args/UpdateManyShopsArgs";
import { UpdateShopsArgs } from "./args/UpdateShopsArgs";
import { UpsertShopsArgs } from "./args/UpsertShopsArgs";
import { Shops } from "../../../models/Shops";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateShops } from "../../outputs/AggregateShops";
import { ShopsGroupBy } from "../../outputs/ShopsGroupBy";
export declare class ShopsCrudResolver {
    findUniqueShops(ctx: any, info: GraphQLResolveInfo, args: FindUniqueShopsArgs): Promise<Shops | null>;
    findFirstShops(ctx: any, info: GraphQLResolveInfo, args: FindFirstShopsArgs): Promise<Shops | null>;
    findManyShops(ctx: any, info: GraphQLResolveInfo, args: FindManyShopsArgs): Promise<Shops[]>;
    createShops(ctx: any, info: GraphQLResolveInfo, args: CreateShopsArgs): Promise<Shops>;
    createManyShops(ctx: any, info: GraphQLResolveInfo, args: CreateManyShopsArgs): Promise<AffectedRowsOutput>;
    deleteShops(ctx: any, info: GraphQLResolveInfo, args: DeleteShopsArgs): Promise<Shops | null>;
    updateShops(ctx: any, info: GraphQLResolveInfo, args: UpdateShopsArgs): Promise<Shops | null>;
    deleteManyShops(ctx: any, info: GraphQLResolveInfo, args: DeleteManyShopsArgs): Promise<AffectedRowsOutput>;
    updateManyShops(ctx: any, info: GraphQLResolveInfo, args: UpdateManyShopsArgs): Promise<AffectedRowsOutput>;
    upsertShops(ctx: any, info: GraphQLResolveInfo, args: UpsertShopsArgs): Promise<Shops>;
    aggregateShops(ctx: any, info: GraphQLResolveInfo, args: AggregateShopsArgs): Promise<AggregateShops>;
    groupByShops(ctx: any, info: GraphQLResolveInfo, args: GroupByShopsArgs): Promise<ShopsGroupBy[]>;
}
