import { GraphQLResolveInfo } from "graphql";
import { AggregateCustomersArgs } from "./args/AggregateCustomersArgs";
import { CreateManyCustomersArgs } from "./args/CreateManyCustomersArgs";
import { CreateOneCustomersArgs } from "./args/CreateOneCustomersArgs";
import { DeleteManyCustomersArgs } from "./args/DeleteManyCustomersArgs";
import { DeleteOneCustomersArgs } from "./args/DeleteOneCustomersArgs";
import { FindFirstCustomersArgs } from "./args/FindFirstCustomersArgs";
import { FindManyCustomersArgs } from "./args/FindManyCustomersArgs";
import { FindUniqueCustomersArgs } from "./args/FindUniqueCustomersArgs";
import { GroupByCustomersArgs } from "./args/GroupByCustomersArgs";
import { UpdateManyCustomersArgs } from "./args/UpdateManyCustomersArgs";
import { UpdateOneCustomersArgs } from "./args/UpdateOneCustomersArgs";
import { UpsertOneCustomersArgs } from "./args/UpsertOneCustomersArgs";
import { Customers } from "../../../models/Customers";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateCustomers } from "../../outputs/AggregateCustomers";
import { CustomersGroupBy } from "../../outputs/CustomersGroupBy";
export declare class CustomersCrudResolver {
    aggregateCustomers(ctx: any, info: GraphQLResolveInfo, args: AggregateCustomersArgs): Promise<AggregateCustomers>;
    createManyCustomers(ctx: any, info: GraphQLResolveInfo, args: CreateManyCustomersArgs): Promise<AffectedRowsOutput>;
    createOneCustomers(ctx: any, info: GraphQLResolveInfo, args: CreateOneCustomersArgs): Promise<Customers>;
    deleteManyCustomers(ctx: any, info: GraphQLResolveInfo, args: DeleteManyCustomersArgs): Promise<AffectedRowsOutput>;
    deleteOneCustomers(ctx: any, info: GraphQLResolveInfo, args: DeleteOneCustomersArgs): Promise<Customers | null>;
    findFirstCustomers(ctx: any, info: GraphQLResolveInfo, args: FindFirstCustomersArgs): Promise<Customers | null>;
    findManyCustomers(ctx: any, info: GraphQLResolveInfo, args: FindManyCustomersArgs): Promise<Customers[]>;
    findUniqueCustomers(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCustomersArgs): Promise<Customers | null>;
    groupByCustomers(ctx: any, info: GraphQLResolveInfo, args: GroupByCustomersArgs): Promise<CustomersGroupBy[]>;
    updateManyCustomers(ctx: any, info: GraphQLResolveInfo, args: UpdateManyCustomersArgs): Promise<AffectedRowsOutput>;
    updateOneCustomers(ctx: any, info: GraphQLResolveInfo, args: UpdateOneCustomersArgs): Promise<Customers | null>;
    upsertOneCustomers(ctx: any, info: GraphQLResolveInfo, args: UpsertOneCustomersArgs): Promise<Customers>;
}
