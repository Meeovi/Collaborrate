import { GraphQLResolveInfo } from "graphql";
import { AggregatePaymentsArgs } from "./args/AggregatePaymentsArgs";
import { CreateManyPaymentsArgs } from "./args/CreateManyPaymentsArgs";
import { CreatePaymentsArgs } from "./args/CreatePaymentsArgs";
import { DeleteManyPaymentsArgs } from "./args/DeleteManyPaymentsArgs";
import { DeletePaymentsArgs } from "./args/DeletePaymentsArgs";
import { FindFirstPaymentsArgs } from "./args/FindFirstPaymentsArgs";
import { FindManyPaymentsArgs } from "./args/FindManyPaymentsArgs";
import { FindUniquePaymentsArgs } from "./args/FindUniquePaymentsArgs";
import { GroupByPaymentsArgs } from "./args/GroupByPaymentsArgs";
import { UpdateManyPaymentsArgs } from "./args/UpdateManyPaymentsArgs";
import { UpdatePaymentsArgs } from "./args/UpdatePaymentsArgs";
import { UpsertPaymentsArgs } from "./args/UpsertPaymentsArgs";
import { Payments } from "../../../models/Payments";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregatePayments } from "../../outputs/AggregatePayments";
import { PaymentsGroupBy } from "../../outputs/PaymentsGroupBy";
export declare class PaymentsCrudResolver {
    findUniquePayments(ctx: any, info: GraphQLResolveInfo, args: FindUniquePaymentsArgs): Promise<Payments | null>;
    findFirstPayments(ctx: any, info: GraphQLResolveInfo, args: FindFirstPaymentsArgs): Promise<Payments | null>;
    findManyPayments(ctx: any, info: GraphQLResolveInfo, args: FindManyPaymentsArgs): Promise<Payments[]>;
    createPayments(ctx: any, info: GraphQLResolveInfo, args: CreatePaymentsArgs): Promise<Payments>;
    createManyPayments(ctx: any, info: GraphQLResolveInfo, args: CreateManyPaymentsArgs): Promise<AffectedRowsOutput>;
    deletePayments(ctx: any, info: GraphQLResolveInfo, args: DeletePaymentsArgs): Promise<Payments | null>;
    updatePayments(ctx: any, info: GraphQLResolveInfo, args: UpdatePaymentsArgs): Promise<Payments | null>;
    deleteManyPayments(ctx: any, info: GraphQLResolveInfo, args: DeleteManyPaymentsArgs): Promise<AffectedRowsOutput>;
    updateManyPayments(ctx: any, info: GraphQLResolveInfo, args: UpdateManyPaymentsArgs): Promise<AffectedRowsOutput>;
    upsertPayments(ctx: any, info: GraphQLResolveInfo, args: UpsertPaymentsArgs): Promise<Payments>;
    aggregatePayments(ctx: any, info: GraphQLResolveInfo, args: AggregatePaymentsArgs): Promise<AggregatePayments>;
    groupByPayments(ctx: any, info: GraphQLResolveInfo, args: GroupByPaymentsArgs): Promise<PaymentsGroupBy[]>;
}
