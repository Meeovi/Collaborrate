import { GraphQLResolveInfo } from "graphql";
import { AggregateEmailsArgs } from "./args/AggregateEmailsArgs";
import { CreateManyEmailsArgs } from "./args/CreateManyEmailsArgs";
import { CreateOneEmailsArgs } from "./args/CreateOneEmailsArgs";
import { DeleteManyEmailsArgs } from "./args/DeleteManyEmailsArgs";
import { DeleteOneEmailsArgs } from "./args/DeleteOneEmailsArgs";
import { FindFirstEmailsArgs } from "./args/FindFirstEmailsArgs";
import { FindManyEmailsArgs } from "./args/FindManyEmailsArgs";
import { FindUniqueEmailsArgs } from "./args/FindUniqueEmailsArgs";
import { GroupByEmailsArgs } from "./args/GroupByEmailsArgs";
import { UpdateManyEmailsArgs } from "./args/UpdateManyEmailsArgs";
import { UpdateOneEmailsArgs } from "./args/UpdateOneEmailsArgs";
import { UpsertOneEmailsArgs } from "./args/UpsertOneEmailsArgs";
import { Emails } from "../../../models/Emails";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateEmails } from "../../outputs/AggregateEmails";
import { EmailsGroupBy } from "../../outputs/EmailsGroupBy";
export declare class EmailsCrudResolver {
    aggregateEmails(ctx: any, info: GraphQLResolveInfo, args: AggregateEmailsArgs): Promise<AggregateEmails>;
    createManyEmails(ctx: any, info: GraphQLResolveInfo, args: CreateManyEmailsArgs): Promise<AffectedRowsOutput>;
    createOneEmails(ctx: any, info: GraphQLResolveInfo, args: CreateOneEmailsArgs): Promise<Emails>;
    deleteManyEmails(ctx: any, info: GraphQLResolveInfo, args: DeleteManyEmailsArgs): Promise<AffectedRowsOutput>;
    deleteOneEmails(ctx: any, info: GraphQLResolveInfo, args: DeleteOneEmailsArgs): Promise<Emails | null>;
    findFirstEmails(ctx: any, info: GraphQLResolveInfo, args: FindFirstEmailsArgs): Promise<Emails | null>;
    findManyEmails(ctx: any, info: GraphQLResolveInfo, args: FindManyEmailsArgs): Promise<Emails[]>;
    findUniqueEmails(ctx: any, info: GraphQLResolveInfo, args: FindUniqueEmailsArgs): Promise<Emails | null>;
    groupByEmails(ctx: any, info: GraphQLResolveInfo, args: GroupByEmailsArgs): Promise<EmailsGroupBy[]>;
    updateManyEmails(ctx: any, info: GraphQLResolveInfo, args: UpdateManyEmailsArgs): Promise<AffectedRowsOutput>;
    updateOneEmails(ctx: any, info: GraphQLResolveInfo, args: UpdateOneEmailsArgs): Promise<Emails | null>;
    upsertOneEmails(ctx: any, info: GraphQLResolveInfo, args: UpsertOneEmailsArgs): Promise<Emails>;
}
