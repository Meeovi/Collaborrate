import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as argsTypes from "./resolvers/crud/args.index";
import * as relationResolvers from "./resolvers/relations/resolvers.index";
import * as models from "./models";
import * as outputTypes from "./resolvers/outputs";
import * as inputTypes from "./resolvers/inputs";
declare const crudResolversMap: {
    Articles: typeof crudResolvers.ArticlesCrudResolver;
    Cart_price_rules: typeof crudResolvers.Cart_price_rulesCrudResolver;
    Catalog_price_rule: typeof crudResolvers.Catalog_price_ruleCrudResolver;
    Categories: typeof crudResolvers.CategoriesCrudResolver;
    Cities: typeof crudResolvers.CitiesCrudResolver;
    Comments: typeof crudResolvers.CommentsCrudResolver;
    Core_store: typeof crudResolvers.Core_storeCrudResolver;
    Countries: typeof crudResolvers.CountriesCrudResolver;
    Coupons: typeof crudResolvers.CouponsCrudResolver;
    Credit_memos: typeof crudResolvers.Credit_memosCrudResolver;
    Currency_rates: typeof crudResolvers.Currency_ratesCrudResolver;
    Currency_symbols: typeof crudResolvers.Currency_symbolsCrudResolver;
    Customers: typeof crudResolvers.CustomersCrudResolver;
    Gift_certificates: typeof crudResolvers.Gift_certificatesCrudResolver;
    Glossary: typeof crudResolvers.GlossaryCrudResolver;
    Invoices: typeof crudResolvers.InvoicesCrudResolver;
    Newsletter_subscribers: typeof crudResolvers.Newsletter_subscribersCrudResolver;
    Orders: typeof crudResolvers.OrdersCrudResolver;
    Pages: typeof crudResolvers.PagesCrudResolver;
    Polls: typeof crudResolvers.PollsCrudResolver;
    Product_attribute: typeof crudResolvers.Product_attributeCrudResolver;
    Product_attribute_set: typeof crudResolvers.Product_attribute_setCrudResolver;
    Products: typeof crudResolvers.ProductsCrudResolver;
    Quotes: typeof crudResolvers.QuotesCrudResolver;
    Rating: typeof crudResolvers.RatingCrudResolver;
    Reports: typeof crudResolvers.ReportsCrudResolver;
    Reviews: typeof crudResolvers.ReviewsCrudResolver;
    Role: typeof crudResolvers.RoleCrudResolver;
    Shipments: typeof crudResolvers.ShipmentsCrudResolver;
    Shops: typeof crudResolvers.ShopsCrudResolver;
    Source: typeof crudResolvers.SourceCrudResolver;
    Special_discounts: typeof crudResolvers.Special_discountsCrudResolver;
    States: typeof crudResolvers.StatesCrudResolver;
    Statistics: typeof crudResolvers.StatisticsCrudResolver;
    Stocks: typeof crudResolvers.StocksCrudResolver;
    Tags: typeof crudResolvers.TagsCrudResolver;
    Tax_rate: typeof crudResolvers.Tax_rateCrudResolver;
    Tax_rule: typeof crudResolvers.Tax_ruleCrudResolver;
    Themes: typeof crudResolvers.ThemesCrudResolver;
    Transactions: typeof crudResolvers.TransactionsCrudResolver;
    Upload_file: typeof crudResolvers.Upload_fileCrudResolver;
    Upload_file_morph: typeof crudResolvers.Upload_file_morphCrudResolver;
    Url_rewrites: typeof crudResolvers.Url_rewritesCrudResolver;
    Users: typeof crudResolvers.UsersCrudResolver;
    Agreements: typeof crudResolvers.AgreementsCrudResolver;
    Collections: typeof crudResolvers.CollectionsCrudResolver;
    Customer_group: typeof crudResolvers.Customer_groupCrudResolver;
    Emails: typeof crudResolvers.EmailsCrudResolver;
    Events: typeof crudResolvers.EventsCrudResolver;
    Returns: typeof crudResolvers.ReturnsCrudResolver;
    Segments: typeof crudResolvers.SegmentsCrudResolver;
    Websites: typeof crudResolvers.WebsitesCrudResolver;
    Customer_payment: typeof crudResolvers.Customer_paymentCrudResolver;
    General_settings: typeof crudResolvers.General_settingsCrudResolver;
    Sales_settings: typeof crudResolvers.Sales_settingsCrudResolver;
    Shop_settings: typeof crudResolvers.Shop_settingsCrudResolver;
    Fullfillments: typeof crudResolvers.FullfillmentsCrudResolver;
    Customer: typeof crudResolvers.CustomerCrudResolver;
    Permissions: typeof crudResolvers.PermissionsCrudResolver;
    Warehouse: typeof crudResolvers.WarehouseCrudResolver;
    Apitoken: typeof crudResolvers.ApitokenCrudResolver;
    Cases: typeof crudResolvers.CasesCrudResolver;
    Contracts: typeof crudResolvers.ContractsCrudResolver;
    Internalization: typeof crudResolvers.InternalizationCrudResolver;
    Leads: typeof crudResolvers.LeadsCrudResolver;
    Opportunities: typeof crudResolvers.OpportunitiesCrudResolver;
    Projects: typeof crudResolvers.ProjectsCrudResolver;
    Providers: typeof crudResolvers.ProvidersCrudResolver;
    Surveys: typeof crudResolvers.SurveysCrudResolver;
    Targets: typeof crudResolvers.TargetsCrudResolver;
    Tasks: typeof crudResolvers.TasksCrudResolver;
    Webhooks: typeof crudResolvers.WebhooksCrudResolver;
    Meeting: typeof crudResolvers.MeetingCrudResolver;
    Ooto: typeof crudResolvers.OotoCrudResolver;
    Accounts: typeof crudResolvers.AccountsCrudResolver;
    Email_templates: typeof crudResolvers.Email_templatesCrudResolver;
    Importm: typeof crudResolvers.ImportmCrudResolver;
    Integrations: typeof crudResolvers.IntegrationsCrudResolver;
    Knowledgebase: typeof crudResolvers.KnowledgebaseCrudResolver;
    Payments: typeof crudResolvers.PaymentsCrudResolver;
    Pdf_templates: typeof crudResolvers.Pdf_templatesCrudResolver;
    Project_templates: typeof crudResolvers.Project_templatesCrudResolver;
    Rewards: typeof crudResolvers.RewardsCrudResolver;
};
declare type ResolverModelNames = keyof typeof crudResolversMap;
declare type ModelResolverActionNames<TModel extends ResolverModelNames> = keyof typeof crudResolversMap[TModel]["prototype"];
export declare type ResolverActionsConfig<TModel extends ResolverModelNames> = Partial<Record<ModelResolverActionNames<TModel> | "_all", MethodDecorator[]>>;
export declare type ResolversEnhanceMap = {
    [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};
export declare function applyResolversEnhanceMap(resolversEnhanceMap: ResolversEnhanceMap): void;
declare type ArgsTypesNames = keyof typeof argsTypes;
declare type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<keyof typeof argsTypes[TArgsType]["prototype"], number | symbol>;
declare type ArgFieldsConfig<TArgsType extends ArgsTypesNames> = FieldsConfig<ArgFieldNames<TArgsType>>;
export declare type ArgConfig<TArgsType extends ArgsTypesNames> = {
    class?: ClassDecorator[];
    fields?: ArgFieldsConfig<TArgsType>;
};
export declare type ArgsTypesEnhanceMap = {
    [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};
export declare function applyArgsTypesEnhanceMap(argsTypesEnhanceMap: ArgsTypesEnhanceMap): void;
declare const relationResolversMap: {
    Comments: typeof relationResolvers.CommentsRelationsResolver;
    Coupons: typeof relationResolvers.CouponsRelationsResolver;
    Credit_memos: typeof relationResolvers.Credit_memosRelationsResolver;
    Customers: typeof relationResolvers.CustomersRelationsResolver;
    Newsletter_subscribers: typeof relationResolvers.Newsletter_subscribersRelationsResolver;
    Orders: typeof relationResolvers.OrdersRelationsResolver;
    Product_attribute: typeof relationResolvers.Product_attributeRelationsResolver;
    Product_attribute_set: typeof relationResolvers.Product_attribute_setRelationsResolver;
    Products: typeof relationResolvers.ProductsRelationsResolver;
    Quotes: typeof relationResolvers.QuotesRelationsResolver;
    Rating: typeof relationResolvers.RatingRelationsResolver;
    Tax_rate: typeof relationResolvers.Tax_rateRelationsResolver;
    Tax_rule: typeof relationResolvers.Tax_ruleRelationsResolver;
    Themes: typeof relationResolvers.ThemesRelationsResolver;
    Transactions: typeof relationResolvers.TransactionsRelationsResolver;
    Customer_group: typeof relationResolvers.Customer_groupRelationsResolver;
    Emails: typeof relationResolvers.EmailsRelationsResolver;
    Returns: typeof relationResolvers.ReturnsRelationsResolver;
    Websites: typeof relationResolvers.WebsitesRelationsResolver;
    Customer_payment: typeof relationResolvers.Customer_paymentRelationsResolver;
};
declare type RelationResolverModelNames = keyof typeof relationResolversMap;
declare type RelationResolverActionNames<TModel extends RelationResolverModelNames> = keyof typeof relationResolversMap[TModel]["prototype"];
export declare type RelationResolverActionsConfig<TModel extends RelationResolverModelNames> = Partial<Record<RelationResolverActionNames<TModel> | "_all", MethodDecorator[]>>;
export declare type RelationResolversEnhanceMap = {
    [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};
export declare function applyRelationResolversEnhanceMap(relationResolversEnhanceMap: RelationResolversEnhanceMap): void;
declare type FieldsConfig<TTypeKeys extends string = string> = Partial<Record<TTypeKeys | "_all", PropertyDecorator[]>>;
declare type ModelNames = keyof typeof models;
declare type ModelFieldNames<TModel extends ModelNames> = Exclude<keyof typeof models[TModel]["prototype"], number | symbol>;
declare type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<ModelFieldNames<TModel>>;
export declare type ModelConfig<TModel extends ModelNames> = {
    class?: ClassDecorator[];
    fields?: ModelFieldsConfig<TModel>;
};
export declare type ModelsEnhanceMap = {
    [TModel in ModelNames]?: ModelConfig<TModel>;
};
export declare function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap): void;
declare type OutputTypesNames = keyof typeof outputTypes;
declare type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<keyof typeof outputTypes[TOutput]["prototype"], number | symbol>;
declare type OutputTypeFieldsConfig<TOutput extends OutputTypesNames> = FieldsConfig<OutputTypeFieldNames<TOutput>>;
export declare type OutputTypeConfig<TOutput extends OutputTypesNames> = {
    class?: ClassDecorator[];
    fields?: OutputTypeFieldsConfig<TOutput>;
};
export declare type OutputTypesEnhanceMap = {
    [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};
export declare function applyOutputTypesEnhanceMap(outputTypesEnhanceMap: OutputTypesEnhanceMap): void;
declare type InputTypesNames = keyof typeof inputTypes;
declare type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<keyof typeof inputTypes[TInput]["prototype"], number | symbol>;
declare type InputTypeFieldsConfig<TInput extends InputTypesNames> = FieldsConfig<InputTypeFieldNames<TInput>>;
export declare type InputTypeConfig<TInput extends InputTypesNames> = {
    class?: ClassDecorator[];
    fields?: InputTypeFieldsConfig<TInput>;
};
export declare type InputTypesEnhanceMap = {
    [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};
export declare function applyInputTypesEnhanceMap(inputTypesEnhanceMap: InputTypesEnhanceMap): void;
export {};
